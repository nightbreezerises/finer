Namespace(mode='describe', config_file_env='./configs/env_machine.yml', config_file_expt='./configs/expts/pokemon_all.yml', num_per_category='3')
{'setup': 'ours', 'experiment': 5.0, 'dataset_name': 'pokemon', 'num_classes': 10, 'num_base': 5, 'num_novel': 5, 'seed': 1, 'batch_size': 256, 'clustering_method': 'multi_clip_voting', 'model_size': 'ViT-B/16', 'model_size_vqa': 'FlanT5-XXL', 'model_type_llm': 'gpt-3.5-turbo', 'image_size': 224, 'verbose': False, 'host': 'chaos', 'num_workers': 16, 'device': 'cuda', 'device_count': '1', 'device_id': '0', 'data_dir': './datasets/pokemon', 'expt_dir': './experiments/pokemon', 'expt_dir_describe': './experiments/pokemon/describe', 'path_vqa_questions': './experiments/pokemon/describe/pokemon_vqa_questions', 'path_vqa_answers': './experiments/pokemon/describe/pokemon_attributes_pairs', 'path_llm_prompts': './experiments/pokemon/describe/pokemon_llm_prompts', 'expt_dir_guess': './experiments/pokemon/guess', 'path_llm_replies_raw': './experiments/pokemon/guess/pokemon_llm_replies_raw', 'path_llm_replies_jsoned': './experiments/pokemon/guess/pokemon_llm_replies_jsoned', 'path_llm_gussed_names': './experiments/pokemon/guess/pokemon_llm_gussed_names', 'expt_dir_grouping': './experiments/pokemon/grouping'}
Loading checkpoint shards:   0%|          | 0/5 [00:00<?, ?it/s]Loading checkpoint shards:  20%|██        | 1/5 [00:02<00:08,  2.07s/it]Loading checkpoint shards:  40%|████      | 2/5 [00:04<00:06,  2.12s/it]Loading checkpoint shards:  60%|██████    | 3/5 [00:06<00:04,  2.13s/it]Loading checkpoint shards:  80%|████████  | 4/5 [00:08<00:02,  2.14s/it]Loading checkpoint shards: 100%|██████████| 5/5 [00:10<00:00,  2.09s/it]Loading checkpoint shards: 100%|██████████| 5/5 [00:10<00:00,  2.10s/it]
0it [00:00, ?it/s]1it [00:05,  5.73s/it]2it [00:11,  5.54s/it]0: label=2
==============================
Charmander_0 with label 2
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a small orange pokemon'''
        Attributes List:
        - '''color''': '''orange'''
        - '''size''': '''small'''
        - '''shape''': '''a small, orange, squirtle-like creature'''
        - '''body pattern''': '''a small, orange, scaly, lizard-like creature with'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''orange'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a stubby tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''fire'''
        - '''special markings''': '''the pokemon has a snout with a horn on it'''
        - '''ear shape''': '''a frog'''
        - '''skin texture''': '''smooth and shiny'''
        - '''evolutionary stage''': '''a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a t-shaped arm'''
        - '''facial expression''': '''a sad expression'''
        - '''unique feature''': '''it has a fire-type'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

1: label=2
==============================
Charmander_1 with label 2
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a small orange pokemon'''
        Attributes List:
        - '''color''': '''orange'''
        - '''size''': '''it is small'''
        - '''shape''': '''a small, orange, and yellow lizard'''
        - '''body pattern''': '''a scaly, squarish, snout-like'''
        - '''number of limbs''': '''four limbs'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''orange'''
        - '''mouth shape''': '''a snout'''
        - '''tail shape''': '''a slanted snout'''
        - '''number of heads''': '''two heads'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''fire'''
        - '''special markings''': '''the pokemon has a red nose and a yellow tummy'''
        - '''ear shape''': '''a frog'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a t-shaped arm'''
        - '''facial expression''': '''a smile'''
        - '''unique feature''': '''it has a tail'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

2: label=2
==============================
Charmander_2 with label 2
==============================

3it [00:16,  5.59s/it]4it [00:22,  5.65s/it]5it [00:27,  5.46s/it]
        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''brown'''
        - '''size''': '''it is small'''
        - '''shape''': '''it is a small, round, and stubby'''
        - '''body pattern''': '''it has a spherical head, a spherical body'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''the eyes are a squint'''
        - '''eye color''': '''blue'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a stubby tail with a rounded tip'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''fire'''
        - '''special markings''': '''the pokemon has a white belly and a blue tail'''
        - '''ear shape''': '''a spherical shape'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a t'''
        - '''arm shape''': '''the arms are a t shape'''
        - '''facial expression''': '''a smile'''
        - '''unique feature''': '''it has a flame on its head'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

3: label=9
==============================
Pidgeotto_3 with label 9
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a sylveon'''
        Attributes List:
        - '''color''': '''brown and pink'''
        - '''size''': '''it is a medium size'''
        - '''shape''': '''a bird with a long neck and a long tail'''
        - '''body pattern''': '''a tan body with a red head and wings'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''pink'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a swan-like tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a bird'''
        - '''special markings''': '''the pokemon has a red crest on its head'''
        - '''ear shape''': '''a spherical shape'''
        - '''skin texture''': '''a scaly texture'''
        - '''evolutionary stage''': '''a sylveon'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a slanted wing'''
        - '''arm shape''': '''a wing shape'''
        - '''facial expression''': '''a smirk'''
        - '''unique feature''': '''a bird with a long beak'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

4: label=9
==============================
Pidgeotto_4 with label 9
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a sylveon'''
        Attributes List:
        - '''color''': '''pink and brown'''
        - '''size''': '''it is a medium size'''
        - '''shape''': '''a bird'''
        - '''body pattern''': '''a bird with a long neck and a long tail'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a hawk's eye'''
        - '''eye color''': '''brown'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a swan'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a bird'''
        - '''special markings''': '''the pokemon has a red and yellow head, a white body, and a'''
        - '''ear shape''': '''a swan'''
        - '''skin texture''': '''a scaly texture'''
        - '''evolutionary stage''': '''a sylveon'''
        - '''number of wings''': '''two wings'''
        - '''leg shape''': '''a swan-like leg shape'''
        - '''arm shape''': '''a wing shape'''
        - '''facial expression''': '''a smirk'''
        - '''unique feature''': '''it has wings'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

5: label=9
==============================6it [00:32,  5.29s/it]7it [00:38,  5.52s/it]
Pidgeotto_5 with label 9
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''brown and red'''
        - '''size''': '''it is small'''
        - '''shape''': '''a bird'''
        - '''body pattern''': '''a brown body with a red head'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a hawk'''
        - '''eye color''': '''red'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a swan-like tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a bird'''
        - '''special markings''': '''a red hat and a white crest on its head'''
        - '''ear shape''': '''a spherical shape'''
        - '''skin texture''': '''smooth and shiny'''
        - '''evolutionary stage''': '''a snorlax'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle pokemon'''
        - '''arm shape''': '''a wing shape'''
        - '''facial expression''': '''a smug look'''
        - '''unique feature''': '''it has a red hat'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''yes'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

6: label=3
==============================
Charmeleon_6 with label 3
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''red'''
        - '''size''': '''it is small'''
        - '''shape''': '''it is a red and yellow pokemon'''
        - '''body pattern''': '''it has a red body with a white belly and a white tail'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''the eyes are a squint'''
        - '''eye color''': '''red'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''it is a stubby tail with a curved tip'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''fire'''
        - '''special markings''': '''the pokemon has a red body with a white belly and a white tail'''
        - '''ear shape''': '''the ear shape is a triangle'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a thigh and a shin'''
        - '''arm shape''': '''the arms are shaped like a t'''
        - '''facial expression''': '''a smirk'''
        - '''unique feature''': '''it has a tail that is on fire'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

7: label=3
==============================
Charmeleon_7 with label 3
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a red tawny tawny'''
        Attributes List:
        - '''color''': '''red'''
        - '''size''': '''it is small'''
        - '''shape''': '''a red and yellow lizard'''
        - '''body pattern''': '''a red and yellow tiger-like pattern'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''red'''
        - '''mouth shape''': '''a snout'''
        - '''tail shape''': '''a slanted tadpole tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''fire'''
        - '''special markings''': '''the pokemon has a red tummy and a white belly'''
        - '''ear shape''': '''a frog'''
        - '''skin texture''': '''a red lizard'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a t-shaped arm'''
        - '''facial expression''': '''a smirk'''
        - '''unique feature''': '''it has a fire-type'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

8it [00:44,  5.50s/it]9it [00:49,  5.40s/it]10it [00:54,  5.38s/it]END==============================

8: label=3
==============================
Charmeleon_8 with label 3
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a red pokemon with fire on its back'''
        Attributes List:
        - '''color''': '''red'''
        - '''size''': '''it is small'''
        - '''shape''': '''a red and yellow lizard'''
        - '''body pattern''': '''a red and white striped body with a black belly'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''red'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a stubby tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''fire'''
        - '''special markings''': '''the pokemon has a red body with a white belly and a white tail'''
        - '''ear shape''': '''a slanted triangle'''
        - '''skin texture''': '''a red lizard'''
        - '''evolutionary stage''': '''a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a t-shaped arm'''
        - '''facial expression''': '''angry'''
        - '''unique feature''': '''it has a flame on its head'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

9: label=1
==============================
Ivysaur_9 with label 1
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''blue'''
        - '''size''': '''it is small'''
        - '''shape''': '''a squirtle'''
        - '''body pattern''': '''a blue and green squirtle with a pink flower on its head'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''blue'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a flower'''
        - '''special markings''': '''the pokemon has a flower on its head'''
        - '''ear shape''': '''a squirtle'''
        - '''skin texture''': '''a scaly texture'''
        - '''evolutionary stage''': '''a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a squirtle'''
        - '''facial expression''': '''a sad expression'''
        - '''unique feature''': '''it has a flower on its head'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

10: label=1
==============================
Ivysaur_10 with label 1
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''green'''
        - '''size''': '''it is small'''
        - '''shape''': '''a squirtle'''
        - '''body pattern''': '''a squirtle with a flower on its head'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''green'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''grass'''
        - '''special markings''': '''the pokemon has a snout with a horn and a tail'''
        - '''ear shape''': '''a squirtle'''
        - '''skin texture''': '''a scaly texture'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a twig'''
        - '''facial expression''': '''a sad expression'''
        - '''unique feature''': '''it has a flower on its head'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

11it [00:59,  5.38s/it]12it [01:06,  5.66s/it]13it [01:11,  5.49s/it]END==============================

11: label=1
==============================
Ivysaur_11 with label 1
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''blue'''
        - '''size''': '''it is small'''
        - '''shape''': '''it is a small blue pokemon with a leaf on its back'''
        - '''body pattern''': '''it has a blue body with a green head and a pink tail'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''the eyes are a squint'''
        - '''eye color''': '''blue'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''the pokemon is a squirtle'''
        - '''special markings''': '''the pokemon has a green head, a blue body, and a pink tail'''
        - '''ear shape''': '''a squirtle'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a thigh and a thigh'''
        - '''arm shape''': '''the pokemon has a squirtle arm shape'''
        - '''facial expression''': '''a sad expression'''
        - '''unique feature''': '''it has a flower on its head'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

12: label=6
==============================
Pikachu_12 with label 6
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''pikachu'''
        Attributes List:
        - '''color''': '''yellow'''
        - '''size''': '''it is small'''
        - '''shape''': '''a small yellow pokemon'''
        - '''body pattern''': '''it has a yellow body with a black head and a black tail'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''yellow'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a slanted squirt tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''grass'''
        - '''special markings''': '''the pokemon has a yellow body with a black stripe on the side of its'''
        - '''ear shape''': '''a ear shape of a t'''
        - '''skin texture''': '''smooth'''
        - '''evolutionary stage''': '''it is a pikachu'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a t-shape'''
        - '''facial expression''': '''a sad expression'''
        - '''unique feature''': '''it has a tail'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

13: label=6
==============================
Pikachu_13 with label 6
==============================

14it [01:16,  5.35s/it]15it [01:21,  5.32s/it]16it [01:26,  5.13s/it]
        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''pikachu'''
        Attributes List:
        - '''color''': '''yellow'''
        - '''size''': '''it is small'''
        - '''shape''': '''a yellow pokemon with a black nose'''
        - '''body pattern''': '''a yellow body with black eyes and a black nose'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''yellow'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a stubby tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a pokemon'''
        - '''special markings''': '''the pokemon has a black stripe on its forehead'''
        - '''ear shape''': '''a squished triangle'''
        - '''skin texture''': '''smooth'''
        - '''evolutionary stage''': '''pikachu'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a slanted triangle'''
        - '''facial expression''': '''a pikachu with a smile on his face'''
        - '''unique feature''': '''it has a yellow head'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

14: label=6
==============================
Pikachu_14 with label 6
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''pikachu'''
        Attributes List:
        - '''color''': '''yellow'''
        - '''size''': '''it is small'''
        - '''shape''': '''it is a small yellow ball'''
        - '''body pattern''': '''it has a yellow body with a black head and a black tail'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''yellow'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a stubby tail'''
        - '''number of heads''': '''two heads'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a ball'''
        - '''special markings''': '''the pokemon has a white belly and a black tail'''
        - '''ear shape''': '''a ear shape of a squirtle'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a pikachu'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a t'''
        - '''arm shape''': '''it is a squirtle'''
        - '''facial expression''': '''a smile'''
        - '''unique feature''': '''it is a pikachu'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

15: label=4
==============================
Squirtle_15 with label 4
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a small turtle'''
        Attributes List:
        - '''color''': '''blue and yellow'''
        - '''size''': '''small'''
        - '''shape''': '''a turtle'''
        - '''body pattern''': '''a turtle with a blue head and a yellow belly'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''blue'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''sand'''
        - '''special markings''': '''the pokemon has a blue and yellow shell'''
        - '''ear shape''': '''a teddy bear'''
        - '''skin texture''': '''smooth'''
        - '''evolutionary stage''': '''a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a t-shape'''
        - '''facial expression''': '''a sad expression'''
        - '''unique feature''': '''it is a turtle'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

16: label=4
==============================
Squirtle_16 with label 4
17it [01:31,  5.16s/it]18it [01:37,  5.32s/it]==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''blue'''
        - '''size''': '''it is small'''
        - '''shape''': '''a turtle'''
        - '''body pattern''': '''it is a squirtle'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''blue'''
        - '''mouth shape''': '''a snout'''
        - '''tail shape''': '''a squirtle'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''water'''
        - '''special markings''': '''the pokemon has a blue head, a blue body, and a blue tail'''
        - '''ear shape''': '''a squirtle'''
        - '''skin texture''': '''it is smooth and shiny'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''it is a squirtle'''
        - '''facial expression''': '''a smile'''
        - '''unique feature''': '''it is a squirtle'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

17: label=4
==============================
Squirtle_17 with label 4
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a turtle'''
        Attributes List:
        - '''color''': '''blue'''
        - '''size''': '''it is a small turtle'''
        - '''shape''': '''it is a turtle'''
        - '''body pattern''': '''it is a turtle pokemon'''
        - '''number of limbs''': '''four limbs'''
        - '''eye shape''': '''the eye shape is a squint'''
        - '''eye color''': '''blue'''
        - '''mouth shape''': '''the mouth shape of the pokemon in this image is a snout'''
        - '''tail shape''': '''it is a turtle'''
        - '''number of heads''': '''two heads'''
        - '''number of eyes''': '''two eyes'''
        - '''associated element''': '''a turtle'''
        - '''special markings''': '''the pokemon has a blue shell with a brown head and a brown body with'''
        - '''ear shape''': '''the ear shape is a t'''
        - '''skin texture''': '''the skin texture is smooth and shiny'''
        - '''evolutionary stage''': '''the pokemon in this image is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a t'''
        - '''arm shape''': '''the arm shape is a t'''
        - '''facial expression''': '''a turtle pokemon'''
        - '''unique feature''': '''it is a turtle'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

18: label=5
==============================
Wartortle_18 with label 5
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''blue'''
        - '''size''': '''it is small'''
        - '''shape''': '''a turtle'''
        - '''body pattern''': '''it has a spherical body with a spherical head'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''blue'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''water'''
        - '''special markings''': '''the pokemon has a blue body with a white belly and a blue head'''
        - '''ear shape''': '''a squirtle'''
        - '''skin texture''': '''it is smooth and shiny'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''it is a squirtle'''
        - '''facial expression''': '''a smirk'''
        - '''unique feature''': '''it has a shell'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''yes'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

19it [01:42,  5.33s/it]20it [01:48,  5.45s/it]21it [01:54,  5.66s/it]END==============================

19: label=5
==============================
Wartortle_19 with label 5
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a pokemon that is a turtle'''
        Attributes List:
        - '''color''': '''blue'''
        - '''size''': '''it is a small turtle'''
        - '''shape''': '''it is a turtle'''
        - '''body pattern''': '''it has a blue body with a white belly and a white head'''
        - '''number of limbs''': '''four limbs'''
        - '''eye shape''': '''the eye shape is a squint'''
        - '''eye color''': '''blue'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''it is a squirtle'''
        - '''number of heads''': '''two heads'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a turtle'''
        - '''special markings''': '''the pokemon has a blue body with a white belly and a white head with'''
        - '''ear shape''': '''the ear shape is a t'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a t'''
        - '''arm shape''': '''the arm shape is a t'''
        - '''facial expression''': '''a turtle pokemon'''
        - '''unique feature''': '''it has a shell'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

20: label=5
==============================
Wartortle_20 with label 5
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''person, person, person, person, person, person, person, person, person, person'''
        Attributes List:
        - '''color''': '''blue'''
        - '''size''': '''it is a small pokemon'''
        - '''shape''': '''a turtle'''
        - '''body pattern''': '''a squirtle with a squirtle on its'''
        - '''number of limbs''': '''four limbs'''
        - '''eye shape''': '''a person'''
        - '''eye color''': '''blue'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a twig'''
        - '''special markings''': '''the pokemon has a squirtle on its back, and a'''
        - '''ear shape''': '''a squirtle'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''person, person, person, person, person, person, person, person, person, person'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a thigh and a thigh'''
        - '''arm shape''': '''a teddy bear'''
        - '''facial expression''': '''a smile'''
        - '''unique feature''': '''it is a squirtle'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

21: label=8
==============================
Pidgey_21 with label 8
==============================

22it [02:00,  5.72s/it]23it [02:05,  5.58s/it]
        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a bird pokemon'''
        Attributes List:
        - '''color''': '''brown and white'''
        - '''size''': '''it is a small bird'''
        - '''shape''': '''it is a bird'''
        - '''body pattern''': '''it is a bird with a brown body and white head'''
        - '''number of limbs''': '''four limbs'''
        - '''eye shape''': '''the eyes are a squint'''
        - '''eye color''': '''brown eyes'''
        - '''mouth shape''': '''the mouth shape is a slit'''
        - '''tail shape''': '''it is a swan'''
        - '''number of heads''': '''two heads'''
        - '''number of eyes''': '''two eyes'''
        - '''associated element''': '''bird'''
        - '''special markings''': '''the bird has a white crest on its head, and a white wing patch'''
        - '''ear shape''': '''the ear shape is a triangle'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''the pokemon in this image is a snorlax'''
        - '''number of wings''': '''two wings'''
        - '''leg shape''': '''the leg shape is a squirtle'''
        - '''arm shape''': '''the arm shape is a wing'''
        - '''facial expression''': '''a bird pokemon'''
        - '''unique feature''': '''it has a beak'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

22: label=8
==============================
Pidgey_22 with label 8
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a sylveon'''
        Attributes List:
        - '''color''': '''brown and white'''
        - '''size''': '''it is a medium size'''
        - '''shape''': '''a bird'''
        - '''body pattern''': '''it is a bird with a brown body and a white head'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a hawk'''
        - '''eye color''': '''brown'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a swan'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a bird'''
        - '''special markings''': '''the pokemon has a brown body with a white head and a brown tail'''
        - '''ear shape''': '''a spherical shape'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''a sylveon'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a squirtle'''
        - '''arm shape''': '''it is a swan'''
        - '''facial expression''': '''a hawk'''
        - '''unique feature''': '''it has a long neck'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

23: label=8
==============================
Pidgey_23 with label 8
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a bird'''
        Attributes List:
        - '''color''': '''brown and white'''
        - '''size''': '''it is a medium size'''
        - '''shape''': '''a bird'''
        - '''body pattern''': '''it is a bird'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a hawk'''
        - '''eye color''': '''brown'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a swan'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a bird'''
        - '''special markings''': '''the bird has a white crest on its head'''
        - '''ear shape''': '''a spherical shape'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''a sylveon'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a squirtle'''
        - '''arm shape''': '''it is a swan'''
        - '''facial expression''': '''a bird with a smirk'''
        - '''unique feature''': '''it is a bird'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

24it [02:10,  5.36s/it]25it [02:15,  5.38s/it]26it [02:20,  5.29s/it]END==============================

24: label=0
==============================
Bulbasaur_24 with label 0
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''green'''
        - '''size''': '''it is small'''
        - '''shape''': '''it is a green and red pokemon'''
        - '''body pattern''': '''a green body with a red head and a red tail'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''green'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a pokemon'''
        - '''special markings''': '''the pokemon has a green body with a red nose and eyes'''
        - '''ear shape''': '''a frog'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a thigh shape'''
        - '''arm shape''': '''the arms are shaped like a t'''
        - '''facial expression''': '''a smile'''
        - '''unique feature''': '''it has a green body and red eyes'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

25: label=0
==============================
Bulbasaur_25 with label 0
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''blue'''
        - '''size''': '''it is small'''
        - '''shape''': '''a small, green, leafy creature'''
        - '''body pattern''': '''a spherical body with a tail'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''green'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''leaf'''
        - '''special markings''': '''the pokemon has a green leaf on its back'''
        - '''ear shape''': '''a squirtle'''
        - '''skin texture''': '''smooth'''
        - '''evolutionary stage''': '''a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a squirtle'''
        - '''facial expression''': '''a sad expression'''
        - '''unique feature''': '''it has a leaf on its back'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

26: label=0
==============================
Bulbasaur_26 with label 0
==============================

27it [02:26,  5.37s/it]28it [02:32,  5.52s/it]
        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''green'''
        - '''size''': '''it is small'''
        - '''shape''': '''a small, green, squirtle-like creature'''
        - '''body pattern''': '''a spherical body with a rounded head and a s'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''green'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''grass'''
        - '''special markings''': '''the pokemon has a large green pouch on its back'''
        - '''ear shape''': '''a squirtle'''
        - '''skin texture''': '''a scaly texture'''
        - '''evolutionary stage''': '''a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a squirtle'''
        - '''facial expression''': '''a sad expression'''
        - '''unique feature''': '''it has a backpack'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

27: label=7
==============================
Raichu_27 with label 7
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''pikachu'''
        Attributes List:
        - '''color''': '''yellow'''
        - '''size''': '''it is small'''
        - '''shape''': '''it is a small, yellow, and brown pokemon'''
        - '''body pattern''': '''it has a squirtle tail and a squirt'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''yellow'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a pokemon that is a squirtle'''
        - '''special markings''': '''the pokemon has a yellow body with a black tail and a white t'''
        - '''ear shape''': '''a squiggly tail'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a pikachu'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a t'''
        - '''arm shape''': '''the arm shape is a t'''
        - '''facial expression''': '''a smile'''
        - '''unique feature''': '''it has a tail'''
        - '''body posturetail presence''': '''yes'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

28: label=7
==============================
Raichu_28 with label 7
==============================

29it [02:38,  5.60s/it]30it [02:43,  5.62s/it]30it [02:43,  5.46s/it]

        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''pikachu, person, person, person, person, person, person, person, person'''
        Attributes List:
        - '''color''': '''orange and white'''
        - '''size''': '''it is small'''
        - '''shape''': '''it is a small, yellow, and brown pokemon'''
        - '''body pattern''': '''it is a squirtle'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''yellow'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a pig tail'''
        - '''number of heads''': '''two heads'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a pokemon'''
        - '''special markings''': '''the pokemon has a yellow head, a yellow body, and a yellow tail'''
        - '''ear shape''': '''a squished ear shape'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a pikachu'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a t'''
        - '''arm shape''': '''it is a teddy bear'''
        - '''facial expression''': '''sad'''
        - '''unique feature''': '''it has a horn on its head'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

29: label=7
==============================
Raichu_29 with label 7
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a pikachu'''
        Attributes List:
        - '''color''': '''brown'''
        - '''size''': '''it is small'''
        - '''shape''': '''a small, stubby, snoutlike creature with a long'''
        - '''body pattern''': '''it has a squirtle like pattern on its back'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''brown'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a pig tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a pokemon'''
        - '''special markings''': '''the pokemon has a snout with a horn on it, and'''
        - '''ear shape''': '''a squished ear'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a pikachu'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a thigh and a thigh'''
        - '''arm shape''': '''the arm shape is a t'''
        - '''facial expression''': '''a smirk'''
        - '''unique feature''': '''it has a tail'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''yes'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

Succ. dumped attribute values to ./experiments/pokemon/describe/pokemon_attributes_pairs_3
Succ. dumped LLM prompts  to ./experiments/pokemon/describe/pokemon_llm_prompts_3
Namespace(mode='guess', config_file_env='./configs/env_machine.yml', config_file_expt='./configs/expts/pokemon_all.yml', num_per_category='3')
{'setup': 'ours', 'experiment': 5.0, 'dataset_name': 'pokemon', 'num_classes': 10, 'num_base': 5, 'num_novel': 5, 'seed': 1, 'batch_size': 256, 'clustering_method': 'multi_clip_voting', 'model_size': 'ViT-B/16', 'model_size_vqa': 'FlanT5-XXL', 'model_type_llm': 'gpt-3.5-turbo', 'image_size': 224, 'verbose': False, 'host': 'chaos', 'num_workers': 16, 'device': 'cuda', 'device_count': '1', 'device_id': '0', 'data_dir': './datasets/pokemon', 'expt_dir': './experiments/pokemon', 'expt_dir_describe': './experiments/pokemon/describe', 'path_vqa_questions': './experiments/pokemon/describe/pokemon_vqa_questions', 'path_vqa_answers': './experiments/pokemon/describe/pokemon_attributes_pairs', 'path_llm_prompts': './experiments/pokemon/describe/pokemon_llm_prompts', 'expt_dir_guess': './experiments/pokemon/guess', 'path_llm_replies_raw': './experiments/pokemon/guess/pokemon_llm_replies_raw', 'path_llm_replies_jsoned': './experiments/pokemon/guess/pokemon_llm_replies_jsoned', 'path_llm_gussed_names': './experiments/pokemon/guess/pokemon_llm_gussed_names', 'expt_dir_grouping': './experiments/pokemon/grouping'}
0it [00:00, ?it/s]0it [00:18, ?it/s]
╭───────────────────── Traceback (most recent call last) ──────────────────────╮
│ /home/hdl/miniconda3/envs/finer/lib/python3.9/site-packages/tenacity/__init_ │
│ _.py:382 in __call__                                                         │
│                                                                              │
│   379 │   │   │   do = self.iter(retry_state=retry_state)                    │
│   380 │   │   │   if isinstance(do, DoAttempt):                              │
│   381 │   │   │   │   try:                                                   │
│ ❱ 382 │   │   │   │   │   result = fn(*args, **kwargs)                       │
│   383 │   │   │   │   except BaseException:  # noqa: B902                    │
│   384 │   │   │   │   │   retry_state.set_exception(sys.exc_info())  # type: │
│   385 │   │   │   │   else:                                                  │
│                                                                              │
│ /home/hdl/project/FineR/FineR_0/agents/llm_bot.py:57 in call_gpts            │
│                                                                              │
│    54 │   │   │   max_tokens=max_tokens                                      │
│    55 │   │   )                                                              │
│    56 │   else:                                                              │
│ ❱  57 │   │   response = client.chat.completions.create(                     │
│    58 │   │   │   model=model,                                               │
│    59 │   │   │   messages=chatgpt_messages,                                 │
│    60 │   │   │   temperature=temperature                                    │
│                                                                              │
│ /home/hdl/miniconda3/envs/finer/lib/python3.9/site-packages/openai/_utils/_u │
│ tils.py:287 in wrapper                                                       │
│                                                                              │
│   284 │   │   │   │   │   else:                                              │
│   285 │   │   │   │   │   │   msg = f"Missing required argument: {quote(miss │
│   286 │   │   │   │   raise TypeError(msg)                                   │
│ ❱ 287 │   │   │   return func(*args, **kwargs)                               │
│   288 │   │                                                                  │
│   289 │   │   return wrapper  # type: ignore                                 │
│   290                                                                        │
│                                                                              │
│ /home/hdl/miniconda3/envs/finer/lib/python3.9/site-packages/openai/resources │
│ /chat/completions/completions.py:1147 in create                              │
│                                                                              │
│   1144 │   │   timeout: float | httpx.Timeout | None | NotGiven = NOT_GIVEN, │
│   1145 │   ) -> ChatCompletion | Stream[ChatCompletionChunk]:                │
│   1146 │   │   validate_response_format(response_format)                     │
│ ❱ 1147 │   │   return self._post(                                            │
│   1148 │   │   │   "/chat/completions",                                      │
│   1149 │   │   │   body=maybe_transform(                                     │
│   1150 │   │   │   │   {                                                     │
│                                                                              │
│ /home/hdl/miniconda3/envs/finer/lib/python3.9/site-packages/openai/_base_cli │
│ ent.py:1259 in post                                                          │
│                                                                              │
│   1256 │   │   opts = FinalRequestOptions.construct(                         │
│   1257 │   │   │   method="post", url=path, json_data=body, files=to_httpx_f │
│   1258 │   │   )                                                             │
│ ❱ 1259 │   │   return cast(ResponseT, self.request(cast_to, opts, stream=str │
│   1260 │                                                                     │
│   1261 │   def patch(                                                        │
│   1262 │   │   self,                                                         │
│                                                                              │
│ /home/hdl/miniconda3/envs/finer/lib/python3.9/site-packages/openai/_base_cli │
│ ent.py:1047 in request                                                       │
│                                                                              │
│   1044 │   │   │   │   │   err.response.read()                               │
│   1045 │   │   │   │                                                         │
│   1046 │   │   │   │   log.debug("Re-raising status error")                  │
│ ❱ 1047 │   │   │   │   raise self._make_status_error_from_response(err.respo │
│   1048 │   │   │                                                             │
│   1049 │   │   │   break                                                     │
│   1050                                                                       │
╰──────────────────────────────────────────────────────────────────────────────╯
AuthenticationError: Error code: 401 - {'error': {'message': '无效的sk 
token，请检查token是否正确', 'type': 'error'}}

The above exception was the direct cause of the following exception:

╭───────────────────── Traceback (most recent call last) ──────────────────────╮
│ /home/hdl/project/FineR/FineR_0/discovering.py:394 in <module>               │
│                                                                              │
│   391 │   │   llm_bot = LLMBot(model=cfg['model_type_llm'])                  │
│   392 │   │                                                                  │
│   393 │   │   # run the main program                                         │
│ ❱ 394 │   │   raw_replies, jsoned_replies = main_guess(cfg, llm_bot, reasoni │
│   395 │   │                                                                  │
│   396 │   │   # save LLM replis                                              │
│   397 │   │   dump_json(cfg['path_llm_replies_raw'] + expt_id_suffix, raw_re │
│                                                                              │
│ /home/hdl/project/FineR/FineR_0/discovering.py:170 in main_guess             │
│                                                                              │
│   167 │                                                                      │
│   168 │   # LLM inferring                                                    │
│   169 │   for i, (key, prompt) in tqdm(enumerate(prompt_list.items())):      │
│ ❱ 170 │   │   raw_reply = bot.infer(prompt, temperature=0.9)  # use a high t │
│   171 │   │   used_tokens = bot.get_used_tokens()                            │
│   172 │   │                                                                  │
│   173 │   │   replies_raw[key] = raw_reply                                   │
│                                                                              │
│ /home/hdl/project/FineR/FineR_0/agents/llm_bot.py:119 in infer               │
│                                                                              │
│   116 │   │   return reply, total_prompt, n_tokens                           │
│   117 │                                                                      │
│   118 │   def infer(self, prompt, temperature=0.9):                          │
│ ❱ 119 │   │   reply, _, n_tokens = self.__query(prompt, temperature, max_tok │
│   120 │   │   self.total_tokens += n_tokens                                  │
│   121 │   │   return reply.strip()                                           │
│   122                                                                        │
│                                                                              │
│ /home/hdl/project/FineR/FineR_0/agents/llm_bot.py:109 in __query             │
│                                                                              │
│   106 │                                                                      │
│   107 │   def __query(self, prompt, temperature, max_token):                 │
│   108 │   │   total_prompt = prepare_chatgpt_message(prompt)                 │
│ ❱ 109 │   │   reply, n_tokens = call_gpts(                                   │
│   110 │   │   │   client=self.client,                                        │
│   111 │   │   │   chatgpt_messages=total_prompt,                             │
│   112 │   │   │   temperature=temperature,                                   │
│                                                                              │
│ /home/hdl/miniconda3/envs/finer/lib/python3.9/site-packages/tenacity/__init_ │
│ _.py:289 in wrapped_f                                                        │
│                                                                              │
│   286 │   │                                                                  │
│   287 │   │   @functools.wraps(f)                                            │
│   288 │   │   def wrapped_f(*args: t.Any, **kw: t.Any) -> t.Any:             │
│ ❱ 289 │   │   │   return self(f, *args, **kw)                                │
│   290 │   │                                                                  │
│   291 │   │   def retry_with(*args: t.Any, **kwargs: t.Any) -> WrappedFn:    │
│   292 │   │   │   return self.copy(*args, **kwargs).wraps(f)                 │
│                                                                              │
│ /home/hdl/miniconda3/envs/finer/lib/python3.9/site-packages/tenacity/__init_ │
│ _.py:379 in __call__                                                         │
│                                                                              │
│   376 │   │                                                                  │
│   377 │   │   retry_state = RetryCallState(retry_object=self, fn=fn, args=ar │
│   378 │   │   while True:                                                    │
│ ❱ 379 │   │   │   do = self.iter(retry_state=retry_state)                    │
│   380 │   │   │   if isinstance(do, DoAttempt):                              │
│   381 │   │   │   │   try:                                                   │
│   382 │   │   │   │   │   result = fn(*args, **kwargs)                       │
│                                                                              │
│ /home/hdl/miniconda3/envs/finer/lib/python3.9/site-packages/tenacity/__init_ │
│ _.py:326 in iter                                                             │
│                                                                              │
│   323 │   │   │   retry_exc = self.retry_error_cls(fut)                      │
│   324 │   │   │   if self.reraise:                                           │
│   325 │   │   │   │   raise retry_exc.reraise()                              │
│ ❱ 326 │   │   │   raise retry_exc from fut.exception()                       │
│   327 │   │                                                                  │
│   328 │   │   if self.wait:                                                  │
│   329 │   │   │   sleep = self.wait(retry_state)                             │
╰──────────────────────────────────────────────────────────────────────────────╯
RetryError: RetryError[<Future at 0x78bf819d37f0 state=finished raised 
AuthenticationError>]
Namespace(mode='postprocess', config_file_env='./configs/env_machine.yml', config_file_expt='./configs/expts/pokemon_all.yml', num_per_category='3')
{'setup': 'ours', 'experiment': 5.0, 'dataset_name': 'pokemon', 'num_classes': 10, 'num_base': 5, 'num_novel': 5, 'seed': 1, 'batch_size': 256, 'clustering_method': 'multi_clip_voting', 'model_size': 'ViT-B/16', 'model_size_vqa': 'FlanT5-XXL', 'model_type_llm': 'gpt-3.5-turbo', 'image_size': 224, 'verbose': False, 'host': 'chaos', 'num_workers': 16, 'device': 'cuda', 'device_count': '1', 'device_id': '0', 'data_dir': './datasets/pokemon', 'expt_dir': './experiments/pokemon', 'expt_dir_describe': './experiments/pokemon/describe', 'path_vqa_questions': './experiments/pokemon/describe/pokemon_vqa_questions', 'path_vqa_answers': './experiments/pokemon/describe/pokemon_attributes_pairs', 'path_llm_prompts': './experiments/pokemon/describe/pokemon_llm_prompts', 'expt_dir_guess': './experiments/pokemon/guess', 'path_llm_replies_raw': './experiments/pokemon/guess/pokemon_llm_replies_raw', 'path_llm_replies_jsoned': './experiments/pokemon/guess/pokemon_llm_replies_jsoned', 'path_llm_gussed_names': './experiments/pokemon/guess/pokemon_llm_gussed_names', 'expt_dir_grouping': './experiments/pokemon/grouping'}
Charmander_0
{
    "Squirtle": [
        "Squirtle is a small, orange Pokemon with a stubby, snout-like creature.",
        "It has a spherical body with a spherical head and four limbs.",
        "The Pokemon has a squint eye shape and orange eyes.",
        "Its mouth shape is a slit and it has a stubby tail.",
        "Squirtle has two heads and two eyes."
    ],
    "Charmander": [
        "Squirtle is a small, orange Pokemon with a stubby, snout-like creature.",
        "It has a spherical body with a spherical head and four limbs.",
        "The Pokemon has a squint eye shape and orange eyes.",
        "Its mouth shape is a slit and it has a stubby tail.",
        "Squirtle has two heads and two eyes."
    ],
    "Cyndaquil": [
        "Squirtle is a small, orange Pokemon with a stubby, snout-like creature.",
        "It has a spherical body with a spherical head and four limbs.",
        "The Pokemon has a squint eye shape and orange eyes.",
        "Its mouth shape is a slit and it has a stubby tail.",
        "Squirtle has two heads and two eyes."
    ]
}


Charmander_1
{
    "Squirtle": [
        "This pokemon is a small orange creature with a scaly, stubby, snout-like head, two heads, and two squinty orange eyes.",
        "It has a small, lizard-like body with a tail, four limbs, and smooth skin texture.",
        "The special markings of this pokemon are a bright red nose and a yellow tummy.",
        "Its mouth is in the shape of a snout and its ears resemble those of a frog.",
        "It is associated with the fire element and has a smile as its facial expression."
    ],
    "Charmander": [
        "This pokemon is a small orange creature with a scaly, stubby, snout-like head, two heads, and two squinty orange eyes.",
        "It has a small, lizard-like body with a tail, four limbs, and smooth skin texture.",
        "The special markings of this pokemon are a bright red nose and a yellow tummy.",
        "Its mouth is in the shape of a snout and its ears resemble those of a frog.",
        "It is associated with the fire element and has a smile as its facial expression."
    ],
    "Charmeleon": [
        "This pokemon is a small orange creature with a scaly, stubby, snout-like head, two heads, and two squinty orange eyes.",
        "It has a small, lizard-like body with a tail, four limbs, and smooth skin texture.",
        "The special markings of this pokemon are a bright red nose and a yellow tummy.",
        "Its mouth is in the shape of a snout and its ears resemble those of a frog.",
        "It is associated with the fire element and has a smile as its facial expression."
    ]
}


Charmander_2
{
  "Squirtle": [
    "A squirtle is a small, round, and stubby pokemon with a brown color.",
    "It has a spherical head and body with a white belly and blue tummy.",
    "This pokemon has four limbs in a T shape and two heads with squinty blue eyes and a slit mouth.",
    "It also has a stubby tail and a spherical shape ear.",
    "The skin is smooth and it has a flame on its head."
  ],
  "Wartortle": [
    "A squirtle is a small, round, and stubby pokemon with a brown color.",
    "It has a spherical head and body with a white belly and blue tummy.",
    "This pokemon has four limbs in a T shape and two heads with squinty blue eyes and a slit mouth.",
    "It also has a stubby tail and a spherical shape ear.",
    "The skin is smooth and it has a flame on its head."
  ],
  "Blastoise": [
    "A squirtle is a small, round, and stubby pokemon with a brown color.",
    "It has a spherical head and body with a white belly and blue tummy.",
    "This pokemon has four limbs in a T shape and two heads with squinty blue eyes and a slit mouth.",
    "It also has a stubby tail and a spherical shape ear.",
    "The skin is smooth and it has a flame on its head."
  ]
}


Pidgey_3
{
    "Swellow": [
        "The Pokemon in the image is a bird with a brown and white body pattern.",
        "It is small in size and has a beak.",
        "It has a white crest on its head and a white wing patch.",
        "It has two heads and two eyes with a squint shape.",
        "The Pokemon has four limbs, two wings, and a tail shaped like a swan."
    ],
    "Pidgeot": [
        "The Pokemon in the image is a bird with a brown and white body pattern.",
        "It is small in size and has a beak.",
        "It has a white crest on its head and a white wing patch.",
        "It has two heads and two eyes with a squint shape.",
        "The Pokemon has four limbs, two wings, and a tail shaped like a swan."
    ],
    "Staraptor": [
        "The Pokemon in the image is a bird with a brown and white body pattern.",
        "It is small in size and has a beak.",
        "It has a white crest on its head and a white wing patch.",
        "It has two heads and two eyes with a squint shape.",
        "The Pokemon has four limbs, two wings, and a tail shaped like a swan."
    ]
}


Pidgey_4
{
  "Crestwing": [
    "This is a medium-sized bird with a brown head and a white belly.",
    "It has four limbs and two heads with two eyes each.",
    "The bird has a hawk-like eye shape and brown eyes.",
    "It has a slit-shaped mouth and a tail resembling that of a swan.",
    "The bird has a unique white crest on its head and a spherical ear shape."
  ],
  "Swaneye": [
    "This is a medium-sized bird with a brown head and a white belly.",
    "It has four limbs and two heads with two eyes each.",
    "The bird has a hawk-like eye shape and brown eyes.",
    "It has a slit-shaped mouth and a tail resembling that of a swan.",
    "The bird has a unique white crest on its head and a spherical ear shape."
  ],
  "Hawkbeak": [
    "This is a medium-sized bird with a brown head and a white belly.",
    "It has four limbs and two heads with two eyes each.",
    "The bird has a hawk-like eye shape and brown eyes.",
    "It has a slit-shaped mouth and a tail resembling that of a swan.",
    "The bird has a unique white crest on its head and a spherical ear shape."
  ]
}


Pidgey_5
{
    "Sylveon": [
        "A Sylveon is a medium-sized bird-like Pokemon with brown and white feathers.",
        "Its body is covered in brown feathers with a white head and a red beak.",
        "The Pokemon has two heads and two eyes, which are brown and shaped like a hawk.",
        "It has a spherical-shaped ear and a scaly skin texture.",
        "The Sylveon has a unique feature of a long neck and two wings."
    ],
    "Hawkwing": [
        "A Sylveon is a medium-sized bird-like Pokemon with brown and white feathers.",
        "Its body is covered in brown feathers with a white head and a red beak.",
        "The Pokemon has two heads and two eyes, which are brown and shaped like a hawk.",
        "It has a spherical-shaped ear and a scaly skin texture.",
        "The Sylveon has a unique feature of a long neck and two wings."
    ],
    "Swanbeak": [
        "A Sylveon is a medium-sized bird-like Pokemon with brown and white feathers.",
        "Its body is covered in brown feathers with a white head and a red beak.",
        "The Pokemon has two heads and two eyes, which are brown and shaped like a hawk.",
        "It has a spherical-shaped ear and a scaly skin texture.",
        "The Sylveon has a unique feature of a long neck and two wings."
    ]
}


Pidgeotto_6
{
    "Sylveon": [
        "This image features a Pokemon called Sylveon, which is a bird-like creature with a medium size.",
        "It has a tan body with a red head and wings, and it is characterized by its brown and pink coloration.",
        "Sylveon has a unique shape with a long neck, long tail, and a swan-like tail.",
        "It has four limbs and two heads with squinty pink eyes.",
        "The Pokemon has a slit mouth and a spherical ear shape."
    ],
    "Birdor": [
        "This image features a Pokemon called Birdor, which is a bird-like creature with a medium size.",
        "It has a tan body with a red head and wings, and it is characterized by its brown and pink coloration.",
        "Birdor has a unique shape with a long neck, long tail, and a swan-like tail.",
        "It has four limbs and two heads with squinty pink eyes.",
        "The Pokemon has a slit mouth and a spherical ear shape."
    ],
    "Swanwing": [
        "This image features a Pokemon called Swanwing, which is a bird-like creature with a medium size.",
        "It has a tan body with a red head and wings, and it is characterized by its brown and pink coloration.",
        "Swanwing has a unique shape with a long neck, long tail, and a swan-like tail.",
        "It has four limbs and two heads with squinty pink eyes.",
        "The Pokemon has a slit mouth and a spherical ear shape."
    ]
}


Pidgeotto_7
{
    "Sylveon": [
        "Sylveon is a medium-sized bird-like Pokémon with a pink and brown coloration. It has a brown body with a yellow head and wings.",
        "The Pokémon has four limbs, two heads, and two eyes with a hawk-like shape. Its eye color is brown, and its mouth has a slit shape.",
        "The tail resembles that of a swan. It has a special marking of a red and yellow crest on its head, along with a white ear shape similar to a swan.",
        "Sylveon's skin texture is smooth. It is in the evolutionary stage of being a Sandslash.",
        "It has two wings and legs shaped like a Squirtle. Its arms have a wing-like shape. The Pokémon has a smug facial expression and a unique feature of wings."
    ],
    "Sandslash": [
        "Sylveon is in the evolutionary stage of being a Sandslash. Its coloration is pink and brown, and its size is medium.",
        "It has a brown body with a yellow head and wings. The Pokémon has four limbs, two heads, and two eyes with a hawk-like shape.",
        "The eye color is brown, and the mouth has a slit shape. The tail resembles that of a swan.",
        "Sylveon has a special marking of a red and yellow crest on its head, along with a white ear shape similar to a swan. Its skin texture is smooth.",
        "It has two wings and legs shaped like a Squirtle. Its arms have a wing-like shape. The Pokémon has a smug facial expression and a unique feature of wings."
    ],
    "Swanslash": [
        "Sylveon resembles a bird, particularly a swan, with its medium size and pink and brown coloration.",
        "Its brown body has a yellow head and wings. The Pokémon has four limbs, two heads, and two eyes with a hawk-like shape.",
        "The eye color is brown, and the mouth has a slit shape. The tail is shaped like that of a swan.",
        "Sylveon has a special marking of a red and yellow crest on its head, along with a white ear shape similar to a swan. Its skin texture is smooth.",
        "It has two wings and legs shaped like a Squirtle. Its arms have a wing-like shape. The Pokémon has a smug facial expression and a unique feature of wings."
    ]
}


Pidgeotto_8
{
  "Squirtle": [
    "The image shows a pokemon resembling a squirtle with a brown body and a red head.",
    "It has a small size and a bird-like shape.",
    "The pokemon has hawk-shaped red eyes and a slit-shaped mouth.",
    "It has a swan-like tail and two heads, with two eyes on each head.",
    "The pokemon is associated with the bird element and has a special marking of a red hat with a white crest on its head."
  ],
  "Redhat": [
    "The image shows a pokemon resembling a squirtle with a brown body and a red head.",
    "It has a small size and a bird-like shape.",
    "The pokemon has hawk-shaped red eyes and a slit-shaped mouth.",
    "It has a swan-like tail and two heads, with two eyes on each head.",
    "The pokemon is associated with the bird element and has a special marking of a red hat with a white crest on its head."
  ],
  "Crestspike": [
    "The image shows a pokemon resembling a squirtle with a brown body and a red head.",
    "It has a small size and a bird-like shape.",
    "The pokemon has hawk-shaped red eyes and a slit-shaped mouth.",
    "It has a swan-like tail and two heads, with two eyes on each head.",
    "The pokemon is associated with the bird element and has a special marking of a red hat with a white crest on its head."
  ]
}


Charmeleon_9
{
    "Flamizard": [
        "The image shows a small red fire type pokemon with a red and white striped body, black belly, and a flame on its head.",
        "It has a sad expression with squint-shaped red eyes and a slit-shaped mouth.",
        "The pokemon has two heads, two eyes, and four limbs.",
        "It has a stubby tail with a curved tip and no presence of fins, horns, or crests.",
        "The unique features include slanted triangle-shaped ears, a red scaly skin, and a spike on its body."
    ],
    "Lizardflare": [
        "The image shows a small red fire type pokemon with a red and white striped body, black belly, and a flame on its head.",
        "It has a sad expression with squint-shaped red eyes and a slit-shaped mouth.",
        "The pokemon has two heads, two eyes, and four limbs.",
        "It has a stubby tail with a curved tip and no presence of fins, horns, or crests.",
        "The unique features include slanted triangle-shaped ears, a red scaly skin, and a spike on its body."
    ],
    "Ignisaur": [
        "The image shows a small red fire type pokemon with a red and white striped body, black belly, and a flame on its head.",
        "It has a sad expression with squint-shaped red eyes and a slit-shaped mouth.",
        "The pokemon has two heads, two eyes, and four limbs.",
        "It has a stubby tail with a curved tip and no presence of fins, horns, or crests.",
        "The unique features include slanted triangle-shaped ears, a red scaly skin, and a spike on its body."
    ]
}


Charmeleon_10
{
    "Squirtle": [
        "The pokemon in the image is a small, red-colored creature that resembles a lizard.",
        "It has a tiger-like pattern on its body and a red tummy with a white belly.",
        "With four limbs and two heads, it has squinted red eyes and a snout-like mouth.",
        "Its tail is slanted and resembles a tadpole.",
        "This pokemon is associated with the fire element and has the ability of a fire-type."
    ],
    "Charmander": [
        "The pokemon in the image is a small, red-colored creature that resembles a lizard.",
        "It has a tiger-like pattern on its body and a red tummy with a white belly.",
        "With four limbs and two heads, it has squinted red eyes and a snout-like mouth.",
        "Its tail is slanted and resembles a tadpole.",
        "This pokemon is associated with the fire element and has the ability of a fire-type."
    ],
    "Charizard": [
        "The pokemon in the image is a small, red-colored creature that resembles a lizard.",
        "It has a tiger-like pattern on its body and a red tummy with a white belly.",
        "With four limbs and two heads, it has squinted red eyes and a snout-like mouth.",
        "Its tail is slanted and resembles a tadpole.",
        "This pokemon is associated with the fire element and has the ability of a fire-type."
    ]
}


Charmeleon_11
{
    "Squirtle": [
        "A squirtle is a small, red and yellow pokemon with a red body, white belly, and white tail.",
        "It has four limbs, two heads, and two eyes that are squint and red in color.",
        "The pokemon has a slit mouth and a stubby tail with a curved tip.",
        "It is associated with the fire element and has special markings on its body.",
        "The squirtle has a triangular ear shape, smooth skin texture, and a smirk facial expression."
    ],
    "Charmeleon": [
        "A squirtle is a small, red and yellow pokemon with a red body, white belly, and white tail.",
        "It has four limbs, two heads, and two eyes that are squint and red in color.",
        "The pokemon has a slit mouth and a stubby tail with a curved tip.",
        "It is associated with the fire element and has special markings on its body.",
        "The squirtle has a triangular ear shape, smooth skin texture, and a smirk facial expression."
    ],
    "Charizard": [
        "A squirtle is a small, red and yellow pokemon with a red body, white belly, and white tail.",
        "It has four limbs, two heads, and two eyes that are squint and red in color.",
        "The pokemon has a slit mouth and a stubby tail with a curved tip.",
        "It is associated with the fire element and has special markings on its body.",
        "The squirtle has a triangular ear shape, smooth skin texture, and a smirk facial expression."
    ]
}


Squirtle_12
{
    "Squirtle": [
        "This is a small turtle-like pokemon called Squirtle.",
        "It has a blue body with a yellow head and a yellow tail.",
        "The pokemon has a sad expression with squinted blue eyes and a slit mouth.",
        "It has four limbs and two heads with two blue eyes.",
        "Squirtle is associated with the element of sand and has a smooth skin texture."
    ],
    "Wartortle": [
        "This is a small turtle-like pokemon called Wartortle.",
        "It has a blue body with a yellow head and a yellow tail.",
        "The pokemon has a sad expression with squinted blue eyes and a slit mouth.",
        "It has four limbs and two heads with two blue eyes.",
        "Wartortle is associated with the element of sand and has a smooth skin texture."
    ],
    "Blastoise": [
        "This is a small turtle-like pokemon called Blastoise.",
        "It has a blue body with a yellow head and a yellow tail.",
        "The pokemon has a sad expression with squinted blue eyes and a slit mouth.",
        "It has four limbs and two heads with two blue eyes.",
        "Blastoise is associated with the element of sand and has a smooth skin texture."
    ]
}


Squirtle_13
{
    "Squirtle": [
        "Squirtle is a small, blue turtle-like Pokémon with a smooth skin texture.",
        "It has a squint eye shape and blue eyes.",
        "The mouth is in the form of a snout.",
        "Squirtle has a unique body pattern that resembles a squirtle.",
        "It has four limbs, a tail, and two heads."
    ],
    "Wartortle": [
        "Wartortle evolves from Squirtle and is a larger, more powerful water-type Pokémon.",
        "It retains the same blue color and turtle-like shape.",
        "Wartortle has evolved to have a larger body size and more defined limbs.",
        "It still has a snout-shaped mouth and two squint eyes.",
        "The special markings on Wartortle include a darker blue tail and the presence of a spike on its back."
    ],
    "Blastoise": [
        "Blastoise is the final evolution stage of Squirtle, following Wartortle.",
        "It is a larger, more heavily built Pokémon with a dark blue color.",
        "Blastoise has a more pronounced turtle shape and a distinctive cannon-like structure on its back.",
        "It has two heads, a snout-shaped mouth, and blue eyes.",
        "The special markings of Blastoise include water cannons on its shell and a spike on its back."
    ]
}


Squirtle_14
{
    "Squirtle": [
        "This is a blue turtle with a small size and a smooth skin texture.",
        "It has a squint eye shape and blue eyes.",
        "The mouth shape is a slit and it has a turtle-shaped body with a tail.",
        "It has two heads and two limbs.",
        "The pokemon is a squirtle in its evolutionary stage."
    ],
    "Wartortle": [
        "This is a blue turtle with a small size and a smooth skin texture.",
        "It has a squint eye shape and blue eyes.",
        "The mouth shape is a slit and it has a turtle-shaped body with a tail.",
        "It has two heads and two limbs.",
        "The pokemon is a squirtle in its evolutionary stage."
    ],
    "Blastoise": [
        "This is a blue turtle with a small size and a smooth skin texture.",
        "It has a squint eye shape and blue eyes.",
        "The mouth shape is a slit and it has a turtle-shaped body with a tail.",
        "It has two heads and two limbs.",
        "The pokemon is a squirtle in its evolutionary stage."
    ]
}


Bulbasaur_15
{
    "Squirtle": [
        "A squirtle is a small and green pokemon with a red head and tail.",
        "It has four limbs and a squinty green eyes.",
        "The mouth is in a slit shape and the unique feature of this pokemon is its green body with red eyes.",
        "It has two heads and two eyes.",
        "The skin texture of the squirtle is smooth and it is at the evolutionary stage of being a squirtle."
    ],
    "Greened": [
        "A squirtle is a small and green pokemon with a red head and tail.",
        "It has four limbs and a squinty green eyes.",
        "The mouth is in a slit shape and the unique feature of this pokemon is its green body with red eyes.",
        "It has two heads and two eyes.",
        "The skin texture of the squirtle is smooth and it is at the evolutionary stage of being a squirtle."
    ],
    "Frogleaf": [
        "A squirtle is a small and green pokemon with a red head and tail.",
        "It has four limbs and a squinty green eyes.",
        "The mouth is in a slit shape and the unique feature of this pokemon is its green body with red eyes.",
        "It has two heads and two eyes.",
        "The skin texture of the squirtle is smooth and it is at the evolutionary stage of being a squirtle."
    ]
}


Bulbasaur_16
{
    "Squirtle": [
        "Squirtle is a small, green, leafy creature with a sad expression.",
        "It has a leaf on its back and is associated with the grass element.",
        "It has four limbs, two heads, and two eyes which are squinted and green in color.",
        "Squirtle has a smooth skin texture and its body shape resembles a squirtle.",
        "It does not have wings, fins, or horns, but it does have a spike on its back."
    ],
    "Greenleaf": [
        "Greenleaf is a small, green, leafy creature with a sad expression.",
        "It has a leaf on its back and is associated with the grass element.",
        "It has four limbs, two heads, and two eyes which are squinted and green in color.",
        "Greenleaf has a smooth skin texture and its body shape resembles a squirtle.",
        "It does not have wings, fins, or horns, but it does have a spike on its back."
    ],
    "Leafurtle": [
        "Leafurtle is a small, green, leafy creature with a sad expression.",
        "It has a leaf on its back and is associated with the grass element.",
        "It has four limbs, two heads, and two eyes which are squinted and green in color.",
        "Leafurtle has a smooth skin texture and its body shape resembles a squirtle.",
        "It does not have wings, fins, or horns, but it does have a spike on its back."
    ]
}


Bulbasaur_17
{
    "Squirtle": [
        "This image shows a small, green Pokemon called Squirtle.",
        "It has a spherical body with a rounded head and two squinty green eyes.",
        "The Pokemon has a sad facial expression and its mouth is in the shape of a slit.",
        "It has four limbs, each ending in a Squirtle-like shape.",
        "Squirtle has a unique feature, which is a backpack-like pouch on its back."
    ],
    "Squirtle-like creature": [
        "This image shows a small, green Pokemon called Squirtle-like creature.",
        "It has a spherical body with a rounded head and two squinty green eyes.",
        "The Pokemon has a sad facial expression and its mouth is in the shape of a slit.",
        "It has four limbs, each ending in a Squirtle-like shape.",
        "Squirtle-like creature has a unique feature, which is a backpack-like pouch on its back."
    ],
    "Green Pokemon": [
        "This image shows a small, green Pokemon called Green Pokemon.",
        "It has a spherical body with a rounded head and two squinty green eyes.",
        "The Pokemon has a sad facial expression and its mouth is in the shape of a slit.",
        "It has four limbs, each ending in a Squirtle-like shape.",
        "Green Pokemon has a unique feature, which is a backpack-like pouch on its back."
    ]
}


Raichu_18
{
    "Pikachu": [
        "This image shows a small, yellow pokemon called Pikachu.",
        "It has a Squirtle-like tail and a snout, and its body has special markings with a yellow color, a black tail, and a white t.",
        "Pikachu has a squint eye shape with yellow eyes and a smiley facial expression.",
        "It has two heads, two eyes, and four limbs, with a small and smooth skin texture.",
        "Pikachu is associated with the water element and has a unique feature of having a tail."
    ],
    "Pichu": [
        "This image shows a small, yellow pokemon called Pichu.",
        "It has a Squirtle-like tail and a snout, and its body has special markings with a yellow color, a black tail, and a white t.",
        "Pichu has a squint eye shape with yellow eyes and a smiley facial expression.",
        "It has two heads, two eyes, and four limbs, with a small and smooth skin texture.",
        "Pichu is associated with the water element and has a unique feature of having a tail."
    ],
    "Raichu": [
        "This image shows a small, yellow pokemon called Raichu.",
        "It has a Squirtle-like tail and a snout, and its body has special markings with a yellow color, a black tail, and a white t.",
        "Raichu has a squint eye shape with yellow eyes and a smiley facial expression.",
        "It has two heads, two eyes, and four limbs, with a small and smooth skin texture.",
        "Raichu is associated with the water element and has a unique feature of having a tail."
    ]
}


Raichu_19
{
    "PikaHorn": [
        "This image shows a small, brown pikachu with a snout-like shape and a pigtail tail.",
        "It has a squirtle-like pattern on its back.",
        "The pikachu has four limbs and two heads, with two squinty brown eyes and a slit mouth.",
        "It has a unique feature of a horn on its snout and a sad expression.",
        "The skin texture is smooth, and it is in the evolutionary stage of a pikachu."
    ],
    "Squirtchu": [
        "This image shows a small, brown pikachu with a snout-like shape and a pigtail tail.",
        "It has a squirtle-like pattern on its back.",
        "The pikachu has four limbs and two heads, with two squinty brown eyes and a slit mouth.",
        "It has a unique feature of a horn on its snout and a sad expression.",
        "The skin texture is smooth, and it is in the evolutionary stage of a pikachu."
    ],
    "Sadtail Pikachu": [
        "This image shows a small, brown pikachu with a snout-like shape and a pigtail tail.",
        "It has a squirtle-like pattern on its back.",
        "The pikachu has four limbs and two heads, with two squinty brown eyes and a slit mouth.",
        "It has a unique feature of a horn on its snout and a sad expression.",
        "The skin texture is smooth, and it is in the evolutionary stage of a pikachu."
    ]
}


Raichu_20
{
    "Pikachu": [
        "This is a small, orange and white Pokemon called Pikachu.",
        "It has a yellow body, a yellow head, and a yellow tail.",
        "It has two heads and two eyes, with a squint eye shape and yellow eye color.",
        "Pikachu has a small size and a smooth skin texture.",
        "It has a unique feature of a horn."
    ],
    "Pika": [
        "This is a small, orange and white Pokemon called Pikachu.",
        "It has a yellow body, a yellow head, and a yellow tail.",
        "It has two heads and two eyes, with a squint eye shape and yellow eye color.",
        "Pikachu has a small size and a smooth skin texture.",
        "It has a unique feature of a horn."
    ],
    "Sparkachu": [
        "This is a small, orange and white Pokemon called Pikachu.",
        "It has a yellow body, a yellow head, and a yellow tail.",
        "It has two heads and two eyes, with a squint eye shape and yellow eye color.",
        "Pikachu has a small size and a smooth skin texture.",
        "It has a unique feature of a horn."
    ]
}


Wartortle_21
{
  "Squirtle": [
    "A squirtle is a small-sized turtle-like Pokemon with a blue body and a white belly.",
    "It has a blue head with a squint-shaped blue eyes and a slit-like mouth.",
    "The Pokemon has two heads and four limbs.",
    "It is associated with the water element and has a tail shaped like a squirtle.",
    "It has smooth and shiny skin and a unique feature of having a shell."
  ],
  "Wartortle": [
    "A squirtle is a small-sized turtle-like Pokemon with a blue body and a white belly.",
    "It has a blue head with a squint-shaped blue eyes and a slit-like mouth.",
    "The Pokemon has two heads and four limbs.",
    "It is associated with the water element and has a tail shaped like a squirtle.",
    "It has smooth and shiny skin and a unique feature of having a shell."
  ],
  "Blastoise": [
    "A squirtle is a small-sized turtle-like Pokemon with a blue body and a white belly.",
    "It has a blue head with a squint-shaped blue eyes and a slit-like mouth.",
    "The Pokemon has two heads and four limbs.",
    "It is associated with the water element and has a tail shaped like a squirtle.",
    "It has smooth and shiny skin and a unique feature of having a shell."
  ]
}


Wartortle_22
{
   "Squirturtle": [
      "The pokemon in the image is a small, blue turtle-like creature with a squirtle pattern on its body.",
      "It has four limbs and two heads with squinted blue eyes and a slit-like mouth.",
      "The pokemon has a fairy element associated with it and special markings in the form of a squirtle on its back and a smooth skin texture.",
      "It is at an early evolutionary stage and does not have any wings, fins, or horns.",
      "Its unique feature is that it is a squirtle. The pokemon has a friendly facial expression with a smile."
   ],
   "Bluetail": [
      "The pokemon in the image is a small, blue turtle-like creature with a squirtle pattern on its body.",
      "It has four limbs and two heads with squinted blue eyes and a slit-like mouth.",
      "The pokemon has a fairy element associated with it and special markings in the form of a squirtle on its back and a smooth skin texture.",
      "It is at an early evolutionary stage and does not have any wings, fins, or horns.",
      "Its unique feature is that it is a squirtle. The pokemon has a friendly facial expression with a smile."
   ],
   "Fairesquirt": [
      "The pokemon in the image is a small, blue turtle-like creature with a squirtle pattern on its body.",
      "It has four limbs and two heads with squinted blue eyes and a slit-like mouth.",
      "The pokemon has a fairy element associated with it and special markings in the form of a squirtle on its back and a smooth skin texture.",
      "It is at an early evolutionary stage and does not have any wings, fins, or horns.",
      "Its unique feature is that it is a squirtle. The pokemon has a friendly facial expression with a smile."
   ]
}


Wartortle_23
{
    "Squirtle": [
        "This is a small, blue turtle-like pokemon with a white belly and head.",
        "It has four limbs that are shaped like a turtle's arms and a tail shaped like a squirtle.",
        "It has two heads and two blue squint-shaped eyes.",
        "The pokemon has a sad facial expression and a slit mouth.",
        "Its ears are in the shape of a 't' and it doesn't have any fins, horns, or crests/spikes."
    ],
    "Wartortle": [
        "This is a small, blue turtle-like pokemon with a white belly and head.",
        "It has four limbs that are shaped like a turtle's arms and a tail shaped like a squirtle.",
        "It has two heads and two blue squint-shaped eyes.",
        "The pokemon has a sad facial expression and a slit mouth.",
        "Its ears are in the shape of a 't' and it doesn't have any fins, horns, or crests/spikes."
    ],
    "Blastoise": [
        "This is a small, blue turtle-like pokemon with a white belly and head.",
        "It has four limbs that are shaped like a turtle's arms and a tail shaped like a squirtle.",
        "It has two heads and two blue squint-shaped eyes.",
        "The pokemon has a sad facial expression and a slit mouth.",
        "Its ears are in the shape of a 't' and it doesn't have any fins, horns, or crests/spikes."
    ]
}


Ivysaur_24
{
"Flower Squirtle": [
"A Squirtle with a flower on its head is a small, green Pokemon with a scaly texture.",
"It has a sad facial expression and squinted blue eyes.",
"The Pokemon has four limbs, two heads, and two eyes.",
"It has a slit mouth and a unique feature of a flower on its head.",
"The body pattern of this Squirtle includes a splotch of green on its back."
],
"Greenleaf Squirtle": [
"A Squirtle with a flower on its head is a small, green Pokemon with a scaly texture.",
"It has a sad facial expression and squinted blue eyes.",
"The Pokemon has four limbs, two heads, and two eyes.",
"It has a slit mouth and a unique feature of a flower on its head.",
"The body pattern of this Squirtle includes a splotch of green on its back."
],
"Sadpetal Squirtle": [
"A Squirtle with a flower on its head is a small, green Pokemon with a scaly texture.",
"It has a sad facial expression and squinted blue eyes.",
"The Pokemon has four limbs, two heads, and two eyes.",
"It has a slit mouth and a unique feature of a flower on its head.",
"The body pattern of this Squirtle includes a splotch of green on its back."
]
}


Ivysaur_25
{
    "Squirtle": [
        "This image shows a small blue Pokemon known as Squirtle.",
        "It has a leaf on its back and a body with a green head and a pink tail.",
        "Squirtle has four limbs, two heads, and two eyes.",
        "Its eyes are squinted and blue in color.",
        "The mouth is in the shape of a slit."
    ],
    "Wartortle": [
        "This image shows a small blue Pokemon known as Wartortle.",
        "It has a leaf on its back and a body with a green head and a pink tail.",
        "Wartortle has four limbs, two heads, and two eyes.",
        "Its eyes are squinted and blue in color.",
        "The mouth is in the shape of a slit."
    ],
    "Blastoise": [
        "This image shows a small blue Pokemon known as Blastoise.",
        "It has a leaf on its back and a body with a green head and a pink tail.",
        "Blastoise has four limbs, two heads, and two eyes.",
        "Its eyes are squinted and blue in color.",
        "The mouth is in the shape of a slit."
    ]
}


Ivysaur_26
{
    "Squirtle": [
        "This image is of a small, blue pokemon called Squirtle.",
        "It has a blue and green body pattern with a pink flower on its head.",
        "Squirtle has four limbs, two heads, and two squinty blue eyes.",
        "Its mouth has a slit shape and it has a tail specific to Squirtle.",
        "The pokemon is associated with a flower and has special markings in the form of a flower on its head."
    ],
    "Wartortle": [
        "This image is of a small, blue pokemon called Wartortle.",
        "It has a blue and green body pattern with a pink flower on its head.",
        "Wartortle has four limbs, two heads, and two squinty blue eyes.",
        "Its mouth has a slit shape and it has a tail specific to Wartortle.",
        "The pokemon is associated with a flower and has special markings in the form of a flower on its head."
    ],
    "Blastoise": [
        "This image is of a small, blue pokemon called Blastoise.",
        "It has a blue and green body pattern with a pink flower on its head.",
        "Blastoise has four limbs, two heads, and two squinty blue eyes.",
        "Its mouth has a slit shape and it has a tail specific to Blastoise.",
        "The pokemon is associated with a flower and has special markings in the form of a flower on its head."
    ]
}


Pikachu_27
{
  "Pikachu": [
    "Pikachu is a small, yellow Pokemon with a black nose and black eyes.",
    "It has a squinty eye shape and a slit mouth shape.",
    "The Pokemon has a stubby tail and two heads.",
    "It is associated with the element of electricity.",
    "Pikachu has a unique feature of a yellow head and a smooth skin texture."
  ],
  "Pichu": [
    "Pikachu is a small, yellow Pokemon with a black nose and black eyes.",
    "It has a squinty eye shape and a slit mouth shape.",
    "The Pokemon has a stubby tail and two heads.",
    "It is associated with the element of electricity.",
    "Pikachu has a unique feature of a yellow head and a smooth skin texture."
  ],
  "Raichu": [
    "Pikachu is a small, yellow Pokemon with a black nose and black eyes.",
    "It has a squinty eye shape and a slit mouth shape.",
    "The Pokemon has a stubby tail and two heads.",
    "It is associated with the element of electricity.",
    "Pikachu has a unique feature of a yellow head and a smooth skin texture."
  ]
}


Pikachu_28
{
"pikachu": [
"Summary: Pikachu is a small, yellow Pokémon with a body shape of a small yellow ball.",
"It has a yellow squinty eyes, a slit mouth, and a stubby tail.",
"It has two heads with two eyes each.",
"Pikachu has a smooth and shiny skin texture.",
"It is a unique Pokémon belonging to the evolutionary stage of Pikachu."
],
"Pika": [
"Summary: Pikachu is a small, yellow Pokémon with a body shape of a small yellow ball.",
"It has a yellow squinty eyes, a slit mouth, and a stubby tail.",
"It has two heads with two eyes each.",
"Pikachu has a smooth and shiny skin texture.",
"It is a unique Pokémon belonging to the evolutionary stage of Pikachu."
],
"Electricball": [
"Summary: Pikachu is a small, yellow Pokémon with a body shape of a small yellow ball.",
"It has a yellow squinty eyes, a slit mouth, and a stubby tail.",
"It has two heads with two eyes each.",
"Pikachu has a smooth and shiny skin texture.",
"It is a unique Pokémon belonging to the evolutionary stage of Pikachu."
]
}


Pikachu_29
{
    "Pikachu": [
        "The pokemon in the image is a yellow Pikachu, small in size with a yellow body, black head, and a black tail.",
        "It has four limbs and a squint eye shape with yellow eyes.",
        "The mouth has a slit shape.",
        "The Pikachu has a unique feature of a tail and it is at the evolutionary stage of a Pikachu.",
        "There are no fins, horns, or crests present. The pokemon has a sad facial expression and associated with the element of lightning."
    ],
    "Pichu": [
        "The pokemon in the image is a yellow Pichu, small in size with a yellow body, black head, and a black tail.",
        "It has four limbs and a squint eye shape with yellow eyes.",
        "The mouth has a slit shape.",
        "The Pichu has a unique feature of a tail and it is at an early evolutionary stage.",
        "There are no fins, horns, or crests present. The pokemon has a sad facial expression and associated with the element of lightning."
    ],
    "Raichu": [
        "The pokemon in the image is a yellow Raichu, small in size with a yellow body, black head, and a black tail.",
        "It has four limbs and a squint eye shape with yellow eyes.",
        "The mouth has a slit shape.",
        "The Raichu has a unique feature of a tail and it is at an advanced evolutionary stage.",
        "There are no fins, horns, or crests present. The pokemon has a sad facial expression and associated with the element of lightning."
    ]
}


==============================
		 Finished Post-processing
==============================
		 ---> total discovered names = 47
['Sadpetal Squirtle', 'Swaneye', 'Swellow', 'Birdor', 'Pikachu', 'Frogleaf', 'Charmander', 'Bluetail', 'Crestspike', 'Pichu', 'Hawkwing', 'Squirtle', 'Hawkbeak', 'Raichu', 'Sadtail Pikachu', 'Swanbeak', 'Leafurtle', 'Redhat', 'Charmeleon', 'PikaHorn', 'Greenleaf Squirtle', 'Sandslash', 'Flower Squirtle', 'pikachu', 'Swanwing', 'Flamizard', 'Blastoise', 'Greened', 'Lizardflare', 'Green Pokemon', 'Swanslash', 'Fairesquirt', 'Charizard', 'Squirtle-like creature', 'Squirtchu', 'Pika', 'Sparkachu', 'Sylveon', 'Staraptor', 'Cyndaquil', 'Squirturtle', 'Ignisaur', 'Electricball', 'Crestwing', 'Wartortle', 'Pidgeot', 'Greenleaf']

		 ---> total discovered names = 47
		 ---> number of failure entries = 0
END==============================

Namespace(config_file_env='./configs/env_machine.yml', config_file_expt='./configs/expts/pokemon_all.yml', alpha=0.7, N_tta=10, num_per_category='3', num_runs=10)
Number of GPUs: 1
Device ID: 0 Device Name: NVIDIA RTX A6000
['Sadpetal Squirtle', 'Swaneye', 'Swellow', 'Birdor', 'Pikachu', 'Frogleaf', 'Charmander', 'Bluetail', 'Crestspike', 'Pichu', 'Hawkwing', 'Squirtle', 'Hawkbeak', 'Raichu', 'Sadtail Pikachu', 'Swanbeak', 'Leafurtle', 'Redhat', 'Charmeleon', 'PikaHorn', 'Greenleaf Squirtle', 'Sandslash', 'Flower Squirtle', 'pikachu', 'Swanwing', 'Flamizard', 'Blastoise', 'Greened', 'Lizardflare', 'Green Pokemon', 'Swanslash', 'Fairesquirt', 'Charizard', 'Squirtle-like creature', 'Squirtchu', 'Pika', 'Sparkachu', 'Sylveon', 'Staraptor', 'Cyndaquil', 'Squirturtle', 'Ignisaur', 'Electricball', 'Crestwing', 'Wartortle', 'Pidgeot', 'Greenleaf']
0it [00:00, ?it/s]1it [00:00,  6.21it/s]4it [00:00, 10.19it/s]7it [00:00, 14.87it/s]9it [00:00, 15.71it/s]11it [00:00, 16.15it/s]13it [00:00, 16.69it/s]15it [00:01, 15.62it/s]17it [00:01, 16.02it/s]19it [00:01, 16.76it/s]22it [00:01, 18.84it/s]24it [00:01, 17.42it/s]26it [00:01, 17.09it/s]28it [00:01, 17.02it/s]30it [00:01, 17.57it/s]30it [00:01, 16.15it/s]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:01<00:00,  1.47s/it]100%|██████████| 1/1 [00:01<00:00,  1.56s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:01<00:00,  1.32s/it]100%|██████████| 1/1 [00:01<00:00,  1.39s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.789372444152832


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 71.53846153846153
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 81.95026331016642
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 65.98797952066484


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 78.93724060058594
=========================          END          =========================
0it [00:00, ?it/s]3it [00:00, 18.63it/s]5it [00:00, 13.58it/s]8it [00:00, 17.17it/s]10it [00:00, 16.49it/s]13it [00:00, 17.87it/s]15it [00:00, 16.18it/s]17it [00:01, 15.80it/s]19it [00:01, 14.73it/s]21it [00:01, 15.80it/s]23it [00:01, 16.59it/s]25it [00:01, 16.81it/s]27it [00:01, 16.07it/s]30it [00:01, 17.21it/s]30it [00:01, 16.45it/s]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.06s/it]100%|██████████| 1/1 [00:02<00:00,  2.18s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.04s/it]100%|██████████| 1/1 [00:02<00:00,  2.16s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.7823934555053711


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 72.3076923076923
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 82.44214092823508
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 66.1134328358209


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 78.23934936523438
=========================          END          =========================
0it [00:00, ?it/s]2it [00:00, 14.00it/s]4it [00:00, 11.48it/s]6it [00:00, 13.19it/s]8it [00:00, 13.63it/s]10it [00:00, 14.20it/s]12it [00:00, 15.10it/s]14it [00:00, 14.47it/s]16it [00:01, 15.50it/s]19it [00:01, 17.14it/s]21it [00:01, 17.18it/s]23it [00:01, 15.96it/s]25it [00:01, 16.64it/s]27it [00:01, 16.11it/s]29it [00:01, 16.68it/s]30it [00:01, 15.62it/s]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.13s/it]100%|██████████| 1/1 [00:02<00:00,  2.25s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.15s/it]100%|██████████| 1/1 [00:02<00:00,  2.27s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.7877997756004333


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 70.0
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 81.37838283145075
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 65.03859442769976


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 78.77997589111328
=========================          END          =========================
0it [00:00, ?it/s]2it [00:00, 13.98it/s]4it [00:00, 11.65it/s]6it [00:00, 13.37it/s]8it [00:00, 14.08it/s]10it [00:00, 15.44it/s]13it [00:00, 17.40it/s]15it [00:00, 16.09it/s]17it [00:01, 15.49it/s]20it [00:01, 17.41it/s]22it [00:01, 17.03it/s]24it [00:01, 16.66it/s]26it [00:01, 16.44it/s]28it [00:01, 16.56it/s]30it [00:01, 17.29it/s]30it [00:01, 16.08it/s]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.01s/it]100%|██████████| 1/1 [00:02<00:00,  2.12s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:01<00:00,  1.91s/it]100%|██████████| 1/1 [00:02<00:00,  2.02s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.7855166792869568


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 71.53846153846153
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 82.47900596167906
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 66.20196864746629


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 78.55166625976562
=========================          END          =========================
0it [00:00, ?it/s]2it [00:00, 15.09it/s]4it [00:00, 12.16it/s]6it [00:00, 13.73it/s]8it [00:00, 14.74it/s]10it [00:00, 13.94it/s]13it [00:00, 15.74it/s]15it [00:00, 16.21it/s]17it [00:01, 16.68it/s]19it [00:01, 17.39it/s]21it [00:01, 17.29it/s]24it [00:01, 19.07it/s]26it [00:01, 17.80it/s]28it [00:01, 18.09it/s]30it [00:01, 16.71it/s]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.07s/it]100%|██████████| 1/1 [00:02<00:00,  2.19s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.03s/it]100%|██████████| 1/1 [00:02<00:00,  2.16s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.786565363407135


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 72.3076923076923
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 82.28536165665598
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 66.24465102552752


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 78.65653991699219
=========================          END          =========================
0it [00:00, ?it/s]2it [00:00, 16.82it/s]4it [00:00, 12.54it/s]6it [00:00, 14.28it/s]8it [00:00, 14.93it/s]10it [00:00, 16.12it/s]13it [00:00, 17.40it/s]15it [00:00, 16.31it/s]17it [00:01, 15.51it/s]19it [00:01, 15.56it/s]21it [00:01, 15.12it/s]23it [00:01, 15.07it/s]25it [00:01, 15.84it/s]27it [00:01, 16.38it/s]29it [00:01, 17.12it/s]30it [00:01, 15.93it/s]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.09s/it]100%|██████████| 1/1 [00:02<00:00,  2.22s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.09s/it]100%|██████████| 1/1 [00:02<00:00,  2.20s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.7819525599479675


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 71.53846153846153
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 81.33159445485518
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 65.07581921739774


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 78.19525909423828
=========================          END          =========================
0it [00:00, ?it/s]2it [00:00, 18.92it/s]4it [00:00, 10.22it/s]6it [00:00, 12.55it/s]8it [00:00, 13.46it/s]10it [00:00, 15.25it/s]13it [00:00, 16.94it/s]15it [00:00, 17.13it/s]17it [00:01, 17.48it/s]20it [00:01, 18.76it/s]22it [00:01, 18.08it/s]24it [00:01, 18.28it/s]26it [00:01, 18.36it/s]28it [00:01, 17.93it/s]30it [00:01, 17.63it/s]30it [00:01, 16.67it/s]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:01<00:00,  1.92s/it]100%|██████████| 1/1 [00:02<00:00,  2.02s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:01<00:00,  1.99s/it]100%|██████████| 1/1 [00:02<00:00,  2.09s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.7775742411613464


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 70.0
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 80.91855288838559
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 64.16666666666667


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 77.7574234008789
=========================          END          =========================
0it [00:00, ?it/s]2it [00:00, 13.81it/s]4it [00:00, 10.71it/s]6it [00:00, 12.55it/s]9it [00:00, 15.50it/s]11it [00:00, 15.72it/s]13it [00:00, 16.14it/s]15it [00:01, 14.37it/s]17it [00:01, 14.18it/s]20it [00:01, 15.58it/s]22it [00:01, 15.74it/s]24it [00:01, 14.88it/s]27it [00:01, 16.74it/s]29it [00:01, 17.20it/s]30it [00:01, 15.43it/s]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.14s/it]100%|██████████| 1/1 [00:02<00:00,  2.26s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.26s/it]100%|██████████| 1/1 [00:02<00:00,  2.40s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.7731141448020935


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 69.23076923076923
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 80.29294895083979
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 63.167142543378


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 77.31141662597656
=========================          END          =========================
0it [00:00, ?it/s]1it [00:00,  2.88it/s]4it [00:00,  7.65it/s]6it [00:00, 10.46it/s]8it [00:00, 12.46it/s]10it [00:00, 12.18it/s]12it [00:01, 13.06it/s]14it [00:01, 11.62it/s]16it [00:01, 12.07it/s]18it [00:01, 13.14it/s]20it [00:01, 13.79it/s]22it [00:01, 14.55it/s]24it [00:01, 14.33it/s]26it [00:02, 14.61it/s]28it [00:02, 14.28it/s]30it [00:02, 12.89it/s]30it [00:02, 12.25it/s]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:01<00:00,  1.85s/it]100%|██████████| 1/1 [00:02<00:00,  2.01s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:01<00:00,  1.69s/it]100%|██████████| 1/1 [00:01<00:00,  1.80s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.7787977457046509


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 69.23076923076923
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 79.52636310365648
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 62.59755734286565


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 77.87977600097656
=========================          END          =========================
0it [00:00, ?it/s]3it [00:00, 22.59it/s]6it [00:00, 15.82it/s]8it [00:00, 16.56it/s]10it [00:00, 17.50it/s]13it [00:00, 19.55it/s]16it [00:01, 12.39it/s]19it [00:01, 14.68it/s]21it [00:01, 15.60it/s]23it [00:01, 16.41it/s]26it [00:01, 16.92it/s]29it [00:01, 19.01it/s]30it [00:01, 16.99it/s]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.06s/it]100%|██████████| 1/1 [00:02<00:00,  2.19s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.33s/it]100%|██████████| 1/1 [00:02<00:00,  2.49s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.7864943742752075


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 71.53846153846153
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 82.1136700515549
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 66.36097275124524


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 78.6494369506836
=========================          END          =========================


========================= ViLang Final Results of 10 runs, w/ 3 imgs per class=========================


[Clustering]
Clustering ACC: 70.92307692307693
Semantic ACC:   78.29580688476562
=========================          END          =========================
Namespace(mode='describe', config_file_env='./configs/env_machine.yml', config_file_expt='./configs/expts/pokemon_all.yml', num_per_category='3')
{'setup': 'ours', 'experiment': 5.0, 'dataset_name': 'pokemon', 'num_classes': 10, 'num_base': 5, 'num_novel': 5, 'seed': 1, 'batch_size': 256, 'clustering_method': 'multi_clip_voting', 'model_size': 'ViT-B/16', 'model_size_vqa': 'FlanT5-XXL', 'model_type_llm': 'gpt-3.5-turbo', 'image_size': 224, 'verbose': False, 'host': 'chaos', 'num_workers': 16, 'device': 'cuda', 'device_count': '1', 'device_id': '0', 'data_dir': './datasets/pokemon', 'expt_dir': './experiments/pokemon', 'expt_dir_describe': './experiments/pokemon/describe', 'path_vqa_questions': './experiments/pokemon/describe/pokemon_vqa_questions', 'path_vqa_answers': './experiments/pokemon/describe/pokemon_attributes_pairs', 'path_llm_prompts': './experiments/pokemon/describe/pokemon_llm_prompts', 'expt_dir_guess': './experiments/pokemon/guess', 'path_llm_replies_raw': './experiments/pokemon/guess/pokemon_llm_replies_raw', 'path_llm_replies_jsoned': './experiments/pokemon/guess/pokemon_llm_replies_jsoned', 'path_llm_gussed_names': './experiments/pokemon/guess/pokemon_llm_gussed_names', 'expt_dir_grouping': './experiments/pokemon/grouping'}
Loading checkpoint shards:   0%|          | 0/5 [00:00<?, ?it/s]Loading checkpoint shards:  20%|██        | 1/5 [00:02<00:08,  2.15s/it]Loading checkpoint shards:  40%|████      | 2/5 [00:04<00:06,  2.18s/it]Loading checkpoint shards:  60%|██████    | 3/5 [00:06<00:04,  2.10s/it]Loading checkpoint shards:  80%|████████  | 4/5 [00:08<00:02,  2.14s/it]Loading checkpoint shards: 100%|██████████| 5/5 [00:10<00:00,  2.14s/it]Loading checkpoint shards: 100%|██████████| 5/5 [00:10<00:00,  2.14s/it]
0it [00:00, ?it/s]1it [00:05,  5.88s/it]2it [00:11,  5.65s/it]0: label=2
==============================
Charmander_0 with label 2
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a small orange pokemon'''
        Attributes List:
        - '''color''': '''orange'''
        - '''size''': '''small'''
        - '''shape''': '''a small, orange, squirtle-like creature'''
        - '''body pattern''': '''a small, orange, scaly, lizard-like creature with'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''orange'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a stubby tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''fire'''
        - '''special markings''': '''the pokemon has a snout with a horn on it'''
        - '''ear shape''': '''a frog'''
        - '''skin texture''': '''smooth and shiny'''
        - '''evolutionary stage''': '''a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a t-shaped arm'''
        - '''facial expression''': '''a sad expression'''
        - '''unique feature''': '''it has a fire-type'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

1: label=2
==============================
Charmander_1 with label 2
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a small orange pokemon'''
        Attributes List:
        - '''color''': '''orange'''
        - '''size''': '''it is small'''
        - '''shape''': '''a small, orange, and yellow lizard'''
        - '''body pattern''': '''a scaly, squarish, snout-like'''
        - '''number of limbs''': '''four limbs'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''orange'''
        - '''mouth shape''': '''a snout'''
        - '''tail shape''': '''a slanted snout'''
        - '''number of heads''': '''two heads'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''fire'''
        - '''special markings''': '''the pokemon has a red nose and a yellow tummy'''
        - '''ear shape''': '''a frog'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a t-shaped arm'''
        - '''facial expression''': '''a smile'''
        - '''unique feature''': '''it has a tail'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

2: label=2
==============================
Charmander_2 with label 2
==============================

3it [00:17,  5.70s/it]4it [00:22,  5.75s/it]5it [00:28,  5.57s/it]
        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''brown'''
        - '''size''': '''it is small'''
        - '''shape''': '''it is a small, round, and stubby'''
        - '''body pattern''': '''it has a spherical head, a spherical body'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''the eyes are a squint'''
        - '''eye color''': '''blue'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a stubby tail with a rounded tip'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''fire'''
        - '''special markings''': '''the pokemon has a white belly and a blue tail'''
        - '''ear shape''': '''a spherical shape'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a t'''
        - '''arm shape''': '''the arms are a t shape'''
        - '''facial expression''': '''a smile'''
        - '''unique feature''': '''it has a flame on its head'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

3: label=9
==============================
Pidgeotto_3 with label 9
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a sylveon'''
        Attributes List:
        - '''color''': '''brown and pink'''
        - '''size''': '''it is a medium size'''
        - '''shape''': '''a bird with a long neck and a long tail'''
        - '''body pattern''': '''a tan body with a red head and wings'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''pink'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a swan-like tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a bird'''
        - '''special markings''': '''the pokemon has a red crest on its head'''
        - '''ear shape''': '''a spherical shape'''
        - '''skin texture''': '''a scaly texture'''
        - '''evolutionary stage''': '''a sylveon'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a slanted wing'''
        - '''arm shape''': '''a wing shape'''
        - '''facial expression''': '''a smirk'''
        - '''unique feature''': '''a bird with a long beak'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

4: label=9
==============================
Pidgeotto_4 with label 9
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a sylveon'''
        Attributes List:
        - '''color''': '''pink and brown'''
        - '''size''': '''it is a medium size'''
        - '''shape''': '''a bird'''
        - '''body pattern''': '''a bird with a long neck and a long tail'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a hawk's eye'''
        - '''eye color''': '''brown'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a swan'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a bird'''
        - '''special markings''': '''the pokemon has a red and yellow head, a white body, and a'''
        - '''ear shape''': '''a swan'''
        - '''skin texture''': '''a scaly texture'''
        - '''evolutionary stage''': '''a sylveon'''
        - '''number of wings''': '''two wings'''
        - '''leg shape''': '''a swan-like leg shape'''
        - '''arm shape''': '''a wing shape'''
        - '''facial expression''': '''a smirk'''
        - '''unique feature''': '''it has wings'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

5: label=9
==============================6it [00:33,  5.39s/it]7it [00:39,  5.62s/it]
Pidgeotto_5 with label 9
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''brown and red'''
        - '''size''': '''it is small'''
        - '''shape''': '''a bird'''
        - '''body pattern''': '''a brown body with a red head'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a hawk'''
        - '''eye color''': '''red'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a swan-like tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a bird'''
        - '''special markings''': '''a red hat and a white crest on its head'''
        - '''ear shape''': '''a spherical shape'''
        - '''skin texture''': '''smooth and shiny'''
        - '''evolutionary stage''': '''a snorlax'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle pokemon'''
        - '''arm shape''': '''a wing shape'''
        - '''facial expression''': '''a smug look'''
        - '''unique feature''': '''it has a red hat'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''yes'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

6: label=3
==============================
Charmeleon_6 with label 3
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''red'''
        - '''size''': '''it is small'''
        - '''shape''': '''it is a red and yellow pokemon'''
        - '''body pattern''': '''it has a red body with a white belly and a white tail'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''the eyes are a squint'''
        - '''eye color''': '''red'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''it is a stubby tail with a curved tip'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''fire'''
        - '''special markings''': '''the pokemon has a red body with a white belly and a white tail'''
        - '''ear shape''': '''the ear shape is a triangle'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a thigh and a shin'''
        - '''arm shape''': '''the arms are shaped like a t'''
        - '''facial expression''': '''a smirk'''
        - '''unique feature''': '''it has a tail that is on fire'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

7: label=3
==============================
Charmeleon_7 with label 3
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a red tawny tawny'''
        Attributes List:
        - '''color''': '''red'''
        - '''size''': '''it is small'''
        - '''shape''': '''a red and yellow lizard'''
        - '''body pattern''': '''a red and yellow tiger-like pattern'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''red'''
        - '''mouth shape''': '''a snout'''
        - '''tail shape''': '''a slanted tadpole tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''fire'''
        - '''special markings''': '''the pokemon has a red tummy and a white belly'''
        - '''ear shape''': '''a frog'''
        - '''skin texture''': '''a red lizard'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a t-shaped arm'''
        - '''facial expression''': '''a smirk'''
        - '''unique feature''': '''it has a fire-type'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

8it [00:44,  5.59s/it]9it [00:50,  5.51s/it]10it [00:55,  5.49s/it]END==============================

8: label=3
==============================
Charmeleon_8 with label 3
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a red pokemon with fire on its back'''
        Attributes List:
        - '''color''': '''red'''
        - '''size''': '''it is small'''
        - '''shape''': '''a red and yellow lizard'''
        - '''body pattern''': '''a red and white striped body with a black belly'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''red'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a stubby tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''fire'''
        - '''special markings''': '''the pokemon has a red body with a white belly and a white tail'''
        - '''ear shape''': '''a slanted triangle'''
        - '''skin texture''': '''a red lizard'''
        - '''evolutionary stage''': '''a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a t-shaped arm'''
        - '''facial expression''': '''angry'''
        - '''unique feature''': '''it has a flame on its head'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

9: label=1
==============================
Ivysaur_9 with label 1
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''blue'''
        - '''size''': '''it is small'''
        - '''shape''': '''a squirtle'''
        - '''body pattern''': '''a blue and green squirtle with a pink flower on its head'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''blue'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a flower'''
        - '''special markings''': '''the pokemon has a flower on its head'''
        - '''ear shape''': '''a squirtle'''
        - '''skin texture''': '''a scaly texture'''
        - '''evolutionary stage''': '''a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a squirtle'''
        - '''facial expression''': '''a sad expression'''
        - '''unique feature''': '''it has a flower on its head'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

10: label=1
==============================
Ivysaur_10 with label 1
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''green'''
        - '''size''': '''it is small'''
        - '''shape''': '''a squirtle'''
        - '''body pattern''': '''a squirtle with a flower on its head'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''green'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''grass'''
        - '''special markings''': '''the pokemon has a snout with a horn and a tail'''
        - '''ear shape''': '''a squirtle'''
        - '''skin texture''': '''a scaly texture'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a twig'''
        - '''facial expression''': '''a sad expression'''
        - '''unique feature''': '''it has a flower on its head'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

11it [01:01,  5.48s/it]12it [01:07,  5.77s/it]13it [01:12,  5.61s/it]END==============================

11: label=1
==============================
Ivysaur_11 with label 1
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''blue'''
        - '''size''': '''it is small'''
        - '''shape''': '''it is a small blue pokemon with a leaf on its back'''
        - '''body pattern''': '''it has a blue body with a green head and a pink tail'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''the eyes are a squint'''
        - '''eye color''': '''blue'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''the pokemon is a squirtle'''
        - '''special markings''': '''the pokemon has a green head, a blue body, and a pink tail'''
        - '''ear shape''': '''a squirtle'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a thigh and a thigh'''
        - '''arm shape''': '''the pokemon has a squirtle arm shape'''
        - '''facial expression''': '''a sad expression'''
        - '''unique feature''': '''it has a flower on its head'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

12: label=6
==============================
Pikachu_12 with label 6
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''pikachu'''
        Attributes List:
        - '''color''': '''yellow'''
        - '''size''': '''it is small'''
        - '''shape''': '''a small yellow pokemon'''
        - '''body pattern''': '''it has a yellow body with a black head and a black tail'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''yellow'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a slanted squirt tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''grass'''
        - '''special markings''': '''the pokemon has a yellow body with a black stripe on the side of its'''
        - '''ear shape''': '''a ear shape of a t'''
        - '''skin texture''': '''smooth'''
        - '''evolutionary stage''': '''it is a pikachu'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a t-shape'''
        - '''facial expression''': '''a sad expression'''
        - '''unique feature''': '''it has a tail'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

13: label=6
==============================
Pikachu_13 with label 6
==============================

14it [01:17,  5.47s/it]15it [01:23,  5.43s/it]16it [01:28,  5.23s/it]
        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''pikachu'''
        Attributes List:
        - '''color''': '''yellow'''
        - '''size''': '''it is small'''
        - '''shape''': '''a yellow pokemon with a black nose'''
        - '''body pattern''': '''a yellow body with black eyes and a black nose'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''yellow'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a stubby tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a pokemon'''
        - '''special markings''': '''the pokemon has a black stripe on its forehead'''
        - '''ear shape''': '''a squished triangle'''
        - '''skin texture''': '''smooth'''
        - '''evolutionary stage''': '''pikachu'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a slanted triangle'''
        - '''facial expression''': '''a pikachu with a smile on his face'''
        - '''unique feature''': '''it has a yellow head'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

14: label=6
==============================
Pikachu_14 with label 6
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''pikachu'''
        Attributes List:
        - '''color''': '''yellow'''
        - '''size''': '''it is small'''
        - '''shape''': '''it is a small yellow ball'''
        - '''body pattern''': '''it has a yellow body with a black head and a black tail'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''yellow'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a stubby tail'''
        - '''number of heads''': '''two heads'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a ball'''
        - '''special markings''': '''the pokemon has a white belly and a black tail'''
        - '''ear shape''': '''a ear shape of a squirtle'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a pikachu'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a t'''
        - '''arm shape''': '''it is a squirtle'''
        - '''facial expression''': '''a smile'''
        - '''unique feature''': '''it is a pikachu'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

15: label=4
==============================
Squirtle_15 with label 4
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a small turtle'''
        Attributes List:
        - '''color''': '''blue and yellow'''
        - '''size''': '''small'''
        - '''shape''': '''a turtle'''
        - '''body pattern''': '''a turtle with a blue head and a yellow belly'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''blue'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''sand'''
        - '''special markings''': '''the pokemon has a blue and yellow shell'''
        - '''ear shape''': '''a teddy bear'''
        - '''skin texture''': '''smooth'''
        - '''evolutionary stage''': '''a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a t-shape'''
        - '''facial expression''': '''a sad expression'''
        - '''unique feature''': '''it is a turtle'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

16: label=4
==============================
Squirtle_16 with label 4
17it [01:33,  5.29s/it]18it [01:39,  5.45s/it]==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''blue'''
        - '''size''': '''it is small'''
        - '''shape''': '''a turtle'''
        - '''body pattern''': '''it is a squirtle'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''blue'''
        - '''mouth shape''': '''a snout'''
        - '''tail shape''': '''a squirtle'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''water'''
        - '''special markings''': '''the pokemon has a blue head, a blue body, and a blue tail'''
        - '''ear shape''': '''a squirtle'''
        - '''skin texture''': '''it is smooth and shiny'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''it is a squirtle'''
        - '''facial expression''': '''a smile'''
        - '''unique feature''': '''it is a squirtle'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

17: label=4
==============================
Squirtle_17 with label 4
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a turtle'''
        Attributes List:
        - '''color''': '''blue'''
        - '''size''': '''it is a small turtle'''
        - '''shape''': '''it is a turtle'''
        - '''body pattern''': '''it is a turtle pokemon'''
        - '''number of limbs''': '''four limbs'''
        - '''eye shape''': '''the eye shape is a squint'''
        - '''eye color''': '''blue'''
        - '''mouth shape''': '''the mouth shape of the pokemon in this image is a snout'''
        - '''tail shape''': '''it is a turtle'''
        - '''number of heads''': '''two heads'''
        - '''number of eyes''': '''two eyes'''
        - '''associated element''': '''a turtle'''
        - '''special markings''': '''the pokemon has a blue shell with a brown head and a brown body with'''
        - '''ear shape''': '''the ear shape is a t'''
        - '''skin texture''': '''the skin texture is smooth and shiny'''
        - '''evolutionary stage''': '''the pokemon in this image is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a t'''
        - '''arm shape''': '''the arm shape is a t'''
        - '''facial expression''': '''a turtle pokemon'''
        - '''unique feature''': '''it is a turtle'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

18: label=5
==============================
Wartortle_18 with label 5
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''blue'''
        - '''size''': '''it is small'''
        - '''shape''': '''a turtle'''
        - '''body pattern''': '''it has a spherical body with a spherical head'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''blue'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''water'''
        - '''special markings''': '''the pokemon has a blue body with a white belly and a blue head'''
        - '''ear shape''': '''a squirtle'''
        - '''skin texture''': '''it is smooth and shiny'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''it is a squirtle'''
        - '''facial expression''': '''a smirk'''
        - '''unique feature''': '''it has a shell'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''yes'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

19it [01:44,  5.44s/it]20it [01:50,  5.54s/it]21it [01:56,  5.75s/it]END==============================

19: label=5
==============================
Wartortle_19 with label 5
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a pokemon that is a turtle'''
        Attributes List:
        - '''color''': '''blue'''
        - '''size''': '''it is a small turtle'''
        - '''shape''': '''it is a turtle'''
        - '''body pattern''': '''it has a blue body with a white belly and a white head'''
        - '''number of limbs''': '''four limbs'''
        - '''eye shape''': '''the eye shape is a squint'''
        - '''eye color''': '''blue'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''it is a squirtle'''
        - '''number of heads''': '''two heads'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a turtle'''
        - '''special markings''': '''the pokemon has a blue body with a white belly and a white head with'''
        - '''ear shape''': '''the ear shape is a t'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a t'''
        - '''arm shape''': '''the arm shape is a t'''
        - '''facial expression''': '''a turtle pokemon'''
        - '''unique feature''': '''it has a shell'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

20: label=5
==============================
Wartortle_20 with label 5
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''person, person, person, person, person, person, person, person, person, person'''
        Attributes List:
        - '''color''': '''blue'''
        - '''size''': '''it is a small pokemon'''
        - '''shape''': '''a turtle'''
        - '''body pattern''': '''a squirtle with a squirtle on its'''
        - '''number of limbs''': '''four limbs'''
        - '''eye shape''': '''a person'''
        - '''eye color''': '''blue'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a twig'''
        - '''special markings''': '''the pokemon has a squirtle on its back, and a'''
        - '''ear shape''': '''a squirtle'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''person, person, person, person, person, person, person, person, person, person'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a thigh and a thigh'''
        - '''arm shape''': '''a teddy bear'''
        - '''facial expression''': '''a smile'''
        - '''unique feature''': '''it is a squirtle'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

21: label=8
==============================
Pidgey_21 with label 8
==============================

22it [02:02,  5.83s/it]23it [02:08,  5.76s/it]
        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a bird pokemon'''
        Attributes List:
        - '''color''': '''brown and white'''
        - '''size''': '''it is a small bird'''
        - '''shape''': '''it is a bird'''
        - '''body pattern''': '''it is a bird with a brown body and white head'''
        - '''number of limbs''': '''four limbs'''
        - '''eye shape''': '''the eyes are a squint'''
        - '''eye color''': '''brown eyes'''
        - '''mouth shape''': '''the mouth shape is a slit'''
        - '''tail shape''': '''it is a swan'''
        - '''number of heads''': '''two heads'''
        - '''number of eyes''': '''two eyes'''
        - '''associated element''': '''bird'''
        - '''special markings''': '''the bird has a white crest on its head, and a white wing patch'''
        - '''ear shape''': '''the ear shape is a triangle'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''the pokemon in this image is a snorlax'''
        - '''number of wings''': '''two wings'''
        - '''leg shape''': '''the leg shape is a squirtle'''
        - '''arm shape''': '''the arm shape is a wing'''
        - '''facial expression''': '''a bird pokemon'''
        - '''unique feature''': '''it has a beak'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

22: label=8
==============================
Pidgey_22 with label 8
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a sylveon'''
        Attributes List:
        - '''color''': '''brown and white'''
        - '''size''': '''it is a medium size'''
        - '''shape''': '''a bird'''
        - '''body pattern''': '''it is a bird with a brown body and a white head'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a hawk'''
        - '''eye color''': '''brown'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a swan'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a bird'''
        - '''special markings''': '''the pokemon has a brown body with a white head and a brown tail'''
        - '''ear shape''': '''a spherical shape'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''a sylveon'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a squirtle'''
        - '''arm shape''': '''it is a swan'''
        - '''facial expression''': '''a hawk'''
        - '''unique feature''': '''it has a long neck'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

23: label=8
==============================
Pidgey_23 with label 8
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a bird'''
        Attributes List:
        - '''color''': '''brown and white'''
        - '''size''': '''it is a medium size'''
        - '''shape''': '''a bird'''
        - '''body pattern''': '''it is a bird'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a hawk'''
        - '''eye color''': '''brown'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a swan'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a bird'''
        - '''special markings''': '''the bird has a white crest on its head'''
        - '''ear shape''': '''a spherical shape'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''a sylveon'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a squirtle'''
        - '''arm shape''': '''it is a swan'''
        - '''facial expression''': '''a bird with a smirk'''
        - '''unique feature''': '''it is a bird'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

24it [02:13,  5.59s/it]25it [02:19,  5.57s/it]26it [02:25,  5.77s/it]END==============================

24: label=0
==============================
Bulbasaur_24 with label 0
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''green'''
        - '''size''': '''it is small'''
        - '''shape''': '''it is a green and red pokemon'''
        - '''body pattern''': '''a green body with a red head and a red tail'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''green'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a pokemon'''
        - '''special markings''': '''the pokemon has a green body with a red nose and eyes'''
        - '''ear shape''': '''a frog'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a thigh shape'''
        - '''arm shape''': '''the arms are shaped like a t'''
        - '''facial expression''': '''a smile'''
        - '''unique feature''': '''it has a green body and red eyes'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

25: label=0
==============================
Bulbasaur_25 with label 0
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''blue'''
        - '''size''': '''it is small'''
        - '''shape''': '''a small, green, leafy creature'''
        - '''body pattern''': '''a spherical body with a tail'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''green'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''leaf'''
        - '''special markings''': '''the pokemon has a green leaf on its back'''
        - '''ear shape''': '''a squirtle'''
        - '''skin texture''': '''smooth'''
        - '''evolutionary stage''': '''a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a squirtle'''
        - '''facial expression''': '''a sad expression'''
        - '''unique feature''': '''it has a leaf on its back'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

26: label=0
==============================
Bulbasaur_26 with label 0
==============================

27it [02:33,  6.48s/it]28it [02:39,  6.48s/it]
        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''green'''
        - '''size''': '''it is small'''
        - '''shape''': '''a small, green, squirtle-like creature'''
        - '''body pattern''': '''a spherical body with a rounded head and a s'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''green'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''grass'''
        - '''special markings''': '''the pokemon has a large green pouch on its back'''
        - '''ear shape''': '''a squirtle'''
        - '''skin texture''': '''a scaly texture'''
        - '''evolutionary stage''': '''a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a squirtle'''
        - '''facial expression''': '''a sad expression'''
        - '''unique feature''': '''it has a backpack'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

27: label=7
==============================
Raichu_27 with label 7
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''pikachu'''
        Attributes List:
        - '''color''': '''yellow'''
        - '''size''': '''it is small'''
        - '''shape''': '''it is a small, yellow, and brown pokemon'''
        - '''body pattern''': '''it has a squirtle tail and a squirt'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''yellow'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a pokemon that is a squirtle'''
        - '''special markings''': '''the pokemon has a yellow body with a black tail and a white t'''
        - '''ear shape''': '''a squiggly tail'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a pikachu'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a t'''
        - '''arm shape''': '''the arm shape is a t'''
        - '''facial expression''': '''a smile'''
        - '''unique feature''': '''it has a tail'''
        - '''body posturetail presence''': '''yes'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

28: label=7
==============================
Raichu_28 with label 7
==============================

29it [02:45,  6.27s/it]30it [02:51,  6.25s/it]30it [02:51,  5.73s/it]

        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''pikachu, person, person, person, person, person, person, person, person'''
        Attributes List:
        - '''color''': '''orange and white'''
        - '''size''': '''it is small'''
        - '''shape''': '''it is a small, yellow, and brown pokemon'''
        - '''body pattern''': '''it is a squirtle'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''yellow'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a pig tail'''
        - '''number of heads''': '''two heads'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a pokemon'''
        - '''special markings''': '''the pokemon has a yellow head, a yellow body, and a yellow tail'''
        - '''ear shape''': '''a squished ear shape'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a pikachu'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a t'''
        - '''arm shape''': '''it is a teddy bear'''
        - '''facial expression''': '''sad'''
        - '''unique feature''': '''it has a horn on its head'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

29: label=7
==============================
Raichu_29 with label 7
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a pikachu'''
        Attributes List:
        - '''color''': '''brown'''
        - '''size''': '''it is small'''
        - '''shape''': '''a small, stubby, snoutlike creature with a long'''
        - '''body pattern''': '''it has a squirtle like pattern on its back'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''brown'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a pig tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a pokemon'''
        - '''special markings''': '''the pokemon has a snout with a horn on it, and'''
        - '''ear shape''': '''a squished ear'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a pikachu'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a thigh and a thigh'''
        - '''arm shape''': '''the arm shape is a t'''
        - '''facial expression''': '''a smirk'''
        - '''unique feature''': '''it has a tail'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''yes'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

Succ. dumped attribute values to ./experiments/pokemon/describe/pokemon_attributes_pairs_3
Succ. dumped LLM prompts  to ./experiments/pokemon/describe/pokemon_llm_prompts_3
Namespace(mode='guess', config_file_env='./configs/env_machine.yml', config_file_expt='./configs/expts/pokemon_all.yml', num_per_category='3')
{'setup': 'ours', 'experiment': 5.0, 'dataset_name': 'pokemon', 'num_classes': 10, 'num_base': 5, 'num_novel': 5, 'seed': 1, 'batch_size': 256, 'clustering_method': 'multi_clip_voting', 'model_size': 'ViT-B/16', 'model_size_vqa': 'FlanT5-XXL', 'model_type_llm': 'gpt-3.5-turbo', 'image_size': 224, 'verbose': False, 'host': 'chaos', 'num_workers': 16, 'device': 'cuda', 'device_count': '1', 'device_id': '0', 'data_dir': './datasets/pokemon', 'expt_dir': './experiments/pokemon', 'expt_dir_describe': './experiments/pokemon/describe', 'path_vqa_questions': './experiments/pokemon/describe/pokemon_vqa_questions', 'path_vqa_answers': './experiments/pokemon/describe/pokemon_attributes_pairs', 'path_llm_prompts': './experiments/pokemon/describe/pokemon_llm_prompts', 'expt_dir_guess': './experiments/pokemon/guess', 'path_llm_replies_raw': './experiments/pokemon/guess/pokemon_llm_replies_raw', 'path_llm_replies_jsoned': './experiments/pokemon/guess/pokemon_llm_replies_jsoned', 'path_llm_gussed_names': './experiments/pokemon/guess/pokemon_llm_gussed_names', 'expt_dir_grouping': './experiments/pokemon/grouping'}
0it [00:00, ?it/s]0it [00:17, ?it/s]
╭───────────────────── Traceback (most recent call last) ──────────────────────╮
│ /home/hdl/miniconda3/envs/finer/lib/python3.9/site-packages/tenacity/__init_ │
│ _.py:382 in __call__                                                         │
│                                                                              │
│   379 │   │   │   do = self.iter(retry_state=retry_state)                    │
│   380 │   │   │   if isinstance(do, DoAttempt):                              │
│   381 │   │   │   │   try:                                                   │
│ ❱ 382 │   │   │   │   │   result = fn(*args, **kwargs)                       │
│   383 │   │   │   │   except BaseException:  # noqa: B902                    │
│   384 │   │   │   │   │   retry_state.set_exception(sys.exc_info())  # type: │
│   385 │   │   │   │   else:                                                  │
│                                                                              │
│ /home/hdl/project/FineR/FineR_0/agents/llm_bot.py:57 in call_gpts            │
│                                                                              │
│    54 │   │   │   max_tokens=max_tokens                                      │
│    55 │   │   )                                                              │
│    56 │   else:                                                              │
│ ❱  57 │   │   response = client.chat.completions.create(                     │
│    58 │   │   │   model=model,                                               │
│    59 │   │   │   messages=chatgpt_messages,                                 │
│    60 │   │   │   temperature=temperature                                    │
│                                                                              │
│ /home/hdl/miniconda3/envs/finer/lib/python3.9/site-packages/openai/_utils/_u │
│ tils.py:287 in wrapper                                                       │
│                                                                              │
│   284 │   │   │   │   │   else:                                              │
│   285 │   │   │   │   │   │   msg = f"Missing required argument: {quote(miss │
│   286 │   │   │   │   raise TypeError(msg)                                   │
│ ❱ 287 │   │   │   return func(*args, **kwargs)                               │
│   288 │   │                                                                  │
│   289 │   │   return wrapper  # type: ignore                                 │
│   290                                                                        │
│                                                                              │
│ /home/hdl/miniconda3/envs/finer/lib/python3.9/site-packages/openai/resources │
│ /chat/completions/completions.py:1147 in create                              │
│                                                                              │
│   1144 │   │   timeout: float | httpx.Timeout | None | NotGiven = NOT_GIVEN, │
│   1145 │   ) -> ChatCompletion | Stream[ChatCompletionChunk]:                │
│   1146 │   │   validate_response_format(response_format)                     │
│ ❱ 1147 │   │   return self._post(                                            │
│   1148 │   │   │   "/chat/completions",                                      │
│   1149 │   │   │   body=maybe_transform(                                     │
│   1150 │   │   │   │   {                                                     │
│                                                                              │
│ /home/hdl/miniconda3/envs/finer/lib/python3.9/site-packages/openai/_base_cli │
│ ent.py:1259 in post                                                          │
│                                                                              │
│   1256 │   │   opts = FinalRequestOptions.construct(                         │
│   1257 │   │   │   method="post", url=path, json_data=body, files=to_httpx_f │
│   1258 │   │   )                                                             │
│ ❱ 1259 │   │   return cast(ResponseT, self.request(cast_to, opts, stream=str │
│   1260 │                                                                     │
│   1261 │   def patch(                                                        │
│   1262 │   │   self,                                                         │
│                                                                              │
│ /home/hdl/miniconda3/envs/finer/lib/python3.9/site-packages/openai/_base_cli │
│ ent.py:1047 in request                                                       │
│                                                                              │
│   1044 │   │   │   │   │   err.response.read()                               │
│   1045 │   │   │   │                                                         │
│   1046 │   │   │   │   log.debug("Re-raising status error")                  │
│ ❱ 1047 │   │   │   │   raise self._make_status_error_from_response(err.respo │
│   1048 │   │   │                                                             │
│   1049 │   │   │   break                                                     │
│   1050                                                                       │
╰──────────────────────────────────────────────────────────────────────────────╯
AuthenticationError: Error code: 401 - {'error': {'message': '无效的sk 
token，请检查token是否正确', 'type': 'error'}}

The above exception was the direct cause of the following exception:

╭───────────────────── Traceback (most recent call last) ──────────────────────╮
│ /home/hdl/project/FineR/FineR_0/discovering.py:394 in <module>               │
│                                                                              │
│   391 │   │   llm_bot = LLMBot(model=cfg['model_type_llm'])                  │
│   392 │   │                                                                  │
│   393 │   │   # run the main program                                         │
│ ❱ 394 │   │   raw_replies, jsoned_replies = main_guess(cfg, llm_bot, reasoni │
│   395 │   │                                                                  │
│   396 │   │   # save LLM replis                                              │
│   397 │   │   dump_json(cfg['path_llm_replies_raw'] + expt_id_suffix, raw_re │
│                                                                              │
│ /home/hdl/project/FineR/FineR_0/discovering.py:170 in main_guess             │
│                                                                              │
│   167 │                                                                      │
│   168 │   # LLM inferring                                                    │
│   169 │   for i, (key, prompt) in tqdm(enumerate(prompt_list.items())):      │
│ ❱ 170 │   │   raw_reply = bot.infer(prompt, temperature=0.9)  # use a high t │
│   171 │   │   used_tokens = bot.get_used_tokens()                            │
│   172 │   │                                                                  │
│   173 │   │   replies_raw[key] = raw_reply                                   │
│                                                                              │
│ /home/hdl/project/FineR/FineR_0/agents/llm_bot.py:119 in infer               │
│                                                                              │
│   116 │   │   return reply, total_prompt, n_tokens                           │
│   117 │                                                                      │
│   118 │   def infer(self, prompt, temperature=0.9):                          │
│ ❱ 119 │   │   reply, _, n_tokens = self.__query(prompt, temperature, max_tok │
│   120 │   │   self.total_tokens += n_tokens                                  │
│   121 │   │   return reply.strip()                                           │
│   122                                                                        │
│                                                                              │
│ /home/hdl/project/FineR/FineR_0/agents/llm_bot.py:109 in __query             │
│                                                                              │
│   106 │                                                                      │
│   107 │   def __query(self, prompt, temperature, max_token):                 │
│   108 │   │   total_prompt = prepare_chatgpt_message(prompt)                 │
│ ❱ 109 │   │   reply, n_tokens = call_gpts(                                   │
│   110 │   │   │   client=self.client,                                        │
│   111 │   │   │   chatgpt_messages=total_prompt,                             │
│   112 │   │   │   temperature=temperature,                                   │
│                                                                              │
│ /home/hdl/miniconda3/envs/finer/lib/python3.9/site-packages/tenacity/__init_ │
│ _.py:289 in wrapped_f                                                        │
│                                                                              │
│   286 │   │                                                                  │
│   287 │   │   @functools.wraps(f)                                            │
│   288 │   │   def wrapped_f(*args: t.Any, **kw: t.Any) -> t.Any:             │
│ ❱ 289 │   │   │   return self(f, *args, **kw)                                │
│   290 │   │                                                                  │
│   291 │   │   def retry_with(*args: t.Any, **kwargs: t.Any) -> WrappedFn:    │
│   292 │   │   │   return self.copy(*args, **kwargs).wraps(f)                 │
│                                                                              │
│ /home/hdl/miniconda3/envs/finer/lib/python3.9/site-packages/tenacity/__init_ │
│ _.py:379 in __call__                                                         │
│                                                                              │
│   376 │   │                                                                  │
│   377 │   │   retry_state = RetryCallState(retry_object=self, fn=fn, args=ar │
│   378 │   │   while True:                                                    │
│ ❱ 379 │   │   │   do = self.iter(retry_state=retry_state)                    │
│   380 │   │   │   if isinstance(do, DoAttempt):                              │
│   381 │   │   │   │   try:                                                   │
│   382 │   │   │   │   │   result = fn(*args, **kwargs)                       │
│                                                                              │
│ /home/hdl/miniconda3/envs/finer/lib/python3.9/site-packages/tenacity/__init_ │
│ _.py:326 in iter                                                             │
│                                                                              │
│   323 │   │   │   retry_exc = self.retry_error_cls(fut)                      │
│   324 │   │   │   if self.reraise:                                           │
│   325 │   │   │   │   raise retry_exc.reraise()                              │
│ ❱ 326 │   │   │   raise retry_exc from fut.exception()                       │
│   327 │   │                                                                  │
│   328 │   │   if self.wait:                                                  │
│   329 │   │   │   sleep = self.wait(retry_state)                             │
╰──────────────────────────────────────────────────────────────────────────────╯
RetryError: RetryError[<Future at 0x7d26495d2760 state=finished raised 
AuthenticationError>]
Namespace(mode='postprocess', config_file_env='./configs/env_machine.yml', config_file_expt='./configs/expts/pokemon_all.yml', num_per_category='3')
{'setup': 'ours', 'experiment': 5.0, 'dataset_name': 'pokemon', 'num_classes': 10, 'num_base': 5, 'num_novel': 5, 'seed': 1, 'batch_size': 256, 'clustering_method': 'multi_clip_voting', 'model_size': 'ViT-B/16', 'model_size_vqa': 'FlanT5-XXL', 'model_type_llm': 'gpt-3.5-turbo', 'image_size': 224, 'verbose': False, 'host': 'chaos', 'num_workers': 16, 'device': 'cuda', 'device_count': '1', 'device_id': '0', 'data_dir': './datasets/pokemon', 'expt_dir': './experiments/pokemon', 'expt_dir_describe': './experiments/pokemon/describe', 'path_vqa_questions': './experiments/pokemon/describe/pokemon_vqa_questions', 'path_vqa_answers': './experiments/pokemon/describe/pokemon_attributes_pairs', 'path_llm_prompts': './experiments/pokemon/describe/pokemon_llm_prompts', 'expt_dir_guess': './experiments/pokemon/guess', 'path_llm_replies_raw': './experiments/pokemon/guess/pokemon_llm_replies_raw', 'path_llm_replies_jsoned': './experiments/pokemon/guess/pokemon_llm_replies_jsoned', 'path_llm_gussed_names': './experiments/pokemon/guess/pokemon_llm_gussed_names', 'expt_dir_grouping': './experiments/pokemon/grouping'}
Charmander_0
{
    "Squirtle": [
        "Squirtle is a small, orange Pokemon with a stubby, snout-like creature.",
        "It has a spherical body with a spherical head and four limbs.",
        "The Pokemon has a squint eye shape and orange eyes.",
        "Its mouth shape is a slit and it has a stubby tail.",
        "Squirtle has two heads and two eyes."
    ],
    "Charmander": [
        "Squirtle is a small, orange Pokemon with a stubby, snout-like creature.",
        "It has a spherical body with a spherical head and four limbs.",
        "The Pokemon has a squint eye shape and orange eyes.",
        "Its mouth shape is a slit and it has a stubby tail.",
        "Squirtle has two heads and two eyes."
    ],
    "Cyndaquil": [
        "Squirtle is a small, orange Pokemon with a stubby, snout-like creature.",
        "It has a spherical body with a spherical head and four limbs.",
        "The Pokemon has a squint eye shape and orange eyes.",
        "Its mouth shape is a slit and it has a stubby tail.",
        "Squirtle has two heads and two eyes."
    ]
}


Charmander_1
{
    "Squirtle": [
        "This pokemon is a small orange creature with a scaly, stubby, snout-like head, two heads, and two squinty orange eyes.",
        "It has a small, lizard-like body with a tail, four limbs, and smooth skin texture.",
        "The special markings of this pokemon are a bright red nose and a yellow tummy.",
        "Its mouth is in the shape of a snout and its ears resemble those of a frog.",
        "It is associated with the fire element and has a smile as its facial expression."
    ],
    "Charmander": [
        "This pokemon is a small orange creature with a scaly, stubby, snout-like head, two heads, and two squinty orange eyes.",
        "It has a small, lizard-like body with a tail, four limbs, and smooth skin texture.",
        "The special markings of this pokemon are a bright red nose and a yellow tummy.",
        "Its mouth is in the shape of a snout and its ears resemble those of a frog.",
        "It is associated with the fire element and has a smile as its facial expression."
    ],
    "Charmeleon": [
        "This pokemon is a small orange creature with a scaly, stubby, snout-like head, two heads, and two squinty orange eyes.",
        "It has a small, lizard-like body with a tail, four limbs, and smooth skin texture.",
        "The special markings of this pokemon are a bright red nose and a yellow tummy.",
        "Its mouth is in the shape of a snout and its ears resemble those of a frog.",
        "It is associated with the fire element and has a smile as its facial expression."
    ]
}


Charmander_2
{
  "Squirtle": [
    "A squirtle is a small, round, and stubby pokemon with a brown color.",
    "It has a spherical head and body with a white belly and blue tummy.",
    "This pokemon has four limbs in a T shape and two heads with squinty blue eyes and a slit mouth.",
    "It also has a stubby tail and a spherical shape ear.",
    "The skin is smooth and it has a flame on its head."
  ],
  "Wartortle": [
    "A squirtle is a small, round, and stubby pokemon with a brown color.",
    "It has a spherical head and body with a white belly and blue tummy.",
    "This pokemon has four limbs in a T shape and two heads with squinty blue eyes and a slit mouth.",
    "It also has a stubby tail and a spherical shape ear.",
    "The skin is smooth and it has a flame on its head."
  ],
  "Blastoise": [
    "A squirtle is a small, round, and stubby pokemon with a brown color.",
    "It has a spherical head and body with a white belly and blue tummy.",
    "This pokemon has four limbs in a T shape and two heads with squinty blue eyes and a slit mouth.",
    "It also has a stubby tail and a spherical shape ear.",
    "The skin is smooth and it has a flame on its head."
  ]
}


Pidgey_3
{
    "Swellow": [
        "The Pokemon in the image is a bird with a brown and white body pattern.",
        "It is small in size and has a beak.",
        "It has a white crest on its head and a white wing patch.",
        "It has two heads and two eyes with a squint shape.",
        "The Pokemon has four limbs, two wings, and a tail shaped like a swan."
    ],
    "Pidgeot": [
        "The Pokemon in the image is a bird with a brown and white body pattern.",
        "It is small in size and has a beak.",
        "It has a white crest on its head and a white wing patch.",
        "It has two heads and two eyes with a squint shape.",
        "The Pokemon has four limbs, two wings, and a tail shaped like a swan."
    ],
    "Staraptor": [
        "The Pokemon in the image is a bird with a brown and white body pattern.",
        "It is small in size and has a beak.",
        "It has a white crest on its head and a white wing patch.",
        "It has two heads and two eyes with a squint shape.",
        "The Pokemon has four limbs, two wings, and a tail shaped like a swan."
    ]
}


Pidgey_4
{
  "Crestwing": [
    "This is a medium-sized bird with a brown head and a white belly.",
    "It has four limbs and two heads with two eyes each.",
    "The bird has a hawk-like eye shape and brown eyes.",
    "It has a slit-shaped mouth and a tail resembling that of a swan.",
    "The bird has a unique white crest on its head and a spherical ear shape."
  ],
  "Swaneye": [
    "This is a medium-sized bird with a brown head and a white belly.",
    "It has four limbs and two heads with two eyes each.",
    "The bird has a hawk-like eye shape and brown eyes.",
    "It has a slit-shaped mouth and a tail resembling that of a swan.",
    "The bird has a unique white crest on its head and a spherical ear shape."
  ],
  "Hawkbeak": [
    "This is a medium-sized bird with a brown head and a white belly.",
    "It has four limbs and two heads with two eyes each.",
    "The bird has a hawk-like eye shape and brown eyes.",
    "It has a slit-shaped mouth and a tail resembling that of a swan.",
    "The bird has a unique white crest on its head and a spherical ear shape."
  ]
}


Pidgey_5
{
    "Sylveon": [
        "A Sylveon is a medium-sized bird-like Pokemon with brown and white feathers.",
        "Its body is covered in brown feathers with a white head and a red beak.",
        "The Pokemon has two heads and two eyes, which are brown and shaped like a hawk.",
        "It has a spherical-shaped ear and a scaly skin texture.",
        "The Sylveon has a unique feature of a long neck and two wings."
    ],
    "Hawkwing": [
        "A Sylveon is a medium-sized bird-like Pokemon with brown and white feathers.",
        "Its body is covered in brown feathers with a white head and a red beak.",
        "The Pokemon has two heads and two eyes, which are brown and shaped like a hawk.",
        "It has a spherical-shaped ear and a scaly skin texture.",
        "The Sylveon has a unique feature of a long neck and two wings."
    ],
    "Swanbeak": [
        "A Sylveon is a medium-sized bird-like Pokemon with brown and white feathers.",
        "Its body is covered in brown feathers with a white head and a red beak.",
        "The Pokemon has two heads and two eyes, which are brown and shaped like a hawk.",
        "It has a spherical-shaped ear and a scaly skin texture.",
        "The Sylveon has a unique feature of a long neck and two wings."
    ]
}


Pidgeotto_6
{
    "Sylveon": [
        "This image features a Pokemon called Sylveon, which is a bird-like creature with a medium size.",
        "It has a tan body with a red head and wings, and it is characterized by its brown and pink coloration.",
        "Sylveon has a unique shape with a long neck, long tail, and a swan-like tail.",
        "It has four limbs and two heads with squinty pink eyes.",
        "The Pokemon has a slit mouth and a spherical ear shape."
    ],
    "Birdor": [
        "This image features a Pokemon called Birdor, which is a bird-like creature with a medium size.",
        "It has a tan body with a red head and wings, and it is characterized by its brown and pink coloration.",
        "Birdor has a unique shape with a long neck, long tail, and a swan-like tail.",
        "It has four limbs and two heads with squinty pink eyes.",
        "The Pokemon has a slit mouth and a spherical ear shape."
    ],
    "Swanwing": [
        "This image features a Pokemon called Swanwing, which is a bird-like creature with a medium size.",
        "It has a tan body with a red head and wings, and it is characterized by its brown and pink coloration.",
        "Swanwing has a unique shape with a long neck, long tail, and a swan-like tail.",
        "It has four limbs and two heads with squinty pink eyes.",
        "The Pokemon has a slit mouth and a spherical ear shape."
    ]
}


Pidgeotto_7
{
    "Sylveon": [
        "Sylveon is a medium-sized bird-like Pokémon with a pink and brown coloration. It has a brown body with a yellow head and wings.",
        "The Pokémon has four limbs, two heads, and two eyes with a hawk-like shape. Its eye color is brown, and its mouth has a slit shape.",
        "The tail resembles that of a swan. It has a special marking of a red and yellow crest on its head, along with a white ear shape similar to a swan.",
        "Sylveon's skin texture is smooth. It is in the evolutionary stage of being a Sandslash.",
        "It has two wings and legs shaped like a Squirtle. Its arms have a wing-like shape. The Pokémon has a smug facial expression and a unique feature of wings."
    ],
    "Sandslash": [
        "Sylveon is in the evolutionary stage of being a Sandslash. Its coloration is pink and brown, and its size is medium.",
        "It has a brown body with a yellow head and wings. The Pokémon has four limbs, two heads, and two eyes with a hawk-like shape.",
        "The eye color is brown, and the mouth has a slit shape. The tail resembles that of a swan.",
        "Sylveon has a special marking of a red and yellow crest on its head, along with a white ear shape similar to a swan. Its skin texture is smooth.",
        "It has two wings and legs shaped like a Squirtle. Its arms have a wing-like shape. The Pokémon has a smug facial expression and a unique feature of wings."
    ],
    "Swanslash": [
        "Sylveon resembles a bird, particularly a swan, with its medium size and pink and brown coloration.",
        "Its brown body has a yellow head and wings. The Pokémon has four limbs, two heads, and two eyes with a hawk-like shape.",
        "The eye color is brown, and the mouth has a slit shape. The tail is shaped like that of a swan.",
        "Sylveon has a special marking of a red and yellow crest on its head, along with a white ear shape similar to a swan. Its skin texture is smooth.",
        "It has two wings and legs shaped like a Squirtle. Its arms have a wing-like shape. The Pokémon has a smug facial expression and a unique feature of wings."
    ]
}


Pidgeotto_8
{
  "Squirtle": [
    "The image shows a pokemon resembling a squirtle with a brown body and a red head.",
    "It has a small size and a bird-like shape.",
    "The pokemon has hawk-shaped red eyes and a slit-shaped mouth.",
    "It has a swan-like tail and two heads, with two eyes on each head.",
    "The pokemon is associated with the bird element and has a special marking of a red hat with a white crest on its head."
  ],
  "Redhat": [
    "The image shows a pokemon resembling a squirtle with a brown body and a red head.",
    "It has a small size and a bird-like shape.",
    "The pokemon has hawk-shaped red eyes and a slit-shaped mouth.",
    "It has a swan-like tail and two heads, with two eyes on each head.",
    "The pokemon is associated with the bird element and has a special marking of a red hat with a white crest on its head."
  ],
  "Crestspike": [
    "The image shows a pokemon resembling a squirtle with a brown body and a red head.",
    "It has a small size and a bird-like shape.",
    "The pokemon has hawk-shaped red eyes and a slit-shaped mouth.",
    "It has a swan-like tail and two heads, with two eyes on each head.",
    "The pokemon is associated with the bird element and has a special marking of a red hat with a white crest on its head."
  ]
}


Charmeleon_9
{
    "Flamizard": [
        "The image shows a small red fire type pokemon with a red and white striped body, black belly, and a flame on its head.",
        "It has a sad expression with squint-shaped red eyes and a slit-shaped mouth.",
        "The pokemon has two heads, two eyes, and four limbs.",
        "It has a stubby tail with a curved tip and no presence of fins, horns, or crests.",
        "The unique features include slanted triangle-shaped ears, a red scaly skin, and a spike on its body."
    ],
    "Lizardflare": [
        "The image shows a small red fire type pokemon with a red and white striped body, black belly, and a flame on its head.",
        "It has a sad expression with squint-shaped red eyes and a slit-shaped mouth.",
        "The pokemon has two heads, two eyes, and four limbs.",
        "It has a stubby tail with a curved tip and no presence of fins, horns, or crests.",
        "The unique features include slanted triangle-shaped ears, a red scaly skin, and a spike on its body."
    ],
    "Ignisaur": [
        "The image shows a small red fire type pokemon with a red and white striped body, black belly, and a flame on its head.",
        "It has a sad expression with squint-shaped red eyes and a slit-shaped mouth.",
        "The pokemon has two heads, two eyes, and four limbs.",
        "It has a stubby tail with a curved tip and no presence of fins, horns, or crests.",
        "The unique features include slanted triangle-shaped ears, a red scaly skin, and a spike on its body."
    ]
}


Charmeleon_10
{
    "Squirtle": [
        "The pokemon in the image is a small, red-colored creature that resembles a lizard.",
        "It has a tiger-like pattern on its body and a red tummy with a white belly.",
        "With four limbs and two heads, it has squinted red eyes and a snout-like mouth.",
        "Its tail is slanted and resembles a tadpole.",
        "This pokemon is associated with the fire element and has the ability of a fire-type."
    ],
    "Charmander": [
        "The pokemon in the image is a small, red-colored creature that resembles a lizard.",
        "It has a tiger-like pattern on its body and a red tummy with a white belly.",
        "With four limbs and two heads, it has squinted red eyes and a snout-like mouth.",
        "Its tail is slanted and resembles a tadpole.",
        "This pokemon is associated with the fire element and has the ability of a fire-type."
    ],
    "Charizard": [
        "The pokemon in the image is a small, red-colored creature that resembles a lizard.",
        "It has a tiger-like pattern on its body and a red tummy with a white belly.",
        "With four limbs and two heads, it has squinted red eyes and a snout-like mouth.",
        "Its tail is slanted and resembles a tadpole.",
        "This pokemon is associated with the fire element and has the ability of a fire-type."
    ]
}


Charmeleon_11
{
    "Squirtle": [
        "A squirtle is a small, red and yellow pokemon with a red body, white belly, and white tail.",
        "It has four limbs, two heads, and two eyes that are squint and red in color.",
        "The pokemon has a slit mouth and a stubby tail with a curved tip.",
        "It is associated with the fire element and has special markings on its body.",
        "The squirtle has a triangular ear shape, smooth skin texture, and a smirk facial expression."
    ],
    "Charmeleon": [
        "A squirtle is a small, red and yellow pokemon with a red body, white belly, and white tail.",
        "It has four limbs, two heads, and two eyes that are squint and red in color.",
        "The pokemon has a slit mouth and a stubby tail with a curved tip.",
        "It is associated with the fire element and has special markings on its body.",
        "The squirtle has a triangular ear shape, smooth skin texture, and a smirk facial expression."
    ],
    "Charizard": [
        "A squirtle is a small, red and yellow pokemon with a red body, white belly, and white tail.",
        "It has four limbs, two heads, and two eyes that are squint and red in color.",
        "The pokemon has a slit mouth and a stubby tail with a curved tip.",
        "It is associated with the fire element and has special markings on its body.",
        "The squirtle has a triangular ear shape, smooth skin texture, and a smirk facial expression."
    ]
}


Squirtle_12
{
    "Squirtle": [
        "This is a small turtle-like pokemon called Squirtle.",
        "It has a blue body with a yellow head and a yellow tail.",
        "The pokemon has a sad expression with squinted blue eyes and a slit mouth.",
        "It has four limbs and two heads with two blue eyes.",
        "Squirtle is associated with the element of sand and has a smooth skin texture."
    ],
    "Wartortle": [
        "This is a small turtle-like pokemon called Wartortle.",
        "It has a blue body with a yellow head and a yellow tail.",
        "The pokemon has a sad expression with squinted blue eyes and a slit mouth.",
        "It has four limbs and two heads with two blue eyes.",
        "Wartortle is associated with the element of sand and has a smooth skin texture."
    ],
    "Blastoise": [
        "This is a small turtle-like pokemon called Blastoise.",
        "It has a blue body with a yellow head and a yellow tail.",
        "The pokemon has a sad expression with squinted blue eyes and a slit mouth.",
        "It has four limbs and two heads with two blue eyes.",
        "Blastoise is associated with the element of sand and has a smooth skin texture."
    ]
}


Squirtle_13
{
    "Squirtle": [
        "Squirtle is a small, blue turtle-like Pokémon with a smooth skin texture.",
        "It has a squint eye shape and blue eyes.",
        "The mouth is in the form of a snout.",
        "Squirtle has a unique body pattern that resembles a squirtle.",
        "It has four limbs, a tail, and two heads."
    ],
    "Wartortle": [
        "Wartortle evolves from Squirtle and is a larger, more powerful water-type Pokémon.",
        "It retains the same blue color and turtle-like shape.",
        "Wartortle has evolved to have a larger body size and more defined limbs.",
        "It still has a snout-shaped mouth and two squint eyes.",
        "The special markings on Wartortle include a darker blue tail and the presence of a spike on its back."
    ],
    "Blastoise": [
        "Blastoise is the final evolution stage of Squirtle, following Wartortle.",
        "It is a larger, more heavily built Pokémon with a dark blue color.",
        "Blastoise has a more pronounced turtle shape and a distinctive cannon-like structure on its back.",
        "It has two heads, a snout-shaped mouth, and blue eyes.",
        "The special markings of Blastoise include water cannons on its shell and a spike on its back."
    ]
}


Squirtle_14
{
    "Squirtle": [
        "This is a blue turtle with a small size and a smooth skin texture.",
        "It has a squint eye shape and blue eyes.",
        "The mouth shape is a slit and it has a turtle-shaped body with a tail.",
        "It has two heads and two limbs.",
        "The pokemon is a squirtle in its evolutionary stage."
    ],
    "Wartortle": [
        "This is a blue turtle with a small size and a smooth skin texture.",
        "It has a squint eye shape and blue eyes.",
        "The mouth shape is a slit and it has a turtle-shaped body with a tail.",
        "It has two heads and two limbs.",
        "The pokemon is a squirtle in its evolutionary stage."
    ],
    "Blastoise": [
        "This is a blue turtle with a small size and a smooth skin texture.",
        "It has a squint eye shape and blue eyes.",
        "The mouth shape is a slit and it has a turtle-shaped body with a tail.",
        "It has two heads and two limbs.",
        "The pokemon is a squirtle in its evolutionary stage."
    ]
}


Bulbasaur_15
{
    "Squirtle": [
        "A squirtle is a small and green pokemon with a red head and tail.",
        "It has four limbs and a squinty green eyes.",
        "The mouth is in a slit shape and the unique feature of this pokemon is its green body with red eyes.",
        "It has two heads and two eyes.",
        "The skin texture of the squirtle is smooth and it is at the evolutionary stage of being a squirtle."
    ],
    "Greened": [
        "A squirtle is a small and green pokemon with a red head and tail.",
        "It has four limbs and a squinty green eyes.",
        "The mouth is in a slit shape and the unique feature of this pokemon is its green body with red eyes.",
        "It has two heads and two eyes.",
        "The skin texture of the squirtle is smooth and it is at the evolutionary stage of being a squirtle."
    ],
    "Frogleaf": [
        "A squirtle is a small and green pokemon with a red head and tail.",
        "It has four limbs and a squinty green eyes.",
        "The mouth is in a slit shape and the unique feature of this pokemon is its green body with red eyes.",
        "It has two heads and two eyes.",
        "The skin texture of the squirtle is smooth and it is at the evolutionary stage of being a squirtle."
    ]
}


Bulbasaur_16
{
    "Squirtle": [
        "Squirtle is a small, green, leafy creature with a sad expression.",
        "It has a leaf on its back and is associated with the grass element.",
        "It has four limbs, two heads, and two eyes which are squinted and green in color.",
        "Squirtle has a smooth skin texture and its body shape resembles a squirtle.",
        "It does not have wings, fins, or horns, but it does have a spike on its back."
    ],
    "Greenleaf": [
        "Greenleaf is a small, green, leafy creature with a sad expression.",
        "It has a leaf on its back and is associated with the grass element.",
        "It has four limbs, two heads, and two eyes which are squinted and green in color.",
        "Greenleaf has a smooth skin texture and its body shape resembles a squirtle.",
        "It does not have wings, fins, or horns, but it does have a spike on its back."
    ],
    "Leafurtle": [
        "Leafurtle is a small, green, leafy creature with a sad expression.",
        "It has a leaf on its back and is associated with the grass element.",
        "It has four limbs, two heads, and two eyes which are squinted and green in color.",
        "Leafurtle has a smooth skin texture and its body shape resembles a squirtle.",
        "It does not have wings, fins, or horns, but it does have a spike on its back."
    ]
}


Bulbasaur_17
{
    "Squirtle": [
        "This image shows a small, green Pokemon called Squirtle.",
        "It has a spherical body with a rounded head and two squinty green eyes.",
        "The Pokemon has a sad facial expression and its mouth is in the shape of a slit.",
        "It has four limbs, each ending in a Squirtle-like shape.",
        "Squirtle has a unique feature, which is a backpack-like pouch on its back."
    ],
    "Squirtle-like creature": [
        "This image shows a small, green Pokemon called Squirtle-like creature.",
        "It has a spherical body with a rounded head and two squinty green eyes.",
        "The Pokemon has a sad facial expression and its mouth is in the shape of a slit.",
        "It has four limbs, each ending in a Squirtle-like shape.",
        "Squirtle-like creature has a unique feature, which is a backpack-like pouch on its back."
    ],
    "Green Pokemon": [
        "This image shows a small, green Pokemon called Green Pokemon.",
        "It has a spherical body with a rounded head and two squinty green eyes.",
        "The Pokemon has a sad facial expression and its mouth is in the shape of a slit.",
        "It has four limbs, each ending in a Squirtle-like shape.",
        "Green Pokemon has a unique feature, which is a backpack-like pouch on its back."
    ]
}


Raichu_18
{
    "Pikachu": [
        "This image shows a small, yellow pokemon called Pikachu.",
        "It has a Squirtle-like tail and a snout, and its body has special markings with a yellow color, a black tail, and a white t.",
        "Pikachu has a squint eye shape with yellow eyes and a smiley facial expression.",
        "It has two heads, two eyes, and four limbs, with a small and smooth skin texture.",
        "Pikachu is associated with the water element and has a unique feature of having a tail."
    ],
    "Pichu": [
        "This image shows a small, yellow pokemon called Pichu.",
        "It has a Squirtle-like tail and a snout, and its body has special markings with a yellow color, a black tail, and a white t.",
        "Pichu has a squint eye shape with yellow eyes and a smiley facial expression.",
        "It has two heads, two eyes, and four limbs, with a small and smooth skin texture.",
        "Pichu is associated with the water element and has a unique feature of having a tail."
    ],
    "Raichu": [
        "This image shows a small, yellow pokemon called Raichu.",
        "It has a Squirtle-like tail and a snout, and its body has special markings with a yellow color, a black tail, and a white t.",
        "Raichu has a squint eye shape with yellow eyes and a smiley facial expression.",
        "It has two heads, two eyes, and four limbs, with a small and smooth skin texture.",
        "Raichu is associated with the water element and has a unique feature of having a tail."
    ]
}


Raichu_19
{
    "PikaHorn": [
        "This image shows a small, brown pikachu with a snout-like shape and a pigtail tail.",
        "It has a squirtle-like pattern on its back.",
        "The pikachu has four limbs and two heads, with two squinty brown eyes and a slit mouth.",
        "It has a unique feature of a horn on its snout and a sad expression.",
        "The skin texture is smooth, and it is in the evolutionary stage of a pikachu."
    ],
    "Squirtchu": [
        "This image shows a small, brown pikachu with a snout-like shape and a pigtail tail.",
        "It has a squirtle-like pattern on its back.",
        "The pikachu has four limbs and two heads, with two squinty brown eyes and a slit mouth.",
        "It has a unique feature of a horn on its snout and a sad expression.",
        "The skin texture is smooth, and it is in the evolutionary stage of a pikachu."
    ],
    "Sadtail Pikachu": [
        "This image shows a small, brown pikachu with a snout-like shape and a pigtail tail.",
        "It has a squirtle-like pattern on its back.",
        "The pikachu has four limbs and two heads, with two squinty brown eyes and a slit mouth.",
        "It has a unique feature of a horn on its snout and a sad expression.",
        "The skin texture is smooth, and it is in the evolutionary stage of a pikachu."
    ]
}


Raichu_20
{
    "Pikachu": [
        "This is a small, orange and white Pokemon called Pikachu.",
        "It has a yellow body, a yellow head, and a yellow tail.",
        "It has two heads and two eyes, with a squint eye shape and yellow eye color.",
        "Pikachu has a small size and a smooth skin texture.",
        "It has a unique feature of a horn."
    ],
    "Pika": [
        "This is a small, orange and white Pokemon called Pikachu.",
        "It has a yellow body, a yellow head, and a yellow tail.",
        "It has two heads and two eyes, with a squint eye shape and yellow eye color.",
        "Pikachu has a small size and a smooth skin texture.",
        "It has a unique feature of a horn."
    ],
    "Sparkachu": [
        "This is a small, orange and white Pokemon called Pikachu.",
        "It has a yellow body, a yellow head, and a yellow tail.",
        "It has two heads and two eyes, with a squint eye shape and yellow eye color.",
        "Pikachu has a small size and a smooth skin texture.",
        "It has a unique feature of a horn."
    ]
}


Wartortle_21
{
  "Squirtle": [
    "A squirtle is a small-sized turtle-like Pokemon with a blue body and a white belly.",
    "It has a blue head with a squint-shaped blue eyes and a slit-like mouth.",
    "The Pokemon has two heads and four limbs.",
    "It is associated with the water element and has a tail shaped like a squirtle.",
    "It has smooth and shiny skin and a unique feature of having a shell."
  ],
  "Wartortle": [
    "A squirtle is a small-sized turtle-like Pokemon with a blue body and a white belly.",
    "It has a blue head with a squint-shaped blue eyes and a slit-like mouth.",
    "The Pokemon has two heads and four limbs.",
    "It is associated with the water element and has a tail shaped like a squirtle.",
    "It has smooth and shiny skin and a unique feature of having a shell."
  ],
  "Blastoise": [
    "A squirtle is a small-sized turtle-like Pokemon with a blue body and a white belly.",
    "It has a blue head with a squint-shaped blue eyes and a slit-like mouth.",
    "The Pokemon has two heads and four limbs.",
    "It is associated with the water element and has a tail shaped like a squirtle.",
    "It has smooth and shiny skin and a unique feature of having a shell."
  ]
}


Wartortle_22
{
   "Squirturtle": [
      "The pokemon in the image is a small, blue turtle-like creature with a squirtle pattern on its body.",
      "It has four limbs and two heads with squinted blue eyes and a slit-like mouth.",
      "The pokemon has a fairy element associated with it and special markings in the form of a squirtle on its back and a smooth skin texture.",
      "It is at an early evolutionary stage and does not have any wings, fins, or horns.",
      "Its unique feature is that it is a squirtle. The pokemon has a friendly facial expression with a smile."
   ],
   "Bluetail": [
      "The pokemon in the image is a small, blue turtle-like creature with a squirtle pattern on its body.",
      "It has four limbs and two heads with squinted blue eyes and a slit-like mouth.",
      "The pokemon has a fairy element associated with it and special markings in the form of a squirtle on its back and a smooth skin texture.",
      "It is at an early evolutionary stage and does not have any wings, fins, or horns.",
      "Its unique feature is that it is a squirtle. The pokemon has a friendly facial expression with a smile."
   ],
   "Fairesquirt": [
      "The pokemon in the image is a small, blue turtle-like creature with a squirtle pattern on its body.",
      "It has four limbs and two heads with squinted blue eyes and a slit-like mouth.",
      "The pokemon has a fairy element associated with it and special markings in the form of a squirtle on its back and a smooth skin texture.",
      "It is at an early evolutionary stage and does not have any wings, fins, or horns.",
      "Its unique feature is that it is a squirtle. The pokemon has a friendly facial expression with a smile."
   ]
}


Wartortle_23
{
    "Squirtle": [
        "This is a small, blue turtle-like pokemon with a white belly and head.",
        "It has four limbs that are shaped like a turtle's arms and a tail shaped like a squirtle.",
        "It has two heads and two blue squint-shaped eyes.",
        "The pokemon has a sad facial expression and a slit mouth.",
        "Its ears are in the shape of a 't' and it doesn't have any fins, horns, or crests/spikes."
    ],
    "Wartortle": [
        "This is a small, blue turtle-like pokemon with a white belly and head.",
        "It has four limbs that are shaped like a turtle's arms and a tail shaped like a squirtle.",
        "It has two heads and two blue squint-shaped eyes.",
        "The pokemon has a sad facial expression and a slit mouth.",
        "Its ears are in the shape of a 't' and it doesn't have any fins, horns, or crests/spikes."
    ],
    "Blastoise": [
        "This is a small, blue turtle-like pokemon with a white belly and head.",
        "It has four limbs that are shaped like a turtle's arms and a tail shaped like a squirtle.",
        "It has two heads and two blue squint-shaped eyes.",
        "The pokemon has a sad facial expression and a slit mouth.",
        "Its ears are in the shape of a 't' and it doesn't have any fins, horns, or crests/spikes."
    ]
}


Ivysaur_24
{
"Flower Squirtle": [
"A Squirtle with a flower on its head is a small, green Pokemon with a scaly texture.",
"It has a sad facial expression and squinted blue eyes.",
"The Pokemon has four limbs, two heads, and two eyes.",
"It has a slit mouth and a unique feature of a flower on its head.",
"The body pattern of this Squirtle includes a splotch of green on its back."
],
"Greenleaf Squirtle": [
"A Squirtle with a flower on its head is a small, green Pokemon with a scaly texture.",
"It has a sad facial expression and squinted blue eyes.",
"The Pokemon has four limbs, two heads, and two eyes.",
"It has a slit mouth and a unique feature of a flower on its head.",
"The body pattern of this Squirtle includes a splotch of green on its back."
],
"Sadpetal Squirtle": [
"A Squirtle with a flower on its head is a small, green Pokemon with a scaly texture.",
"It has a sad facial expression and squinted blue eyes.",
"The Pokemon has four limbs, two heads, and two eyes.",
"It has a slit mouth and a unique feature of a flower on its head.",
"The body pattern of this Squirtle includes a splotch of green on its back."
]
}


Ivysaur_25
{
    "Squirtle": [
        "This image shows a small blue Pokemon known as Squirtle.",
        "It has a leaf on its back and a body with a green head and a pink tail.",
        "Squirtle has four limbs, two heads, and two eyes.",
        "Its eyes are squinted and blue in color.",
        "The mouth is in the shape of a slit."
    ],
    "Wartortle": [
        "This image shows a small blue Pokemon known as Wartortle.",
        "It has a leaf on its back and a body with a green head and a pink tail.",
        "Wartortle has four limbs, two heads, and two eyes.",
        "Its eyes are squinted and blue in color.",
        "The mouth is in the shape of a slit."
    ],
    "Blastoise": [
        "This image shows a small blue Pokemon known as Blastoise.",
        "It has a leaf on its back and a body with a green head and a pink tail.",
        "Blastoise has four limbs, two heads, and two eyes.",
        "Its eyes are squinted and blue in color.",
        "The mouth is in the shape of a slit."
    ]
}


Ivysaur_26
{
    "Squirtle": [
        "This image is of a small, blue pokemon called Squirtle.",
        "It has a blue and green body pattern with a pink flower on its head.",
        "Squirtle has four limbs, two heads, and two squinty blue eyes.",
        "Its mouth has a slit shape and it has a tail specific to Squirtle.",
        "The pokemon is associated with a flower and has special markings in the form of a flower on its head."
    ],
    "Wartortle": [
        "This image is of a small, blue pokemon called Wartortle.",
        "It has a blue and green body pattern with a pink flower on its head.",
        "Wartortle has four limbs, two heads, and two squinty blue eyes.",
        "Its mouth has a slit shape and it has a tail specific to Wartortle.",
        "The pokemon is associated with a flower and has special markings in the form of a flower on its head."
    ],
    "Blastoise": [
        "This image is of a small, blue pokemon called Blastoise.",
        "It has a blue and green body pattern with a pink flower on its head.",
        "Blastoise has four limbs, two heads, and two squinty blue eyes.",
        "Its mouth has a slit shape and it has a tail specific to Blastoise.",
        "The pokemon is associated with a flower and has special markings in the form of a flower on its head."
    ]
}


Pikachu_27
{
  "Pikachu": [
    "Pikachu is a small, yellow Pokemon with a black nose and black eyes.",
    "It has a squinty eye shape and a slit mouth shape.",
    "The Pokemon has a stubby tail and two heads.",
    "It is associated with the element of electricity.",
    "Pikachu has a unique feature of a yellow head and a smooth skin texture."
  ],
  "Pichu": [
    "Pikachu is a small, yellow Pokemon with a black nose and black eyes.",
    "It has a squinty eye shape and a slit mouth shape.",
    "The Pokemon has a stubby tail and two heads.",
    "It is associated with the element of electricity.",
    "Pikachu has a unique feature of a yellow head and a smooth skin texture."
  ],
  "Raichu": [
    "Pikachu is a small, yellow Pokemon with a black nose and black eyes.",
    "It has a squinty eye shape and a slit mouth shape.",
    "The Pokemon has a stubby tail and two heads.",
    "It is associated with the element of electricity.",
    "Pikachu has a unique feature of a yellow head and a smooth skin texture."
  ]
}


Pikachu_28
{
"pikachu": [
"Summary: Pikachu is a small, yellow Pokémon with a body shape of a small yellow ball.",
"It has a yellow squinty eyes, a slit mouth, and a stubby tail.",
"It has two heads with two eyes each.",
"Pikachu has a smooth and shiny skin texture.",
"It is a unique Pokémon belonging to the evolutionary stage of Pikachu."
],
"Pika": [
"Summary: Pikachu is a small, yellow Pokémon with a body shape of a small yellow ball.",
"It has a yellow squinty eyes, a slit mouth, and a stubby tail.",
"It has two heads with two eyes each.",
"Pikachu has a smooth and shiny skin texture.",
"It is a unique Pokémon belonging to the evolutionary stage of Pikachu."
],
"Electricball": [
"Summary: Pikachu is a small, yellow Pokémon with a body shape of a small yellow ball.",
"It has a yellow squinty eyes, a slit mouth, and a stubby tail.",
"It has two heads with two eyes each.",
"Pikachu has a smooth and shiny skin texture.",
"It is a unique Pokémon belonging to the evolutionary stage of Pikachu."
]
}


Pikachu_29
{
    "Pikachu": [
        "The pokemon in the image is a yellow Pikachu, small in size with a yellow body, black head, and a black tail.",
        "It has four limbs and a squint eye shape with yellow eyes.",
        "The mouth has a slit shape.",
        "The Pikachu has a unique feature of a tail and it is at the evolutionary stage of a Pikachu.",
        "There are no fins, horns, or crests present. The pokemon has a sad facial expression and associated with the element of lightning."
    ],
    "Pichu": [
        "The pokemon in the image is a yellow Pichu, small in size with a yellow body, black head, and a black tail.",
        "It has four limbs and a squint eye shape with yellow eyes.",
        "The mouth has a slit shape.",
        "The Pichu has a unique feature of a tail and it is at an early evolutionary stage.",
        "There are no fins, horns, or crests present. The pokemon has a sad facial expression and associated with the element of lightning."
    ],
    "Raichu": [
        "The pokemon in the image is a yellow Raichu, small in size with a yellow body, black head, and a black tail.",
        "It has four limbs and a squint eye shape with yellow eyes.",
        "The mouth has a slit shape.",
        "The Raichu has a unique feature of a tail and it is at an advanced evolutionary stage.",
        "There are no fins, horns, or crests present. The pokemon has a sad facial expression and associated with the element of lightning."
    ]
}


==============================
		 Finished Post-processing
==============================
		 ---> total discovered names = 47
['Green Pokemon', 'Flamizard', 'Sylveon', 'Crestspike', 'Wartortle', 'Greenleaf', 'Swanbeak', 'Leafurtle', 'PikaHorn', 'Crestwing', 'Pidgeot', 'Squirtle-like creature', 'Hawkwing', 'Hawkbeak', 'Swanslash', 'Charmeleon', 'Fairesquirt', 'Ignisaur', 'Redhat', 'Squirturtle', 'Cyndaquil', 'Swanwing', 'Charmander', 'Squirtle', 'Sadtail Pikachu', 'Pikachu', 'Birdor', 'Greenleaf Squirtle', 'pikachu', 'Squirtchu', 'Lizardflare', 'Blastoise', 'Swaneye', 'Frogleaf', 'Pika', 'Raichu', 'Flower Squirtle', 'Sadpetal Squirtle', 'Sparkachu', 'Sandslash', 'Bluetail', 'Staraptor', 'Charizard', 'Pichu', 'Greened', 'Electricball', 'Swellow']

		 ---> total discovered names = 47
		 ---> number of failure entries = 0
END==============================

Namespace(config_file_env='./configs/env_machine.yml', config_file_expt='./configs/expts/pokemon_all.yml', alpha=0.7, N_tta=10, num_per_category='3', num_runs=10)
Number of GPUs: 1
Device ID: 0 Device Name: NVIDIA RTX A6000
['Green Pokemon', 'Flamizard', 'Sylveon', 'Crestspike', 'Wartortle', 'Greenleaf', 'Swanbeak', 'Leafurtle', 'PikaHorn', 'Crestwing', 'Pidgeot', 'Squirtle-like creature', 'Hawkwing', 'Hawkbeak', 'Swanslash', 'Charmeleon', 'Fairesquirt', 'Ignisaur', 'Redhat', 'Squirturtle', 'Cyndaquil', 'Swanwing', 'Charmander', 'Squirtle', 'Sadtail Pikachu', 'Pikachu', 'Birdor', 'Greenleaf Squirtle', 'pikachu', 'Squirtchu', 'Lizardflare', 'Blastoise', 'Swaneye', 'Frogleaf', 'Pika', 'Raichu', 'Flower Squirtle', 'Sadpetal Squirtle', 'Sparkachu', 'Sandslash', 'Bluetail', 'Staraptor', 'Charizard', 'Pichu', 'Greened', 'Electricball', 'Swellow']
0it [00:00, ?it/s]1it [00:00,  6.11it/s]4it [00:00, 11.18it/s]6it [00:00, 12.91it/s]9it [00:00, 15.26it/s]11it [00:00, 15.25it/s]13it [00:00, 15.77it/s]15it [00:01, 14.88it/s]17it [00:01, 15.07it/s]19it [00:01, 15.79it/s]22it [00:01, 18.63it/s]24it [00:01, 16.27it/s]26it [00:01, 16.99it/s]29it [00:01, 18.00it/s]30it [00:01, 15.94it/s]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:01<00:00,  1.89s/it]100%|██████████| 1/1 [00:01<00:00,  1.98s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:01<00:00,  1.65s/it]100%|██████████| 1/1 [00:01<00:00,  1.77s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.789372444152832


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 71.53846153846153
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 81.95026331016642
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 65.98797952066484


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 78.93724060058594
=========================          END          =========================
0it [00:00, ?it/s]2it [00:00, 18.44it/s]4it [00:00, 12.89it/s]7it [00:00, 17.71it/s]9it [00:00, 16.02it/s]11it [00:00, 16.16it/s]13it [00:00, 16.96it/s]15it [00:00, 15.66it/s]17it [00:01, 15.15it/s]19it [00:01, 16.15it/s]21it [00:01, 15.40it/s]23it [00:01, 15.87it/s]25it [00:01, 16.49it/s]27it [00:01, 15.86it/s]29it [00:01, 16.40it/s]30it [00:01, 16.16it/s]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.24s/it]100%|██████████| 1/1 [00:02<00:00,  2.37s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.38s/it]100%|██████████| 1/1 [00:02<00:00,  2.54s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.7823934555053711


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 72.3076923076923
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 82.44214092823508
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 66.1134328358209


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 78.23934936523438
=========================          END          =========================
0it [00:00, ?it/s]2it [00:00, 17.25it/s]4it [00:00, 12.19it/s]6it [00:00, 13.30it/s]8it [00:00, 14.68it/s]10it [00:00, 15.31it/s]12it [00:00, 16.40it/s]14it [00:00, 15.12it/s]16it [00:01, 16.16it/s]19it [00:01, 17.60it/s]22it [00:01, 19.08it/s]24it [00:01, 18.99it/s]26it [00:01, 18.85it/s]28it [00:01, 18.32it/s]30it [00:01, 17.21it/s]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.05s/it]100%|██████████| 1/1 [00:02<00:00,  2.17s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.66s/it]100%|██████████| 1/1 [00:02<00:00,  2.80s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.7877997756004333


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 70.0
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 81.37838283145075
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 65.03859442769976


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 78.77997589111328
=========================          END          =========================
0it [00:00, ?it/s]1it [00:00,  6.09it/s]2it [00:00,  4.38it/s]3it [00:00,  3.81it/s]4it [00:01,  3.12it/s]5it [00:01,  3.68it/s]6it [00:01,  4.48it/s]8it [00:01,  7.01it/s]10it [00:01,  9.17it/s]12it [00:01, 11.47it/s]14it [00:01, 12.54it/s]16it [00:02, 12.60it/s]18it [00:02, 13.22it/s]21it [00:02, 15.77it/s]23it [00:02, 15.40it/s]26it [00:02, 16.81it/s]29it [00:02, 18.51it/s]30it [00:02, 10.55it/s]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.65s/it]100%|██████████| 1/1 [00:02<00:00,  2.83s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.43s/it]100%|██████████| 1/1 [00:02<00:00,  2.59s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.7855166792869568


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 71.53846153846153
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 82.47900596167906
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 66.20196864746629


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 78.55166625976562
=========================          END          =========================
0it [00:00, ?it/s]2it [00:00, 16.81it/s]4it [00:00, 12.41it/s]6it [00:00, 13.99it/s]8it [00:00, 14.69it/s]10it [00:00, 13.55it/s]12it [00:00, 14.91it/s]14it [00:00, 14.42it/s]16it [00:01, 14.60it/s]18it [00:01, 15.33it/s]20it [00:01, 16.32it/s]23it [00:01, 17.46it/s]25it [00:01, 17.99it/s]27it [00:01, 16.96it/s]29it [00:01, 17.22it/s]30it [00:01, 15.84it/s]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:01<00:00,  1.78s/it]100%|██████████| 1/1 [00:01<00:00,  1.91s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:01<00:00,  1.79s/it]100%|██████████| 1/1 [00:01<00:00,  1.89s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.786565363407135


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 72.3076923076923
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 82.28536165665598
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 66.24465102552752


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 78.65653991699219
=========================          END          =========================
0it [00:00, ?it/s]1it [00:00,  4.57it/s]2it [00:00,  5.23it/s]3it [00:00,  2.96it/s]4it [00:01,  3.04it/s]5it [00:01,  3.80it/s]6it [00:01,  4.05it/s]7it [00:02,  3.22it/s]8it [00:02,  3.76it/s]11it [00:02,  6.92it/s]14it [00:02,  9.59it/s]16it [00:02, 11.24it/s]18it [00:02, 12.47it/s]20it [00:02, 13.75it/s]22it [00:02, 14.48it/s]24it [00:03, 15.42it/s]26it [00:03, 15.92it/s]29it [00:03, 16.54it/s]30it [00:03,  8.73it/s]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.28s/it]100%|██████████| 1/1 [00:02<00:00,  2.44s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.59s/it]100%|██████████| 1/1 [00:02<00:00,  2.76s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.7819525599479675


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 71.53846153846153
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 81.33159445485518
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 65.07581921739774


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 78.19525909423828
=========================          END          =========================
0it [00:00, ?it/s]1it [00:00,  9.93it/s]4it [00:00, 11.66it/s]6it [00:00, 13.13it/s]8it [00:00, 14.34it/s]10it [00:00, 13.98it/s]13it [00:00, 16.07it/s]15it [00:01, 14.99it/s]17it [00:01, 14.80it/s]20it [00:01, 16.80it/s]22it [00:01, 16.69it/s]24it [00:01, 16.39it/s]26it [00:01, 16.80it/s]29it [00:01, 17.87it/s]30it [00:01, 15.80it/s]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.13s/it]100%|██████████| 1/1 [00:02<00:00,  2.26s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.11s/it]100%|██████████| 1/1 [00:02<00:00,  2.25s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.7775742411613464


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 70.0
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 80.91855288838559
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 64.16666666666667


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 77.7574234008789
=========================          END          =========================
0it [00:00, ?it/s]3it [00:00, 22.34it/s]6it [00:00, 15.54it/s]8it [00:00, 16.85it/s]10it [00:00, 16.72it/s]12it [00:00, 16.58it/s]14it [00:00, 15.88it/s]16it [00:00, 15.27it/s]19it [00:01, 17.28it/s]22it [00:01, 18.86it/s]24it [00:01, 18.49it/s]26it [00:01, 17.56it/s]29it [00:01, 18.69it/s]30it [00:01, 17.35it/s]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.61s/it]100%|██████████| 1/1 [00:02<00:00,  2.76s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.80s/it]100%|██████████| 1/1 [00:02<00:00,  2.94s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.7731141448020935


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 69.23076923076923
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 80.29294895083979
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 63.167142543378


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 77.31141662597656
=========================          END          =========================
0it [00:00, ?it/s]2it [00:00, 19.61it/s]4it [00:00, 11.49it/s]6it [00:00, 14.02it/s]8it [00:00, 15.34it/s]10it [00:00, 16.42it/s]12it [00:00, 16.07it/s]14it [00:00, 15.23it/s]16it [00:01, 14.41it/s]18it [00:01, 15.21it/s]20it [00:01, 16.41it/s]23it [00:01, 19.01it/s]25it [00:01, 17.00it/s]28it [00:01, 18.90it/s]30it [00:01, 16.75it/s]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.17s/it]100%|██████████| 1/1 [00:02<00:00,  2.29s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.22s/it]100%|██████████| 1/1 [00:02<00:00,  2.37s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.7787977457046509


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 69.23076923076923
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 79.52636310365648
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 62.59755734286565


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 77.87977600097656
=========================          END          =========================
0it [00:00, ?it/s]2it [00:00, 19.05it/s]4it [00:00, 12.02it/s]7it [00:00, 16.80it/s]10it [00:00, 18.00it/s]13it [00:00, 19.96it/s]16it [00:01, 12.47it/s]18it [00:01, 13.78it/s]21it [00:01, 16.12it/s]23it [00:01, 16.56it/s]25it [00:01, 17.19it/s]27it [00:01, 16.71it/s]30it [00:01, 19.21it/s]30it [00:01, 16.63it/s]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.21s/it]100%|██████████| 1/1 [00:02<00:00,  2.32s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.20s/it]100%|██████████| 1/1 [00:02<00:00,  2.33s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.7864943742752075


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 71.53846153846153
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 82.1136700515549
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 66.36097275124524


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 78.6494369506836
=========================          END          =========================


========================= ViLang Final Results of 10 runs, w/ 3 imgs per class=========================


[Clustering]
Clustering ACC: 70.92307692307693
Semantic ACC:   78.29580688476562
=========================          END          =========================
Namespace(mode='describe', config_file_env='./configs/env_machine.yml', config_file_expt='./configs/expts/pokemon_all.yml', num_per_category='3')
{'setup': 'ours', 'experiment': 5.0, 'dataset_name': 'pokemon', 'num_classes': 10, 'num_base': 5, 'num_novel': 5, 'seed': 1, 'batch_size': 256, 'clustering_method': 'multi_clip_voting', 'model_size': 'ViT-B/16', 'model_size_vqa': 'FlanT5-XXL', 'model_type_llm': 'gpt-3.5-turbo', 'image_size': 224, 'verbose': False, 'host': 'chaos', 'num_workers': 16, 'device': 'cuda', 'device_count': '1', 'device_id': '0', 'data_dir': './datasets/pokemon', 'expt_dir': './experiments/pokemon', 'expt_dir_describe': './experiments/pokemon/describe', 'path_vqa_questions': './experiments/pokemon/describe/pokemon_vqa_questions', 'path_vqa_answers': './experiments/pokemon/describe/pokemon_attributes_pairs', 'path_llm_prompts': './experiments/pokemon/describe/pokemon_llm_prompts', 'expt_dir_guess': './experiments/pokemon/guess', 'path_llm_replies_raw': './experiments/pokemon/guess/pokemon_llm_replies_raw', 'path_llm_replies_jsoned': './experiments/pokemon/guess/pokemon_llm_replies_jsoned', 'path_llm_gussed_names': './experiments/pokemon/guess/pokemon_llm_gussed_names', 'expt_dir_grouping': './experiments/pokemon/grouping'}
Loading checkpoint shards:   0%|          | 0/5 [00:00<?, ?it/s]Loading checkpoint shards:  20%|██        | 1/5 [00:02<00:08,  2.08s/it]Loading checkpoint shards:  40%|████      | 2/5 [00:04<00:06,  2.07s/it]Loading checkpoint shards:  60%|██████    | 3/5 [00:06<00:04,  2.02s/it]Loading checkpoint shards:  80%|████████  | 4/5 [00:08<00:01,  1.98s/it]Loading checkpoint shards: 100%|██████████| 5/5 [00:09<00:00,  1.90s/it]Loading checkpoint shards: 100%|██████████| 5/5 [00:09<00:00,  1.96s/it]
0it [00:00, ?it/s]1it [00:06,  6.34s/it]2it [00:12,  6.01s/it]0: label=2
==============================
Charmander_0 with label 2
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a small orange pokemon'''
        Attributes List:
        - '''color''': '''orange'''
        - '''size''': '''small'''
        - '''shape''': '''a small, orange, squirtle-like creature'''
        - '''body pattern''': '''a small, orange, scaly, lizard-like creature with'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''orange'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a stubby tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''fire'''
        - '''special markings''': '''the pokemon has a snout with a horn on it'''
        - '''ear shape''': '''a frog'''
        - '''skin texture''': '''smooth and shiny'''
        - '''evolutionary stage''': '''a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a t-shaped arm'''
        - '''facial expression''': '''a sad expression'''
        - '''unique feature''': '''it has a fire-type'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

1: label=2
==============================
Charmander_1 with label 2
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a small orange pokemon'''
        Attributes List:
        - '''color''': '''orange'''
        - '''size''': '''it is small'''
        - '''shape''': '''a small, orange, and yellow lizard'''
        - '''body pattern''': '''a scaly, squarish, snout-like'''
        - '''number of limbs''': '''four limbs'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''orange'''
        - '''mouth shape''': '''a snout'''
        - '''tail shape''': '''a slanted snout'''
        - '''number of heads''': '''two heads'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''fire'''
        - '''special markings''': '''the pokemon has a red nose and a yellow tummy'''
        - '''ear shape''': '''a frog'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a t-shaped arm'''
        - '''facial expression''': '''a smile'''
        - '''unique feature''': '''it has a tail'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

2: label=2
==============================
Charmander_2 with label 2
==============================

3it [00:17,  5.89s/it]4it [00:24,  5.99s/it]5it [00:29,  5.80s/it]
        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''brown'''
        - '''size''': '''it is small'''
        - '''shape''': '''it is a small, round, and stubby'''
        - '''body pattern''': '''it has a spherical head, a spherical body'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''the eyes are a squint'''
        - '''eye color''': '''blue'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a stubby tail with a rounded tip'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''fire'''
        - '''special markings''': '''the pokemon has a white belly and a blue tail'''
        - '''ear shape''': '''a spherical shape'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a t'''
        - '''arm shape''': '''the arms are a t shape'''
        - '''facial expression''': '''a smile'''
        - '''unique feature''': '''it has a flame on its head'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

3: label=9
==============================
Pidgeotto_3 with label 9
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a sylveon'''
        Attributes List:
        - '''color''': '''brown and pink'''
        - '''size''': '''it is a medium size'''
        - '''shape''': '''a bird with a long neck and a long tail'''
        - '''body pattern''': '''a tan body with a red head and wings'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''pink'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a swan-like tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a bird'''
        - '''special markings''': '''the pokemon has a red crest on its head'''
        - '''ear shape''': '''a spherical shape'''
        - '''skin texture''': '''a scaly texture'''
        - '''evolutionary stage''': '''a sylveon'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a slanted wing'''
        - '''arm shape''': '''a wing shape'''
        - '''facial expression''': '''a smirk'''
        - '''unique feature''': '''a bird with a long beak'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

4: label=9
==============================
Pidgeotto_4 with label 9
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a sylveon'''
        Attributes List:
        - '''color''': '''pink and brown'''
        - '''size''': '''it is a medium size'''
        - '''shape''': '''a bird'''
        - '''body pattern''': '''a bird with a long neck and a long tail'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a hawk's eye'''
        - '''eye color''': '''brown'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a swan'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a bird'''
        - '''special markings''': '''the pokemon has a red and yellow head, a white body, and a'''
        - '''ear shape''': '''a swan'''
        - '''skin texture''': '''a scaly texture'''
        - '''evolutionary stage''': '''a sylveon'''
        - '''number of wings''': '''two wings'''
        - '''leg shape''': '''a swan-like leg shape'''
        - '''arm shape''': '''a wing shape'''
        - '''facial expression''': '''a smirk'''
        - '''unique feature''': '''it has wings'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

5: label=9
==============================6it [00:34,  5.53s/it]7it [00:41,  5.87s/it]
Pidgeotto_5 with label 9
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''brown and red'''
        - '''size''': '''it is small'''
        - '''shape''': '''a bird'''
        - '''body pattern''': '''a brown body with a red head'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a hawk'''
        - '''eye color''': '''red'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a swan-like tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a bird'''
        - '''special markings''': '''a red hat and a white crest on its head'''
        - '''ear shape''': '''a spherical shape'''
        - '''skin texture''': '''smooth and shiny'''
        - '''evolutionary stage''': '''a snorlax'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle pokemon'''
        - '''arm shape''': '''a wing shape'''
        - '''facial expression''': '''a smug look'''
        - '''unique feature''': '''it has a red hat'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''yes'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

6: label=3
==============================
Charmeleon_6 with label 3
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''red'''
        - '''size''': '''it is small'''
        - '''shape''': '''it is a red and yellow pokemon'''
        - '''body pattern''': '''it has a red body with a white belly and a white tail'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''the eyes are a squint'''
        - '''eye color''': '''red'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''it is a stubby tail with a curved tip'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''fire'''
        - '''special markings''': '''the pokemon has a red body with a white belly and a white tail'''
        - '''ear shape''': '''the ear shape is a triangle'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a thigh and a shin'''
        - '''arm shape''': '''the arms are shaped like a t'''
        - '''facial expression''': '''a smirk'''
        - '''unique feature''': '''it has a tail that is on fire'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

7: label=3
==============================
Charmeleon_7 with label 3
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a red tawny tawny'''
        Attributes List:
        - '''color''': '''red'''
        - '''size''': '''it is small'''
        - '''shape''': '''a red and yellow lizard'''
        - '''body pattern''': '''a red and yellow tiger-like pattern'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''red'''
        - '''mouth shape''': '''a snout'''
        - '''tail shape''': '''a slanted tadpole tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''fire'''
        - '''special markings''': '''the pokemon has a red tummy and a white belly'''
        - '''ear shape''': '''a frog'''
        - '''skin texture''': '''a red lizard'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a t-shaped arm'''
        - '''facial expression''': '''a smirk'''
        - '''unique feature''': '''it has a fire-type'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

8it [00:47,  5.90s/it]9it [00:52,  5.71s/it]10it [00:57,  5.69s/it]END==============================

8: label=3
==============================
Charmeleon_8 with label 3
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a red pokemon with fire on its back'''
        Attributes List:
        - '''color''': '''red'''
        - '''size''': '''it is small'''
        - '''shape''': '''a red and yellow lizard'''
        - '''body pattern''': '''a red and white striped body with a black belly'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''red'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a stubby tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''fire'''
        - '''special markings''': '''the pokemon has a red body with a white belly and a white tail'''
        - '''ear shape''': '''a slanted triangle'''
        - '''skin texture''': '''a red lizard'''
        - '''evolutionary stage''': '''a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a t-shaped arm'''
        - '''facial expression''': '''angry'''
        - '''unique feature''': '''it has a flame on its head'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

9: label=1
==============================
Ivysaur_9 with label 1
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''blue'''
        - '''size''': '''it is small'''
        - '''shape''': '''a squirtle'''
        - '''body pattern''': '''a blue and green squirtle with a pink flower on its head'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''blue'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a flower'''
        - '''special markings''': '''the pokemon has a flower on its head'''
        - '''ear shape''': '''a squirtle'''
        - '''skin texture''': '''a scaly texture'''
        - '''evolutionary stage''': '''a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a squirtle'''
        - '''facial expression''': '''a sad expression'''
        - '''unique feature''': '''it has a flower on its head'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

10: label=1
==============================
Ivysaur_10 with label 1
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''green'''
        - '''size''': '''it is small'''
        - '''shape''': '''a squirtle'''
        - '''body pattern''': '''a squirtle with a flower on its head'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''green'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''grass'''
        - '''special markings''': '''the pokemon has a snout with a horn and a tail'''
        - '''ear shape''': '''a squirtle'''
        - '''skin texture''': '''a scaly texture'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a twig'''
        - '''facial expression''': '''a sad expression'''
        - '''unique feature''': '''it has a flower on its head'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

11it [01:03,  5.67s/it]12it [01:09,  5.87s/it]13it [01:15,  5.87s/it]END==============================

11: label=1
==============================
Ivysaur_11 with label 1
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''blue'''
        - '''size''': '''it is small'''
        - '''shape''': '''it is a small blue pokemon with a leaf on its back'''
        - '''body pattern''': '''it has a blue body with a green head and a pink tail'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''the eyes are a squint'''
        - '''eye color''': '''blue'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''the pokemon is a squirtle'''
        - '''special markings''': '''the pokemon has a green head, a blue body, and a pink tail'''
        - '''ear shape''': '''a squirtle'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a thigh and a thigh'''
        - '''arm shape''': '''the pokemon has a squirtle arm shape'''
        - '''facial expression''': '''a sad expression'''
        - '''unique feature''': '''it has a flower on its head'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

12: label=6
==============================
Pikachu_12 with label 6
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''pikachu'''
        Attributes List:
        - '''color''': '''yellow'''
        - '''size''': '''it is small'''
        - '''shape''': '''a small yellow pokemon'''
        - '''body pattern''': '''it has a yellow body with a black head and a black tail'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''yellow'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a slanted squirt tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''grass'''
        - '''special markings''': '''the pokemon has a yellow body with a black stripe on the side of its'''
        - '''ear shape''': '''a ear shape of a t'''
        - '''skin texture''': '''smooth'''
        - '''evolutionary stage''': '''it is a pikachu'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a t-shape'''
        - '''facial expression''': '''a sad expression'''
        - '''unique feature''': '''it has a tail'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

13: label=6
==============================
Pikachu_13 with label 6
==============================

14it [01:21,  5.76s/it]15it [01:26,  5.65s/it]16it [01:31,  5.43s/it]
        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''pikachu'''
        Attributes List:
        - '''color''': '''yellow'''
        - '''size''': '''it is small'''
        - '''shape''': '''a yellow pokemon with a black nose'''
        - '''body pattern''': '''a yellow body with black eyes and a black nose'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''yellow'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a stubby tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a pokemon'''
        - '''special markings''': '''the pokemon has a black stripe on its forehead'''
        - '''ear shape''': '''a squished triangle'''
        - '''skin texture''': '''smooth'''
        - '''evolutionary stage''': '''pikachu'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a slanted triangle'''
        - '''facial expression''': '''a pikachu with a smile on his face'''
        - '''unique feature''': '''it has a yellow head'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

14: label=6
==============================
Pikachu_14 with label 6
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''pikachu'''
        Attributes List:
        - '''color''': '''yellow'''
        - '''size''': '''it is small'''
        - '''shape''': '''it is a small yellow ball'''
        - '''body pattern''': '''it has a yellow body with a black head and a black tail'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''yellow'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a stubby tail'''
        - '''number of heads''': '''two heads'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a ball'''
        - '''special markings''': '''the pokemon has a white belly and a black tail'''
        - '''ear shape''': '''a ear shape of a squirtle'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a pikachu'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a t'''
        - '''arm shape''': '''it is a squirtle'''
        - '''facial expression''': '''a smile'''
        - '''unique feature''': '''it is a pikachu'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

15: label=4
==============================
Squirtle_15 with label 4
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a small turtle'''
        Attributes List:
        - '''color''': '''blue and yellow'''
        - '''size''': '''small'''
        - '''shape''': '''a turtle'''
        - '''body pattern''': '''a turtle with a blue head and a yellow belly'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''blue'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''sand'''
        - '''special markings''': '''the pokemon has a blue and yellow shell'''
        - '''ear shape''': '''a teddy bear'''
        - '''skin texture''': '''smooth'''
        - '''evolutionary stage''': '''a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a t-shape'''
        - '''facial expression''': '''a sad expression'''
        - '''unique feature''': '''it is a turtle'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

16: label=4
==============================
Squirtle_16 with label 4
17it [01:37,  5.44s/it]18it [01:43,  5.64s/it]==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''blue'''
        - '''size''': '''it is small'''
        - '''shape''': '''a turtle'''
        - '''body pattern''': '''it is a squirtle'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''blue'''
        - '''mouth shape''': '''a snout'''
        - '''tail shape''': '''a squirtle'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''water'''
        - '''special markings''': '''the pokemon has a blue head, a blue body, and a blue tail'''
        - '''ear shape''': '''a squirtle'''
        - '''skin texture''': '''it is smooth and shiny'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''it is a squirtle'''
        - '''facial expression''': '''a smile'''
        - '''unique feature''': '''it is a squirtle'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

17: label=4
==============================
Squirtle_17 with label 4
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a turtle'''
        Attributes List:
        - '''color''': '''blue'''
        - '''size''': '''it is a small turtle'''
        - '''shape''': '''it is a turtle'''
        - '''body pattern''': '''it is a turtle pokemon'''
        - '''number of limbs''': '''four limbs'''
        - '''eye shape''': '''the eye shape is a squint'''
        - '''eye color''': '''blue'''
        - '''mouth shape''': '''the mouth shape of the pokemon in this image is a snout'''
        - '''tail shape''': '''it is a turtle'''
        - '''number of heads''': '''two heads'''
        - '''number of eyes''': '''two eyes'''
        - '''associated element''': '''a turtle'''
        - '''special markings''': '''the pokemon has a blue shell with a brown head and a brown body with'''
        - '''ear shape''': '''the ear shape is a t'''
        - '''skin texture''': '''the skin texture is smooth and shiny'''
        - '''evolutionary stage''': '''the pokemon in this image is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a t'''
        - '''arm shape''': '''the arm shape is a t'''
        - '''facial expression''': '''a turtle pokemon'''
        - '''unique feature''': '''it is a turtle'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

18: label=5
==============================
Wartortle_18 with label 5
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''blue'''
        - '''size''': '''it is small'''
        - '''shape''': '''a turtle'''
        - '''body pattern''': '''it has a spherical body with a spherical head'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''blue'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''water'''
        - '''special markings''': '''the pokemon has a blue body with a white belly and a blue head'''
        - '''ear shape''': '''a squirtle'''
        - '''skin texture''': '''it is smooth and shiny'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''it is a squirtle'''
        - '''facial expression''': '''a smirk'''
        - '''unique feature''': '''it has a shell'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''yes'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

19it [01:49,  5.74s/it]20it [01:55,  5.79s/it]21it [02:01,  5.94s/it]END==============================

19: label=5
==============================
Wartortle_19 with label 5
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a pokemon that is a turtle'''
        Attributes List:
        - '''color''': '''blue'''
        - '''size''': '''it is a small turtle'''
        - '''shape''': '''it is a turtle'''
        - '''body pattern''': '''it has a blue body with a white belly and a white head'''
        - '''number of limbs''': '''four limbs'''
        - '''eye shape''': '''the eye shape is a squint'''
        - '''eye color''': '''blue'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''it is a squirtle'''
        - '''number of heads''': '''two heads'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a turtle'''
        - '''special markings''': '''the pokemon has a blue body with a white belly and a white head with'''
        - '''ear shape''': '''the ear shape is a t'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a t'''
        - '''arm shape''': '''the arm shape is a t'''
        - '''facial expression''': '''a turtle pokemon'''
        - '''unique feature''': '''it has a shell'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

20: label=5
==============================
Wartortle_20 with label 5
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''person, person, person, person, person, person, person, person, person, person'''
        Attributes List:
        - '''color''': '''blue'''
        - '''size''': '''it is a small pokemon'''
        - '''shape''': '''a turtle'''
        - '''body pattern''': '''a squirtle with a squirtle on its'''
        - '''number of limbs''': '''four limbs'''
        - '''eye shape''': '''a person'''
        - '''eye color''': '''blue'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a twig'''
        - '''special markings''': '''the pokemon has a squirtle on its back, and a'''
        - '''ear shape''': '''a squirtle'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''person, person, person, person, person, person, person, person, person, person'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a thigh and a thigh'''
        - '''arm shape''': '''a teddy bear'''
        - '''facial expression''': '''a smile'''
        - '''unique feature''': '''it is a squirtle'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

21: label=8
==============================
Pidgey_21 with label 8
==============================

22it [02:07,  5.92s/it]23it [02:12,  5.75s/it]
        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a bird pokemon'''
        Attributes List:
        - '''color''': '''brown and white'''
        - '''size''': '''it is a small bird'''
        - '''shape''': '''it is a bird'''
        - '''body pattern''': '''it is a bird with a brown body and white head'''
        - '''number of limbs''': '''four limbs'''
        - '''eye shape''': '''the eyes are a squint'''
        - '''eye color''': '''brown eyes'''
        - '''mouth shape''': '''the mouth shape is a slit'''
        - '''tail shape''': '''it is a swan'''
        - '''number of heads''': '''two heads'''
        - '''number of eyes''': '''two eyes'''
        - '''associated element''': '''bird'''
        - '''special markings''': '''the bird has a white crest on its head, and a white wing patch'''
        - '''ear shape''': '''the ear shape is a triangle'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''the pokemon in this image is a snorlax'''
        - '''number of wings''': '''two wings'''
        - '''leg shape''': '''the leg shape is a squirtle'''
        - '''arm shape''': '''the arm shape is a wing'''
        - '''facial expression''': '''a bird pokemon'''
        - '''unique feature''': '''it has a beak'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

22: label=8
==============================
Pidgey_22 with label 8
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a sylveon'''
        Attributes List:
        - '''color''': '''brown and white'''
        - '''size''': '''it is a medium size'''
        - '''shape''': '''a bird'''
        - '''body pattern''': '''it is a bird with a brown body and a white head'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a hawk'''
        - '''eye color''': '''brown'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a swan'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a bird'''
        - '''special markings''': '''the pokemon has a brown body with a white head and a brown tail'''
        - '''ear shape''': '''a spherical shape'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''a sylveon'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a squirtle'''
        - '''arm shape''': '''it is a swan'''
        - '''facial expression''': '''a hawk'''
        - '''unique feature''': '''it has a long neck'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

23: label=8
==============================
Pidgey_23 with label 8
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a bird'''
        Attributes List:
        - '''color''': '''brown and white'''
        - '''size''': '''it is a medium size'''
        - '''shape''': '''a bird'''
        - '''body pattern''': '''it is a bird'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a hawk'''
        - '''eye color''': '''brown'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a swan'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a bird'''
        - '''special markings''': '''the bird has a white crest on its head'''
        - '''ear shape''': '''a spherical shape'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''a sylveon'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a squirtle'''
        - '''arm shape''': '''it is a swan'''
        - '''facial expression''': '''a bird with a smirk'''
        - '''unique feature''': '''it is a bird'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

24it [02:17,  5.51s/it]25it [02:23,  5.51s/it]26it [02:28,  5.50s/it]END==============================

24: label=0
==============================
Bulbasaur_24 with label 0
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''green'''
        - '''size''': '''it is small'''
        - '''shape''': '''it is a green and red pokemon'''
        - '''body pattern''': '''a green body with a red head and a red tail'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''green'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a pokemon'''
        - '''special markings''': '''the pokemon has a green body with a red nose and eyes'''
        - '''ear shape''': '''a frog'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a thigh shape'''
        - '''arm shape''': '''the arms are shaped like a t'''
        - '''facial expression''': '''a smile'''
        - '''unique feature''': '''it has a green body and red eyes'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

25: label=0
==============================
Bulbasaur_25 with label 0
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''blue'''
        - '''size''': '''it is small'''
        - '''shape''': '''a small, green, leafy creature'''
        - '''body pattern''': '''a spherical body with a tail'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''green'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''leaf'''
        - '''special markings''': '''the pokemon has a green leaf on its back'''
        - '''ear shape''': '''a squirtle'''
        - '''skin texture''': '''smooth'''
        - '''evolutionary stage''': '''a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a squirtle'''
        - '''facial expression''': '''a sad expression'''
        - '''unique feature''': '''it has a leaf on its back'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

26: label=0
==============================
Bulbasaur_26 with label 0
==============================

27it [02:34,  5.64s/it]28it [02:40,  5.75s/it]
        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''green'''
        - '''size''': '''it is small'''
        - '''shape''': '''a small, green, squirtle-like creature'''
        - '''body pattern''': '''a spherical body with a rounded head and a s'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''green'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''grass'''
        - '''special markings''': '''the pokemon has a large green pouch on its back'''
        - '''ear shape''': '''a squirtle'''
        - '''skin texture''': '''a scaly texture'''
        - '''evolutionary stage''': '''a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a squirtle'''
        - '''facial expression''': '''a sad expression'''
        - '''unique feature''': '''it has a backpack'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

27: label=7
==============================
Raichu_27 with label 7
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''pikachu'''
        Attributes List:
        - '''color''': '''yellow'''
        - '''size''': '''it is small'''
        - '''shape''': '''it is a small, yellow, and brown pokemon'''
        - '''body pattern''': '''it has a squirtle tail and a squirt'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''yellow'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a pokemon that is a squirtle'''
        - '''special markings''': '''the pokemon has a yellow body with a black tail and a white t'''
        - '''ear shape''': '''a squiggly tail'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a pikachu'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a t'''
        - '''arm shape''': '''the arm shape is a t'''
        - '''facial expression''': '''a smile'''
        - '''unique feature''': '''it has a tail'''
        - '''body posturetail presence''': '''yes'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

28: label=7
==============================
Raichu_28 with label 7
==============================

29it [02:46,  5.75s/it]30it [02:51,  5.75s/it]30it [02:51,  5.73s/it]

        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''pikachu, person, person, person, person, person, person, person, person'''
        Attributes List:
        - '''color''': '''orange and white'''
        - '''size''': '''it is small'''
        - '''shape''': '''it is a small, yellow, and brown pokemon'''
        - '''body pattern''': '''it is a squirtle'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''yellow'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a pig tail'''
        - '''number of heads''': '''two heads'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a pokemon'''
        - '''special markings''': '''the pokemon has a yellow head, a yellow body, and a yellow tail'''
        - '''ear shape''': '''a squished ear shape'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a pikachu'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a t'''
        - '''arm shape''': '''it is a teddy bear'''
        - '''facial expression''': '''sad'''
        - '''unique feature''': '''it has a horn on its head'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

29: label=7
==============================
Raichu_29 with label 7
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a pikachu'''
        Attributes List:
        - '''color''': '''brown'''
        - '''size''': '''it is small'''
        - '''shape''': '''a small, stubby, snoutlike creature with a long'''
        - '''body pattern''': '''it has a squirtle like pattern on its back'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''brown'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a pig tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a pokemon'''
        - '''special markings''': '''the pokemon has a snout with a horn on it, and'''
        - '''ear shape''': '''a squished ear'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a pikachu'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a thigh and a thigh'''
        - '''arm shape''': '''the arm shape is a t'''
        - '''facial expression''': '''a smirk'''
        - '''unique feature''': '''it has a tail'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''yes'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

Succ. dumped attribute values to ./experiments/pokemon/describe/pokemon_attributes_pairs_3
Succ. dumped LLM prompts  to ./experiments/pokemon/describe/pokemon_llm_prompts_3
Namespace(mode='guess', config_file_env='./configs/env_machine.yml', config_file_expt='./configs/expts/pokemon_all.yml', num_per_category='3')
{'setup': 'ours', 'experiment': 5.0, 'dataset_name': 'pokemon', 'num_classes': 10, 'num_base': 5, 'num_novel': 5, 'seed': 1, 'batch_size': 256, 'clustering_method': 'multi_clip_voting', 'model_size': 'ViT-B/16', 'model_size_vqa': 'FlanT5-XXL', 'model_type_llm': 'gpt-3.5-turbo', 'image_size': 224, 'verbose': False, 'host': 'chaos', 'num_workers': 16, 'device': 'cuda', 'device_count': '1', 'device_id': '0', 'data_dir': './datasets/pokemon', 'expt_dir': './experiments/pokemon', 'expt_dir_describe': './experiments/pokemon/describe', 'path_vqa_questions': './experiments/pokemon/describe/pokemon_vqa_questions', 'path_vqa_answers': './experiments/pokemon/describe/pokemon_attributes_pairs', 'path_llm_prompts': './experiments/pokemon/describe/pokemon_llm_prompts', 'expt_dir_guess': './experiments/pokemon/guess', 'path_llm_replies_raw': './experiments/pokemon/guess/pokemon_llm_replies_raw', 'path_llm_replies_jsoned': './experiments/pokemon/guess/pokemon_llm_replies_jsoned', 'path_llm_gussed_names': './experiments/pokemon/guess/pokemon_llm_gussed_names', 'expt_dir_grouping': './experiments/pokemon/grouping'}
0it [00:00, ?it/s]0it [00:17, ?it/s]
╭───────────────────── Traceback (most recent call last) ──────────────────────╮
│ /home/hdl/miniconda3/envs/finer/lib/python3.9/site-packages/tenacity/__init_ │
│ _.py:382 in __call__                                                         │
│                                                                              │
│   379 │   │   │   do = self.iter(retry_state=retry_state)                    │
│   380 │   │   │   if isinstance(do, DoAttempt):                              │
│   381 │   │   │   │   try:                                                   │
│ ❱ 382 │   │   │   │   │   result = fn(*args, **kwargs)                       │
│   383 │   │   │   │   except BaseException:  # noqa: B902                    │
│   384 │   │   │   │   │   retry_state.set_exception(sys.exc_info())  # type: │
│   385 │   │   │   │   else:                                                  │
│                                                                              │
│ /home/hdl/project/FineR/FineR_0/agents/llm_bot.py:57 in call_gpts            │
│                                                                              │
│    54 │   │   │   max_tokens=max_tokens                                      │
│    55 │   │   )                                                              │
│    56 │   else:                                                              │
│ ❱  57 │   │   response = client.chat.completions.create(                     │
│    58 │   │   │   model=model,                                               │
│    59 │   │   │   messages=chatgpt_messages,                                 │
│    60 │   │   │   temperature=temperature                                    │
│                                                                              │
│ /home/hdl/miniconda3/envs/finer/lib/python3.9/site-packages/openai/_utils/_u │
│ tils.py:287 in wrapper                                                       │
│                                                                              │
│   284 │   │   │   │   │   else:                                              │
│   285 │   │   │   │   │   │   msg = f"Missing required argument: {quote(miss │
│   286 │   │   │   │   raise TypeError(msg)                                   │
│ ❱ 287 │   │   │   return func(*args, **kwargs)                               │
│   288 │   │                                                                  │
│   289 │   │   return wrapper  # type: ignore                                 │
│   290                                                                        │
│                                                                              │
│ /home/hdl/miniconda3/envs/finer/lib/python3.9/site-packages/openai/resources │
│ /chat/completions/completions.py:1147 in create                              │
│                                                                              │
│   1144 │   │   timeout: float | httpx.Timeout | None | NotGiven = NOT_GIVEN, │
│   1145 │   ) -> ChatCompletion | Stream[ChatCompletionChunk]:                │
│   1146 │   │   validate_response_format(response_format)                     │
│ ❱ 1147 │   │   return self._post(                                            │
│   1148 │   │   │   "/chat/completions",                                      │
│   1149 │   │   │   body=maybe_transform(                                     │
│   1150 │   │   │   │   {                                                     │
│                                                                              │
│ /home/hdl/miniconda3/envs/finer/lib/python3.9/site-packages/openai/_base_cli │
│ ent.py:1259 in post                                                          │
│                                                                              │
│   1256 │   │   opts = FinalRequestOptions.construct(                         │
│   1257 │   │   │   method="post", url=path, json_data=body, files=to_httpx_f │
│   1258 │   │   )                                                             │
│ ❱ 1259 │   │   return cast(ResponseT, self.request(cast_to, opts, stream=str │
│   1260 │                                                                     │
│   1261 │   def patch(                                                        │
│   1262 │   │   self,                                                         │
│                                                                              │
│ /home/hdl/miniconda3/envs/finer/lib/python3.9/site-packages/openai/_base_cli │
│ ent.py:1047 in request                                                       │
│                                                                              │
│   1044 │   │   │   │   │   err.response.read()                               │
│   1045 │   │   │   │                                                         │
│   1046 │   │   │   │   log.debug("Re-raising status error")                  │
│ ❱ 1047 │   │   │   │   raise self._make_status_error_from_response(err.respo │
│   1048 │   │   │                                                             │
│   1049 │   │   │   break                                                     │
│   1050                                                                       │
╰──────────────────────────────────────────────────────────────────────────────╯
AuthenticationError: Error code: 401 - {'error': {'message': '无效的sk 
token，请检查token是否正确', 'type': 'error'}}

The above exception was the direct cause of the following exception:

╭───────────────────── Traceback (most recent call last) ──────────────────────╮
│ /home/hdl/project/FineR/FineR_0/discovering.py:394 in <module>               │
│                                                                              │
│   391 │   │   llm_bot = LLMBot(model=cfg['model_type_llm'])                  │
│   392 │   │                                                                  │
│   393 │   │   # run the main program                                         │
│ ❱ 394 │   │   raw_replies, jsoned_replies = main_guess(cfg, llm_bot, reasoni │
│   395 │   │                                                                  │
│   396 │   │   # save LLM replis                                              │
│   397 │   │   dump_json(cfg['path_llm_replies_raw'] + expt_id_suffix, raw_re │
│                                                                              │
│ /home/hdl/project/FineR/FineR_0/discovering.py:170 in main_guess             │
│                                                                              │
│   167 │                                                                      │
│   168 │   # LLM inferring                                                    │
│   169 │   for i, (key, prompt) in tqdm(enumerate(prompt_list.items())):      │
│ ❱ 170 │   │   raw_reply = bot.infer(prompt, temperature=0.9)  # use a high t │
│   171 │   │   used_tokens = bot.get_used_tokens()                            │
│   172 │   │                                                                  │
│   173 │   │   replies_raw[key] = raw_reply                                   │
│                                                                              │
│ /home/hdl/project/FineR/FineR_0/agents/llm_bot.py:119 in infer               │
│                                                                              │
│   116 │   │   return reply, total_prompt, n_tokens                           │
│   117 │                                                                      │
│   118 │   def infer(self, prompt, temperature=0.9):                          │
│ ❱ 119 │   │   reply, _, n_tokens = self.__query(prompt, temperature, max_tok │
│   120 │   │   self.total_tokens += n_tokens                                  │
│   121 │   │   return reply.strip()                                           │
│   122                                                                        │
│                                                                              │
│ /home/hdl/project/FineR/FineR_0/agents/llm_bot.py:109 in __query             │
│                                                                              │
│   106 │                                                                      │
│   107 │   def __query(self, prompt, temperature, max_token):                 │
│   108 │   │   total_prompt = prepare_chatgpt_message(prompt)                 │
│ ❱ 109 │   │   reply, n_tokens = call_gpts(                                   │
│   110 │   │   │   client=self.client,                                        │
│   111 │   │   │   chatgpt_messages=total_prompt,                             │
│   112 │   │   │   temperature=temperature,                                   │
│                                                                              │
│ /home/hdl/miniconda3/envs/finer/lib/python3.9/site-packages/tenacity/__init_ │
│ _.py:289 in wrapped_f                                                        │
│                                                                              │
│   286 │   │                                                                  │
│   287 │   │   @functools.wraps(f)                                            │
│   288 │   │   def wrapped_f(*args: t.Any, **kw: t.Any) -> t.Any:             │
│ ❱ 289 │   │   │   return self(f, *args, **kw)                                │
│   290 │   │                                                                  │
│   291 │   │   def retry_with(*args: t.Any, **kwargs: t.Any) -> WrappedFn:    │
│   292 │   │   │   return self.copy(*args, **kwargs).wraps(f)                 │
│                                                                              │
│ /home/hdl/miniconda3/envs/finer/lib/python3.9/site-packages/tenacity/__init_ │
│ _.py:379 in __call__                                                         │
│                                                                              │
│   376 │   │                                                                  │
│   377 │   │   retry_state = RetryCallState(retry_object=self, fn=fn, args=ar │
│   378 │   │   while True:                                                    │
│ ❱ 379 │   │   │   do = self.iter(retry_state=retry_state)                    │
│   380 │   │   │   if isinstance(do, DoAttempt):                              │
│   381 │   │   │   │   try:                                                   │
│   382 │   │   │   │   │   result = fn(*args, **kwargs)                       │
│                                                                              │
│ /home/hdl/miniconda3/envs/finer/lib/python3.9/site-packages/tenacity/__init_ │
│ _.py:326 in iter                                                             │
│                                                                              │
│   323 │   │   │   retry_exc = self.retry_error_cls(fut)                      │
│   324 │   │   │   if self.reraise:                                           │
│   325 │   │   │   │   raise retry_exc.reraise()                              │
│ ❱ 326 │   │   │   raise retry_exc from fut.exception()                       │
│   327 │   │                                                                  │
│   328 │   │   if self.wait:                                                  │
│   329 │   │   │   sleep = self.wait(retry_state)                             │
╰──────────────────────────────────────────────────────────────────────────────╯
RetryError: RetryError[<Future at 0x70a5951d4850 state=finished raised 
AuthenticationError>]
Namespace(mode='postprocess', config_file_env='./configs/env_machine.yml', config_file_expt='./configs/expts/pokemon_all.yml', num_per_category='3')
{'setup': 'ours', 'experiment': 5.0, 'dataset_name': 'pokemon', 'num_classes': 10, 'num_base': 5, 'num_novel': 5, 'seed': 1, 'batch_size': 256, 'clustering_method': 'multi_clip_voting', 'model_size': 'ViT-B/16', 'model_size_vqa': 'FlanT5-XXL', 'model_type_llm': 'gpt-3.5-turbo', 'image_size': 224, 'verbose': False, 'host': 'chaos', 'num_workers': 16, 'device': 'cuda', 'device_count': '1', 'device_id': '0', 'data_dir': './datasets/pokemon', 'expt_dir': './experiments/pokemon', 'expt_dir_describe': './experiments/pokemon/describe', 'path_vqa_questions': './experiments/pokemon/describe/pokemon_vqa_questions', 'path_vqa_answers': './experiments/pokemon/describe/pokemon_attributes_pairs', 'path_llm_prompts': './experiments/pokemon/describe/pokemon_llm_prompts', 'expt_dir_guess': './experiments/pokemon/guess', 'path_llm_replies_raw': './experiments/pokemon/guess/pokemon_llm_replies_raw', 'path_llm_replies_jsoned': './experiments/pokemon/guess/pokemon_llm_replies_jsoned', 'path_llm_gussed_names': './experiments/pokemon/guess/pokemon_llm_gussed_names', 'expt_dir_grouping': './experiments/pokemon/grouping'}
Charmander_0
{
    "Squirtle": [
        "Squirtle is a small, orange Pokemon with a stubby, snout-like creature.",
        "It has a spherical body with a spherical head and four limbs.",
        "The Pokemon has a squint eye shape and orange eyes.",
        "Its mouth shape is a slit and it has a stubby tail.",
        "Squirtle has two heads and two eyes."
    ],
    "Charmander": [
        "Squirtle is a small, orange Pokemon with a stubby, snout-like creature.",
        "It has a spherical body with a spherical head and four limbs.",
        "The Pokemon has a squint eye shape and orange eyes.",
        "Its mouth shape is a slit and it has a stubby tail.",
        "Squirtle has two heads and two eyes."
    ],
    "Cyndaquil": [
        "Squirtle is a small, orange Pokemon with a stubby, snout-like creature.",
        "It has a spherical body with a spherical head and four limbs.",
        "The Pokemon has a squint eye shape and orange eyes.",
        "Its mouth shape is a slit and it has a stubby tail.",
        "Squirtle has two heads and two eyes."
    ]
}


Charmander_1
{
    "Squirtle": [
        "This pokemon is a small orange creature with a scaly, stubby, snout-like head, two heads, and two squinty orange eyes.",
        "It has a small, lizard-like body with a tail, four limbs, and smooth skin texture.",
        "The special markings of this pokemon are a bright red nose and a yellow tummy.",
        "Its mouth is in the shape of a snout and its ears resemble those of a frog.",
        "It is associated with the fire element and has a smile as its facial expression."
    ],
    "Charmander": [
        "This pokemon is a small orange creature with a scaly, stubby, snout-like head, two heads, and two squinty orange eyes.",
        "It has a small, lizard-like body with a tail, four limbs, and smooth skin texture.",
        "The special markings of this pokemon are a bright red nose and a yellow tummy.",
        "Its mouth is in the shape of a snout and its ears resemble those of a frog.",
        "It is associated with the fire element and has a smile as its facial expression."
    ],
    "Charmeleon": [
        "This pokemon is a small orange creature with a scaly, stubby, snout-like head, two heads, and two squinty orange eyes.",
        "It has a small, lizard-like body with a tail, four limbs, and smooth skin texture.",
        "The special markings of this pokemon are a bright red nose and a yellow tummy.",
        "Its mouth is in the shape of a snout and its ears resemble those of a frog.",
        "It is associated with the fire element and has a smile as its facial expression."
    ]
}


Charmander_2
{
  "Squirtle": [
    "A squirtle is a small, round, and stubby pokemon with a brown color.",
    "It has a spherical head and body with a white belly and blue tummy.",
    "This pokemon has four limbs in a T shape and two heads with squinty blue eyes and a slit mouth.",
    "It also has a stubby tail and a spherical shape ear.",
    "The skin is smooth and it has a flame on its head."
  ],
  "Wartortle": [
    "A squirtle is a small, round, and stubby pokemon with a brown color.",
    "It has a spherical head and body with a white belly and blue tummy.",
    "This pokemon has four limbs in a T shape and two heads with squinty blue eyes and a slit mouth.",
    "It also has a stubby tail and a spherical shape ear.",
    "The skin is smooth and it has a flame on its head."
  ],
  "Blastoise": [
    "A squirtle is a small, round, and stubby pokemon with a brown color.",
    "It has a spherical head and body with a white belly and blue tummy.",
    "This pokemon has four limbs in a T shape and two heads with squinty blue eyes and a slit mouth.",
    "It also has a stubby tail and a spherical shape ear.",
    "The skin is smooth and it has a flame on its head."
  ]
}


Pidgey_3
{
    "Swellow": [
        "The Pokemon in the image is a bird with a brown and white body pattern.",
        "It is small in size and has a beak.",
        "It has a white crest on its head and a white wing patch.",
        "It has two heads and two eyes with a squint shape.",
        "The Pokemon has four limbs, two wings, and a tail shaped like a swan."
    ],
    "Pidgeot": [
        "The Pokemon in the image is a bird with a brown and white body pattern.",
        "It is small in size and has a beak.",
        "It has a white crest on its head and a white wing patch.",
        "It has two heads and two eyes with a squint shape.",
        "The Pokemon has four limbs, two wings, and a tail shaped like a swan."
    ],
    "Staraptor": [
        "The Pokemon in the image is a bird with a brown and white body pattern.",
        "It is small in size and has a beak.",
        "It has a white crest on its head and a white wing patch.",
        "It has two heads and two eyes with a squint shape.",
        "The Pokemon has four limbs, two wings, and a tail shaped like a swan."
    ]
}


Pidgey_4
{
  "Crestwing": [
    "This is a medium-sized bird with a brown head and a white belly.",
    "It has four limbs and two heads with two eyes each.",
    "The bird has a hawk-like eye shape and brown eyes.",
    "It has a slit-shaped mouth and a tail resembling that of a swan.",
    "The bird has a unique white crest on its head and a spherical ear shape."
  ],
  "Swaneye": [
    "This is a medium-sized bird with a brown head and a white belly.",
    "It has four limbs and two heads with two eyes each.",
    "The bird has a hawk-like eye shape and brown eyes.",
    "It has a slit-shaped mouth and a tail resembling that of a swan.",
    "The bird has a unique white crest on its head and a spherical ear shape."
  ],
  "Hawkbeak": [
    "This is a medium-sized bird with a brown head and a white belly.",
    "It has four limbs and two heads with two eyes each.",
    "The bird has a hawk-like eye shape and brown eyes.",
    "It has a slit-shaped mouth and a tail resembling that of a swan.",
    "The bird has a unique white crest on its head and a spherical ear shape."
  ]
}


Pidgey_5
{
    "Sylveon": [
        "A Sylveon is a medium-sized bird-like Pokemon with brown and white feathers.",
        "Its body is covered in brown feathers with a white head and a red beak.",
        "The Pokemon has two heads and two eyes, which are brown and shaped like a hawk.",
        "It has a spherical-shaped ear and a scaly skin texture.",
        "The Sylveon has a unique feature of a long neck and two wings."
    ],
    "Hawkwing": [
        "A Sylveon is a medium-sized bird-like Pokemon with brown and white feathers.",
        "Its body is covered in brown feathers with a white head and a red beak.",
        "The Pokemon has two heads and two eyes, which are brown and shaped like a hawk.",
        "It has a spherical-shaped ear and a scaly skin texture.",
        "The Sylveon has a unique feature of a long neck and two wings."
    ],
    "Swanbeak": [
        "A Sylveon is a medium-sized bird-like Pokemon with brown and white feathers.",
        "Its body is covered in brown feathers with a white head and a red beak.",
        "The Pokemon has two heads and two eyes, which are brown and shaped like a hawk.",
        "It has a spherical-shaped ear and a scaly skin texture.",
        "The Sylveon has a unique feature of a long neck and two wings."
    ]
}


Pidgeotto_6
{
    "Sylveon": [
        "This image features a Pokemon called Sylveon, which is a bird-like creature with a medium size.",
        "It has a tan body with a red head and wings, and it is characterized by its brown and pink coloration.",
        "Sylveon has a unique shape with a long neck, long tail, and a swan-like tail.",
        "It has four limbs and two heads with squinty pink eyes.",
        "The Pokemon has a slit mouth and a spherical ear shape."
    ],
    "Birdor": [
        "This image features a Pokemon called Birdor, which is a bird-like creature with a medium size.",
        "It has a tan body with a red head and wings, and it is characterized by its brown and pink coloration.",
        "Birdor has a unique shape with a long neck, long tail, and a swan-like tail.",
        "It has four limbs and two heads with squinty pink eyes.",
        "The Pokemon has a slit mouth and a spherical ear shape."
    ],
    "Swanwing": [
        "This image features a Pokemon called Swanwing, which is a bird-like creature with a medium size.",
        "It has a tan body with a red head and wings, and it is characterized by its brown and pink coloration.",
        "Swanwing has a unique shape with a long neck, long tail, and a swan-like tail.",
        "It has four limbs and two heads with squinty pink eyes.",
        "The Pokemon has a slit mouth and a spherical ear shape."
    ]
}


Pidgeotto_7
{
    "Sylveon": [
        "Sylveon is a medium-sized bird-like Pokémon with a pink and brown coloration. It has a brown body with a yellow head and wings.",
        "The Pokémon has four limbs, two heads, and two eyes with a hawk-like shape. Its eye color is brown, and its mouth has a slit shape.",
        "The tail resembles that of a swan. It has a special marking of a red and yellow crest on its head, along with a white ear shape similar to a swan.",
        "Sylveon's skin texture is smooth. It is in the evolutionary stage of being a Sandslash.",
        "It has two wings and legs shaped like a Squirtle. Its arms have a wing-like shape. The Pokémon has a smug facial expression and a unique feature of wings."
    ],
    "Sandslash": [
        "Sylveon is in the evolutionary stage of being a Sandslash. Its coloration is pink and brown, and its size is medium.",
        "It has a brown body with a yellow head and wings. The Pokémon has four limbs, two heads, and two eyes with a hawk-like shape.",
        "The eye color is brown, and the mouth has a slit shape. The tail resembles that of a swan.",
        "Sylveon has a special marking of a red and yellow crest on its head, along with a white ear shape similar to a swan. Its skin texture is smooth.",
        "It has two wings and legs shaped like a Squirtle. Its arms have a wing-like shape. The Pokémon has a smug facial expression and a unique feature of wings."
    ],
    "Swanslash": [
        "Sylveon resembles a bird, particularly a swan, with its medium size and pink and brown coloration.",
        "Its brown body has a yellow head and wings. The Pokémon has four limbs, two heads, and two eyes with a hawk-like shape.",
        "The eye color is brown, and the mouth has a slit shape. The tail is shaped like that of a swan.",
        "Sylveon has a special marking of a red and yellow crest on its head, along with a white ear shape similar to a swan. Its skin texture is smooth.",
        "It has two wings and legs shaped like a Squirtle. Its arms have a wing-like shape. The Pokémon has a smug facial expression and a unique feature of wings."
    ]
}


Pidgeotto_8
{
  "Squirtle": [
    "The image shows a pokemon resembling a squirtle with a brown body and a red head.",
    "It has a small size and a bird-like shape.",
    "The pokemon has hawk-shaped red eyes and a slit-shaped mouth.",
    "It has a swan-like tail and two heads, with two eyes on each head.",
    "The pokemon is associated with the bird element and has a special marking of a red hat with a white crest on its head."
  ],
  "Redhat": [
    "The image shows a pokemon resembling a squirtle with a brown body and a red head.",
    "It has a small size and a bird-like shape.",
    "The pokemon has hawk-shaped red eyes and a slit-shaped mouth.",
    "It has a swan-like tail and two heads, with two eyes on each head.",
    "The pokemon is associated with the bird element and has a special marking of a red hat with a white crest on its head."
  ],
  "Crestspike": [
    "The image shows a pokemon resembling a squirtle with a brown body and a red head.",
    "It has a small size and a bird-like shape.",
    "The pokemon has hawk-shaped red eyes and a slit-shaped mouth.",
    "It has a swan-like tail and two heads, with two eyes on each head.",
    "The pokemon is associated with the bird element and has a special marking of a red hat with a white crest on its head."
  ]
}


Charmeleon_9
{
    "Flamizard": [
        "The image shows a small red fire type pokemon with a red and white striped body, black belly, and a flame on its head.",
        "It has a sad expression with squint-shaped red eyes and a slit-shaped mouth.",
        "The pokemon has two heads, two eyes, and four limbs.",
        "It has a stubby tail with a curved tip and no presence of fins, horns, or crests.",
        "The unique features include slanted triangle-shaped ears, a red scaly skin, and a spike on its body."
    ],
    "Lizardflare": [
        "The image shows a small red fire type pokemon with a red and white striped body, black belly, and a flame on its head.",
        "It has a sad expression with squint-shaped red eyes and a slit-shaped mouth.",
        "The pokemon has two heads, two eyes, and four limbs.",
        "It has a stubby tail with a curved tip and no presence of fins, horns, or crests.",
        "The unique features include slanted triangle-shaped ears, a red scaly skin, and a spike on its body."
    ],
    "Ignisaur": [
        "The image shows a small red fire type pokemon with a red and white striped body, black belly, and a flame on its head.",
        "It has a sad expression with squint-shaped red eyes and a slit-shaped mouth.",
        "The pokemon has two heads, two eyes, and four limbs.",
        "It has a stubby tail with a curved tip and no presence of fins, horns, or crests.",
        "The unique features include slanted triangle-shaped ears, a red scaly skin, and a spike on its body."
    ]
}


Charmeleon_10
{
    "Squirtle": [
        "The pokemon in the image is a small, red-colored creature that resembles a lizard.",
        "It has a tiger-like pattern on its body and a red tummy with a white belly.",
        "With four limbs and two heads, it has squinted red eyes and a snout-like mouth.",
        "Its tail is slanted and resembles a tadpole.",
        "This pokemon is associated with the fire element and has the ability of a fire-type."
    ],
    "Charmander": [
        "The pokemon in the image is a small, red-colored creature that resembles a lizard.",
        "It has a tiger-like pattern on its body and a red tummy with a white belly.",
        "With four limbs and two heads, it has squinted red eyes and a snout-like mouth.",
        "Its tail is slanted and resembles a tadpole.",
        "This pokemon is associated with the fire element and has the ability of a fire-type."
    ],
    "Charizard": [
        "The pokemon in the image is a small, red-colored creature that resembles a lizard.",
        "It has a tiger-like pattern on its body and a red tummy with a white belly.",
        "With four limbs and two heads, it has squinted red eyes and a snout-like mouth.",
        "Its tail is slanted and resembles a tadpole.",
        "This pokemon is associated with the fire element and has the ability of a fire-type."
    ]
}


Charmeleon_11
{
    "Squirtle": [
        "A squirtle is a small, red and yellow pokemon with a red body, white belly, and white tail.",
        "It has four limbs, two heads, and two eyes that are squint and red in color.",
        "The pokemon has a slit mouth and a stubby tail with a curved tip.",
        "It is associated with the fire element and has special markings on its body.",
        "The squirtle has a triangular ear shape, smooth skin texture, and a smirk facial expression."
    ],
    "Charmeleon": [
        "A squirtle is a small, red and yellow pokemon with a red body, white belly, and white tail.",
        "It has four limbs, two heads, and two eyes that are squint and red in color.",
        "The pokemon has a slit mouth and a stubby tail with a curved tip.",
        "It is associated with the fire element and has special markings on its body.",
        "The squirtle has a triangular ear shape, smooth skin texture, and a smirk facial expression."
    ],
    "Charizard": [
        "A squirtle is a small, red and yellow pokemon with a red body, white belly, and white tail.",
        "It has four limbs, two heads, and two eyes that are squint and red in color.",
        "The pokemon has a slit mouth and a stubby tail with a curved tip.",
        "It is associated with the fire element and has special markings on its body.",
        "The squirtle has a triangular ear shape, smooth skin texture, and a smirk facial expression."
    ]
}


Squirtle_12
{
    "Squirtle": [
        "This is a small turtle-like pokemon called Squirtle.",
        "It has a blue body with a yellow head and a yellow tail.",
        "The pokemon has a sad expression with squinted blue eyes and a slit mouth.",
        "It has four limbs and two heads with two blue eyes.",
        "Squirtle is associated with the element of sand and has a smooth skin texture."
    ],
    "Wartortle": [
        "This is a small turtle-like pokemon called Wartortle.",
        "It has a blue body with a yellow head and a yellow tail.",
        "The pokemon has a sad expression with squinted blue eyes and a slit mouth.",
        "It has four limbs and two heads with two blue eyes.",
        "Wartortle is associated with the element of sand and has a smooth skin texture."
    ],
    "Blastoise": [
        "This is a small turtle-like pokemon called Blastoise.",
        "It has a blue body with a yellow head and a yellow tail.",
        "The pokemon has a sad expression with squinted blue eyes and a slit mouth.",
        "It has four limbs and two heads with two blue eyes.",
        "Blastoise is associated with the element of sand and has a smooth skin texture."
    ]
}


Squirtle_13
{
    "Squirtle": [
        "Squirtle is a small, blue turtle-like Pokémon with a smooth skin texture.",
        "It has a squint eye shape and blue eyes.",
        "The mouth is in the form of a snout.",
        "Squirtle has a unique body pattern that resembles a squirtle.",
        "It has four limbs, a tail, and two heads."
    ],
    "Wartortle": [
        "Wartortle evolves from Squirtle and is a larger, more powerful water-type Pokémon.",
        "It retains the same blue color and turtle-like shape.",
        "Wartortle has evolved to have a larger body size and more defined limbs.",
        "It still has a snout-shaped mouth and two squint eyes.",
        "The special markings on Wartortle include a darker blue tail and the presence of a spike on its back."
    ],
    "Blastoise": [
        "Blastoise is the final evolution stage of Squirtle, following Wartortle.",
        "It is a larger, more heavily built Pokémon with a dark blue color.",
        "Blastoise has a more pronounced turtle shape and a distinctive cannon-like structure on its back.",
        "It has two heads, a snout-shaped mouth, and blue eyes.",
        "The special markings of Blastoise include water cannons on its shell and a spike on its back."
    ]
}


Squirtle_14
{
    "Squirtle": [
        "This is a blue turtle with a small size and a smooth skin texture.",
        "It has a squint eye shape and blue eyes.",
        "The mouth shape is a slit and it has a turtle-shaped body with a tail.",
        "It has two heads and two limbs.",
        "The pokemon is a squirtle in its evolutionary stage."
    ],
    "Wartortle": [
        "This is a blue turtle with a small size and a smooth skin texture.",
        "It has a squint eye shape and blue eyes.",
        "The mouth shape is a slit and it has a turtle-shaped body with a tail.",
        "It has two heads and two limbs.",
        "The pokemon is a squirtle in its evolutionary stage."
    ],
    "Blastoise": [
        "This is a blue turtle with a small size and a smooth skin texture.",
        "It has a squint eye shape and blue eyes.",
        "The mouth shape is a slit and it has a turtle-shaped body with a tail.",
        "It has two heads and two limbs.",
        "The pokemon is a squirtle in its evolutionary stage."
    ]
}


Bulbasaur_15
{
    "Squirtle": [
        "A squirtle is a small and green pokemon with a red head and tail.",
        "It has four limbs and a squinty green eyes.",
        "The mouth is in a slit shape and the unique feature of this pokemon is its green body with red eyes.",
        "It has two heads and two eyes.",
        "The skin texture of the squirtle is smooth and it is at the evolutionary stage of being a squirtle."
    ],
    "Greened": [
        "A squirtle is a small and green pokemon with a red head and tail.",
        "It has four limbs and a squinty green eyes.",
        "The mouth is in a slit shape and the unique feature of this pokemon is its green body with red eyes.",
        "It has two heads and two eyes.",
        "The skin texture of the squirtle is smooth and it is at the evolutionary stage of being a squirtle."
    ],
    "Frogleaf": [
        "A squirtle is a small and green pokemon with a red head and tail.",
        "It has four limbs and a squinty green eyes.",
        "The mouth is in a slit shape and the unique feature of this pokemon is its green body with red eyes.",
        "It has two heads and two eyes.",
        "The skin texture of the squirtle is smooth and it is at the evolutionary stage of being a squirtle."
    ]
}


Bulbasaur_16
{
    "Squirtle": [
        "Squirtle is a small, green, leafy creature with a sad expression.",
        "It has a leaf on its back and is associated with the grass element.",
        "It has four limbs, two heads, and two eyes which are squinted and green in color.",
        "Squirtle has a smooth skin texture and its body shape resembles a squirtle.",
        "It does not have wings, fins, or horns, but it does have a spike on its back."
    ],
    "Greenleaf": [
        "Greenleaf is a small, green, leafy creature with a sad expression.",
        "It has a leaf on its back and is associated with the grass element.",
        "It has four limbs, two heads, and two eyes which are squinted and green in color.",
        "Greenleaf has a smooth skin texture and its body shape resembles a squirtle.",
        "It does not have wings, fins, or horns, but it does have a spike on its back."
    ],
    "Leafurtle": [
        "Leafurtle is a small, green, leafy creature with a sad expression.",
        "It has a leaf on its back and is associated with the grass element.",
        "It has four limbs, two heads, and two eyes which are squinted and green in color.",
        "Leafurtle has a smooth skin texture and its body shape resembles a squirtle.",
        "It does not have wings, fins, or horns, but it does have a spike on its back."
    ]
}


Bulbasaur_17
{
    "Squirtle": [
        "This image shows a small, green Pokemon called Squirtle.",
        "It has a spherical body with a rounded head and two squinty green eyes.",
        "The Pokemon has a sad facial expression and its mouth is in the shape of a slit.",
        "It has four limbs, each ending in a Squirtle-like shape.",
        "Squirtle has a unique feature, which is a backpack-like pouch on its back."
    ],
    "Squirtle-like creature": [
        "This image shows a small, green Pokemon called Squirtle-like creature.",
        "It has a spherical body with a rounded head and two squinty green eyes.",
        "The Pokemon has a sad facial expression and its mouth is in the shape of a slit.",
        "It has four limbs, each ending in a Squirtle-like shape.",
        "Squirtle-like creature has a unique feature, which is a backpack-like pouch on its back."
    ],
    "Green Pokemon": [
        "This image shows a small, green Pokemon called Green Pokemon.",
        "It has a spherical body with a rounded head and two squinty green eyes.",
        "The Pokemon has a sad facial expression and its mouth is in the shape of a slit.",
        "It has four limbs, each ending in a Squirtle-like shape.",
        "Green Pokemon has a unique feature, which is a backpack-like pouch on its back."
    ]
}


Raichu_18
{
    "Pikachu": [
        "This image shows a small, yellow pokemon called Pikachu.",
        "It has a Squirtle-like tail and a snout, and its body has special markings with a yellow color, a black tail, and a white t.",
        "Pikachu has a squint eye shape with yellow eyes and a smiley facial expression.",
        "It has two heads, two eyes, and four limbs, with a small and smooth skin texture.",
        "Pikachu is associated with the water element and has a unique feature of having a tail."
    ],
    "Pichu": [
        "This image shows a small, yellow pokemon called Pichu.",
        "It has a Squirtle-like tail and a snout, and its body has special markings with a yellow color, a black tail, and a white t.",
        "Pichu has a squint eye shape with yellow eyes and a smiley facial expression.",
        "It has two heads, two eyes, and four limbs, with a small and smooth skin texture.",
        "Pichu is associated with the water element and has a unique feature of having a tail."
    ],
    "Raichu": [
        "This image shows a small, yellow pokemon called Raichu.",
        "It has a Squirtle-like tail and a snout, and its body has special markings with a yellow color, a black tail, and a white t.",
        "Raichu has a squint eye shape with yellow eyes and a smiley facial expression.",
        "It has two heads, two eyes, and four limbs, with a small and smooth skin texture.",
        "Raichu is associated with the water element and has a unique feature of having a tail."
    ]
}


Raichu_19
{
    "PikaHorn": [
        "This image shows a small, brown pikachu with a snout-like shape and a pigtail tail.",
        "It has a squirtle-like pattern on its back.",
        "The pikachu has four limbs and two heads, with two squinty brown eyes and a slit mouth.",
        "It has a unique feature of a horn on its snout and a sad expression.",
        "The skin texture is smooth, and it is in the evolutionary stage of a pikachu."
    ],
    "Squirtchu": [
        "This image shows a small, brown pikachu with a snout-like shape and a pigtail tail.",
        "It has a squirtle-like pattern on its back.",
        "The pikachu has four limbs and two heads, with two squinty brown eyes and a slit mouth.",
        "It has a unique feature of a horn on its snout and a sad expression.",
        "The skin texture is smooth, and it is in the evolutionary stage of a pikachu."
    ],
    "Sadtail Pikachu": [
        "This image shows a small, brown pikachu with a snout-like shape and a pigtail tail.",
        "It has a squirtle-like pattern on its back.",
        "The pikachu has four limbs and two heads, with two squinty brown eyes and a slit mouth.",
        "It has a unique feature of a horn on its snout and a sad expression.",
        "The skin texture is smooth, and it is in the evolutionary stage of a pikachu."
    ]
}


Raichu_20
{
    "Pikachu": [
        "This is a small, orange and white Pokemon called Pikachu.",
        "It has a yellow body, a yellow head, and a yellow tail.",
        "It has two heads and two eyes, with a squint eye shape and yellow eye color.",
        "Pikachu has a small size and a smooth skin texture.",
        "It has a unique feature of a horn."
    ],
    "Pika": [
        "This is a small, orange and white Pokemon called Pikachu.",
        "It has a yellow body, a yellow head, and a yellow tail.",
        "It has two heads and two eyes, with a squint eye shape and yellow eye color.",
        "Pikachu has a small size and a smooth skin texture.",
        "It has a unique feature of a horn."
    ],
    "Sparkachu": [
        "This is a small, orange and white Pokemon called Pikachu.",
        "It has a yellow body, a yellow head, and a yellow tail.",
        "It has two heads and two eyes, with a squint eye shape and yellow eye color.",
        "Pikachu has a small size and a smooth skin texture.",
        "It has a unique feature of a horn."
    ]
}


Wartortle_21
{
  "Squirtle": [
    "A squirtle is a small-sized turtle-like Pokemon with a blue body and a white belly.",
    "It has a blue head with a squint-shaped blue eyes and a slit-like mouth.",
    "The Pokemon has two heads and four limbs.",
    "It is associated with the water element and has a tail shaped like a squirtle.",
    "It has smooth and shiny skin and a unique feature of having a shell."
  ],
  "Wartortle": [
    "A squirtle is a small-sized turtle-like Pokemon with a blue body and a white belly.",
    "It has a blue head with a squint-shaped blue eyes and a slit-like mouth.",
    "The Pokemon has two heads and four limbs.",
    "It is associated with the water element and has a tail shaped like a squirtle.",
    "It has smooth and shiny skin and a unique feature of having a shell."
  ],
  "Blastoise": [
    "A squirtle is a small-sized turtle-like Pokemon with a blue body and a white belly.",
    "It has a blue head with a squint-shaped blue eyes and a slit-like mouth.",
    "The Pokemon has two heads and four limbs.",
    "It is associated with the water element and has a tail shaped like a squirtle.",
    "It has smooth and shiny skin and a unique feature of having a shell."
  ]
}


Wartortle_22
{
   "Squirturtle": [
      "The pokemon in the image is a small, blue turtle-like creature with a squirtle pattern on its body.",
      "It has four limbs and two heads with squinted blue eyes and a slit-like mouth.",
      "The pokemon has a fairy element associated with it and special markings in the form of a squirtle on its back and a smooth skin texture.",
      "It is at an early evolutionary stage and does not have any wings, fins, or horns.",
      "Its unique feature is that it is a squirtle. The pokemon has a friendly facial expression with a smile."
   ],
   "Bluetail": [
      "The pokemon in the image is a small, blue turtle-like creature with a squirtle pattern on its body.",
      "It has four limbs and two heads with squinted blue eyes and a slit-like mouth.",
      "The pokemon has a fairy element associated with it and special markings in the form of a squirtle on its back and a smooth skin texture.",
      "It is at an early evolutionary stage and does not have any wings, fins, or horns.",
      "Its unique feature is that it is a squirtle. The pokemon has a friendly facial expression with a smile."
   ],
   "Fairesquirt": [
      "The pokemon in the image is a small, blue turtle-like creature with a squirtle pattern on its body.",
      "It has four limbs and two heads with squinted blue eyes and a slit-like mouth.",
      "The pokemon has a fairy element associated with it and special markings in the form of a squirtle on its back and a smooth skin texture.",
      "It is at an early evolutionary stage and does not have any wings, fins, or horns.",
      "Its unique feature is that it is a squirtle. The pokemon has a friendly facial expression with a smile."
   ]
}


Wartortle_23
{
    "Squirtle": [
        "This is a small, blue turtle-like pokemon with a white belly and head.",
        "It has four limbs that are shaped like a turtle's arms and a tail shaped like a squirtle.",
        "It has two heads and two blue squint-shaped eyes.",
        "The pokemon has a sad facial expression and a slit mouth.",
        "Its ears are in the shape of a 't' and it doesn't have any fins, horns, or crests/spikes."
    ],
    "Wartortle": [
        "This is a small, blue turtle-like pokemon with a white belly and head.",
        "It has four limbs that are shaped like a turtle's arms and a tail shaped like a squirtle.",
        "It has two heads and two blue squint-shaped eyes.",
        "The pokemon has a sad facial expression and a slit mouth.",
        "Its ears are in the shape of a 't' and it doesn't have any fins, horns, or crests/spikes."
    ],
    "Blastoise": [
        "This is a small, blue turtle-like pokemon with a white belly and head.",
        "It has four limbs that are shaped like a turtle's arms and a tail shaped like a squirtle.",
        "It has two heads and two blue squint-shaped eyes.",
        "The pokemon has a sad facial expression and a slit mouth.",
        "Its ears are in the shape of a 't' and it doesn't have any fins, horns, or crests/spikes."
    ]
}


Ivysaur_24
{
"Flower Squirtle": [
"A Squirtle with a flower on its head is a small, green Pokemon with a scaly texture.",
"It has a sad facial expression and squinted blue eyes.",
"The Pokemon has four limbs, two heads, and two eyes.",
"It has a slit mouth and a unique feature of a flower on its head.",
"The body pattern of this Squirtle includes a splotch of green on its back."
],
"Greenleaf Squirtle": [
"A Squirtle with a flower on its head is a small, green Pokemon with a scaly texture.",
"It has a sad facial expression and squinted blue eyes.",
"The Pokemon has four limbs, two heads, and two eyes.",
"It has a slit mouth and a unique feature of a flower on its head.",
"The body pattern of this Squirtle includes a splotch of green on its back."
],
"Sadpetal Squirtle": [
"A Squirtle with a flower on its head is a small, green Pokemon with a scaly texture.",
"It has a sad facial expression and squinted blue eyes.",
"The Pokemon has four limbs, two heads, and two eyes.",
"It has a slit mouth and a unique feature of a flower on its head.",
"The body pattern of this Squirtle includes a splotch of green on its back."
]
}


Ivysaur_25
{
    "Squirtle": [
        "This image shows a small blue Pokemon known as Squirtle.",
        "It has a leaf on its back and a body with a green head and a pink tail.",
        "Squirtle has four limbs, two heads, and two eyes.",
        "Its eyes are squinted and blue in color.",
        "The mouth is in the shape of a slit."
    ],
    "Wartortle": [
        "This image shows a small blue Pokemon known as Wartortle.",
        "It has a leaf on its back and a body with a green head and a pink tail.",
        "Wartortle has four limbs, two heads, and two eyes.",
        "Its eyes are squinted and blue in color.",
        "The mouth is in the shape of a slit."
    ],
    "Blastoise": [
        "This image shows a small blue Pokemon known as Blastoise.",
        "It has a leaf on its back and a body with a green head and a pink tail.",
        "Blastoise has four limbs, two heads, and two eyes.",
        "Its eyes are squinted and blue in color.",
        "The mouth is in the shape of a slit."
    ]
}


Ivysaur_26
{
    "Squirtle": [
        "This image is of a small, blue pokemon called Squirtle.",
        "It has a blue and green body pattern with a pink flower on its head.",
        "Squirtle has four limbs, two heads, and two squinty blue eyes.",
        "Its mouth has a slit shape and it has a tail specific to Squirtle.",
        "The pokemon is associated with a flower and has special markings in the form of a flower on its head."
    ],
    "Wartortle": [
        "This image is of a small, blue pokemon called Wartortle.",
        "It has a blue and green body pattern with a pink flower on its head.",
        "Wartortle has four limbs, two heads, and two squinty blue eyes.",
        "Its mouth has a slit shape and it has a tail specific to Wartortle.",
        "The pokemon is associated with a flower and has special markings in the form of a flower on its head."
    ],
    "Blastoise": [
        "This image is of a small, blue pokemon called Blastoise.",
        "It has a blue and green body pattern with a pink flower on its head.",
        "Blastoise has four limbs, two heads, and two squinty blue eyes.",
        "Its mouth has a slit shape and it has a tail specific to Blastoise.",
        "The pokemon is associated with a flower and has special markings in the form of a flower on its head."
    ]
}


Pikachu_27
{
  "Pikachu": [
    "Pikachu is a small, yellow Pokemon with a black nose and black eyes.",
    "It has a squinty eye shape and a slit mouth shape.",
    "The Pokemon has a stubby tail and two heads.",
    "It is associated with the element of electricity.",
    "Pikachu has a unique feature of a yellow head and a smooth skin texture."
  ],
  "Pichu": [
    "Pikachu is a small, yellow Pokemon with a black nose and black eyes.",
    "It has a squinty eye shape and a slit mouth shape.",
    "The Pokemon has a stubby tail and two heads.",
    "It is associated with the element of electricity.",
    "Pikachu has a unique feature of a yellow head and a smooth skin texture."
  ],
  "Raichu": [
    "Pikachu is a small, yellow Pokemon with a black nose and black eyes.",
    "It has a squinty eye shape and a slit mouth shape.",
    "The Pokemon has a stubby tail and two heads.",
    "It is associated with the element of electricity.",
    "Pikachu has a unique feature of a yellow head and a smooth skin texture."
  ]
}


Pikachu_28
{
"pikachu": [
"Summary: Pikachu is a small, yellow Pokémon with a body shape of a small yellow ball.",
"It has a yellow squinty eyes, a slit mouth, and a stubby tail.",
"It has two heads with two eyes each.",
"Pikachu has a smooth and shiny skin texture.",
"It is a unique Pokémon belonging to the evolutionary stage of Pikachu."
],
"Pika": [
"Summary: Pikachu is a small, yellow Pokémon with a body shape of a small yellow ball.",
"It has a yellow squinty eyes, a slit mouth, and a stubby tail.",
"It has two heads with two eyes each.",
"Pikachu has a smooth and shiny skin texture.",
"It is a unique Pokémon belonging to the evolutionary stage of Pikachu."
],
"Electricball": [
"Summary: Pikachu is a small, yellow Pokémon with a body shape of a small yellow ball.",
"It has a yellow squinty eyes, a slit mouth, and a stubby tail.",
"It has two heads with two eyes each.",
"Pikachu has a smooth and shiny skin texture.",
"It is a unique Pokémon belonging to the evolutionary stage of Pikachu."
]
}


Pikachu_29
{
    "Pikachu": [
        "The pokemon in the image is a yellow Pikachu, small in size with a yellow body, black head, and a black tail.",
        "It has four limbs and a squint eye shape with yellow eyes.",
        "The mouth has a slit shape.",
        "The Pikachu has a unique feature of a tail and it is at the evolutionary stage of a Pikachu.",
        "There are no fins, horns, or crests present. The pokemon has a sad facial expression and associated with the element of lightning."
    ],
    "Pichu": [
        "The pokemon in the image is a yellow Pichu, small in size with a yellow body, black head, and a black tail.",
        "It has four limbs and a squint eye shape with yellow eyes.",
        "The mouth has a slit shape.",
        "The Pichu has a unique feature of a tail and it is at an early evolutionary stage.",
        "There are no fins, horns, or crests present. The pokemon has a sad facial expression and associated with the element of lightning."
    ],
    "Raichu": [
        "The pokemon in the image is a yellow Raichu, small in size with a yellow body, black head, and a black tail.",
        "It has four limbs and a squint eye shape with yellow eyes.",
        "The mouth has a slit shape.",
        "The Raichu has a unique feature of a tail and it is at an advanced evolutionary stage.",
        "There are no fins, horns, or crests present. The pokemon has a sad facial expression and associated with the element of lightning."
    ]
}


==============================
		 Finished Post-processing
==============================
		 ---> total discovered names = 47
['Fairesquirt', 'Redhat', 'Swanbeak', 'Squirtle', 'pikachu', 'Greenleaf Squirtle', 'Sandslash', 'Leafurtle', 'Staraptor', 'Sadpetal Squirtle', 'Cyndaquil', 'Flower Squirtle', 'Swanslash', 'Frogleaf', 'Raichu', 'Squirtchu', 'Wartortle', 'Swellow', 'Ignisaur', 'Charmeleon', 'Green Pokemon', 'Flamizard', 'Birdor', 'Pikachu', 'Hawkbeak', 'Squirtle-like creature', 'Crestwing', 'Greenleaf', 'Hawkwing', 'Pichu', 'Sadtail Pikachu', 'Lizardflare', 'Swanwing', 'Charmander', 'Pidgeot', 'Blastoise', 'Electricball', 'Sylveon', 'Charizard', 'Sparkachu', 'Crestspike', 'Greened', 'Pika', 'Bluetail', 'Swaneye', 'PikaHorn', 'Squirturtle']

		 ---> total discovered names = 47
		 ---> number of failure entries = 0
END==============================

Namespace(config_file_env='./configs/env_machine.yml', config_file_expt='./configs/expts/pokemon_all.yml', alpha=0.7, N_tta=10, num_per_category='3', num_runs=10)
Number of GPUs: 1
Device ID: 0 Device Name: NVIDIA RTX A6000
['Fairesquirt', 'Redhat', 'Swanbeak', 'Squirtle', 'pikachu', 'Greenleaf Squirtle', 'Sandslash', 'Leafurtle', 'Staraptor', 'Sadpetal Squirtle', 'Cyndaquil', 'Flower Squirtle', 'Swanslash', 'Frogleaf', 'Raichu', 'Squirtchu', 'Wartortle', 'Swellow', 'Ignisaur', 'Charmeleon', 'Green Pokemon', 'Flamizard', 'Birdor', 'Pikachu', 'Hawkbeak', 'Squirtle-like creature', 'Crestwing', 'Greenleaf', 'Hawkwing', 'Pichu', 'Sadtail Pikachu', 'Lizardflare', 'Swanwing', 'Charmander', 'Pidgeot', 'Blastoise', 'Electricball', 'Sylveon', 'Charizard', 'Sparkachu', 'Crestspike', 'Greened', 'Pika', 'Bluetail', 'Swaneye', 'PikaHorn', 'Squirturtle']
0it [00:00, ?it/s]1it [00:00,  5.96it/s]3it [00:00, 12.33it/s]5it [00:00, 10.64it/s]7it [00:00, 12.47it/s]9it [00:00, 13.38it/s]12it [00:00, 15.68it/s]14it [00:01, 14.30it/s]16it [00:01, 13.36it/s]18it [00:01, 14.73it/s]21it [00:01, 15.49it/s]23it [00:01, 16.15it/s]25it [00:01, 15.89it/s]27it [00:01, 14.18it/s]29it [00:02, 15.06it/s]30it [00:02, 14.22it/s]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:01<00:00,  1.98s/it]100%|██████████| 1/1 [00:02<00:00,  2.08s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:01<00:00,  1.74s/it]100%|██████████| 1/1 [00:01<00:00,  1.83s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.789372444152832


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 71.53846153846153
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 81.95026331016642
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 65.98797952066484


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 78.93724060058594
=========================          END          =========================
0it [00:00, ?it/s]3it [00:00, 18.78it/s]5it [00:00, 11.22it/s]8it [00:00, 14.25it/s]10it [00:00, 13.71it/s]12it [00:00, 14.20it/s]14it [00:01, 13.72it/s]16it [00:01, 13.32it/s]18it [00:01, 14.37it/s]20it [00:01, 14.11it/s]22it [00:01, 15.47it/s]24it [00:01, 14.56it/s]26it [00:01, 13.62it/s]28it [00:02, 13.46it/s]30it [00:02, 13.91it/s]30it [00:02, 13.98it/s]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.11s/it]100%|██████████| 1/1 [00:02<00:00,  2.24s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.09s/it]100%|██████████| 1/1 [00:02<00:00,  2.21s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.7823934555053711


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 72.3076923076923
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 82.44214092823508
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 66.1134328358209


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 78.23934936523438
=========================          END          =========================
0it [00:00, ?it/s]2it [00:00, 13.01it/s]4it [00:00, 10.18it/s]6it [00:00, 12.85it/s]8it [00:00, 14.22it/s]10it [00:00, 13.70it/s]12it [00:00, 15.06it/s]14it [00:00, 15.75it/s]16it [00:01, 16.16it/s]19it [00:01, 17.61it/s]21it [00:01, 18.16it/s]23it [00:01, 16.49it/s]25it [00:01, 16.92it/s]27it [00:01, 15.70it/s]30it [00:01, 17.68it/s]30it [00:01, 15.84it/s]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.09s/it]100%|██████████| 1/1 [00:02<00:00,  2.21s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.11s/it]100%|██████████| 1/1 [00:02<00:00,  2.22s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.7877997756004333


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 70.0
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 81.37838283145075
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 65.03859442769976


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 78.77997589111328
=========================          END          =========================
0it [00:00, ?it/s]2it [00:00, 15.54it/s]4it [00:00, 12.47it/s]6it [00:00, 12.75it/s]8it [00:00, 13.58it/s]10it [00:00, 13.87it/s]12it [00:00, 15.41it/s]14it [00:01, 13.26it/s]16it [00:01, 13.62it/s]18it [00:01, 13.96it/s]21it [00:01, 15.32it/s]23it [00:01, 15.27it/s]25it [00:01, 16.27it/s]27it [00:01, 16.47it/s]30it [00:01, 17.69it/s]30it [00:01, 15.19it/s]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.05s/it]100%|██████████| 1/1 [00:02<00:00,  2.16s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.08s/it]100%|██████████| 1/1 [00:02<00:00,  2.23s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.7855166792869568


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 71.53846153846153
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 82.47900596167906
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 66.20196864746629


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 78.55166625976562
=========================          END          =========================
0it [00:00, ?it/s]2it [00:00, 14.43it/s]4it [00:00, 11.49it/s]6it [00:00, 13.28it/s]8it [00:00, 13.34it/s]10it [00:00, 12.35it/s]12it [00:00, 12.97it/s]14it [00:01, 12.39it/s]16it [00:01, 13.17it/s]19it [00:01, 15.89it/s]21it [00:01, 15.85it/s]23it [00:01, 15.69it/s]25it [00:01, 15.30it/s]27it [00:01, 15.15it/s]29it [00:02, 15.85it/s]30it [00:02, 14.30it/s]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.01s/it]100%|██████████| 1/1 [00:02<00:00,  2.12s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.07s/it]100%|██████████| 1/1 [00:02<00:00,  2.20s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.786565363407135


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 72.3076923076923
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 82.28536165665598
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 66.24465102552752


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 78.65653991699219
=========================          END          =========================
0it [00:00, ?it/s]2it [00:00, 14.38it/s]4it [00:00, 11.78it/s]6it [00:00, 12.45it/s]8it [00:00, 12.81it/s]11it [00:00, 14.45it/s]13it [00:00, 15.72it/s]15it [00:01, 12.07it/s]17it [00:01, 12.49it/s]19it [00:01, 12.34it/s]21it [00:01, 13.44it/s]23it [00:01, 13.62it/s]25it [00:01, 13.52it/s]27it [00:02, 14.34it/s]30it [00:02, 15.60it/s]30it [00:02, 13.81it/s]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.05s/it]100%|██████████| 1/1 [00:02<00:00,  2.16s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.04s/it]100%|██████████| 1/1 [00:02<00:00,  2.16s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.7819525599479675


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 71.53846153846153
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 81.33159445485518
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 65.07581921739774


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 78.19525909423828
=========================          END          =========================
0it [00:00, ?it/s]1it [00:00,  8.67it/s]3it [00:00, 14.87it/s]5it [00:00, 10.97it/s]7it [00:00, 12.46it/s]9it [00:00, 14.17it/s]11it [00:00, 14.80it/s]13it [00:00, 15.90it/s]15it [00:01, 14.45it/s]17it [00:01, 14.89it/s]19it [00:01, 16.12it/s]21it [00:01, 16.46it/s]23it [00:01, 16.00it/s]26it [00:01, 17.94it/s]29it [00:01, 18.48it/s]30it [00:01, 15.79it/s]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.04s/it]100%|██████████| 1/1 [00:02<00:00,  2.18s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.07s/it]100%|██████████| 1/1 [00:02<00:00,  2.25s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.7775742411613464


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 70.0
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 80.91855288838559
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 64.16666666666667


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 77.7574234008789
=========================          END          =========================
0it [00:00, ?it/s]2it [00:00, 16.13it/s]4it [00:00, 10.89it/s]6it [00:00, 12.79it/s]8it [00:00, 14.90it/s]10it [00:00, 13.84it/s]12it [00:00, 14.64it/s]14it [00:01, 13.80it/s]16it [00:01, 14.22it/s]18it [00:01, 15.43it/s]21it [00:01, 16.74it/s]23it [00:01, 15.28it/s]25it [00:01, 14.06it/s]27it [00:01, 14.68it/s]30it [00:02, 15.68it/s]30it [00:02, 14.73it/s]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.06s/it]100%|██████████| 1/1 [00:02<00:00,  2.17s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.11s/it]100%|██████████| 1/1 [00:02<00:00,  2.23s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.7731141448020935


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 69.23076923076923
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 80.29294895083979
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 63.167142543378


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 77.31141662597656
=========================          END          =========================
0it [00:00, ?it/s]3it [00:00, 20.11it/s]6it [00:00, 13.98it/s]8it [00:00, 15.08it/s]10it [00:00, 15.92it/s]12it [00:00, 15.55it/s]14it [00:00, 14.01it/s]16it [00:01, 14.42it/s]18it [00:01, 15.33it/s]20it [00:01, 16.27it/s]23it [00:01, 17.57it/s]26it [00:01, 18.32it/s]28it [00:01, 18.26it/s]30it [00:01, 17.21it/s]30it [00:01, 16.33it/s]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.07s/it]100%|██████████| 1/1 [00:02<00:00,  2.19s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.05s/it]100%|██████████| 1/1 [00:02<00:00,  2.17s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.7787977457046509


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 69.23076923076923
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 79.52636310365648
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 62.59755734286565


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 77.87977600097656
=========================          END          =========================
0it [00:00, ?it/s]2it [00:00, 14.52it/s]4it [00:00, 11.31it/s]7it [00:00, 15.31it/s]9it [00:00, 15.69it/s]11it [00:00, 14.43it/s]13it [00:00, 14.89it/s]15it [00:01, 13.86it/s]17it [00:01, 10.83it/s]20it [00:01, 13.29it/s]22it [00:01, 14.00it/s]24it [00:01, 15.06it/s]26it [00:01, 14.60it/s]28it [00:01, 14.92it/s]30it [00:02, 14.52it/s]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.25s/it]100%|██████████| 1/1 [00:02<00:00,  2.36s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.13s/it]100%|██████████| 1/1 [00:02<00:00,  2.27s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.7864943742752075


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 71.53846153846153
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 82.1136700515549
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 66.36097275124524


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 78.6494369506836
=========================          END          =========================


========================= ViLang Final Results of 10 runs, w/ 3 imgs per class=========================


[Clustering]
Clustering ACC: 70.92307692307693
Semantic ACC:   78.29580688476562
=========================          END          =========================
Namespace(mode='describe', config_file_env='./configs/env_machine.yml', config_file_expt='./configs/expts/pokemon_all.yml', num_per_category='3')
{'setup': 'ours', 'experiment': 5.0, 'dataset_name': 'pokemon', 'num_classes': 10, 'num_base': 5, 'num_novel': 5, 'seed': 1, 'batch_size': 256, 'clustering_method': 'multi_clip_voting', 'model_size': 'ViT-B/16', 'model_size_vqa': 'FlanT5-XXL', 'model_type_llm': 'gpt-3.5-turbo', 'image_size': 224, 'verbose': False, 'host': 'chaos', 'num_workers': 16, 'device': 'cuda', 'device_count': '1', 'device_id': '0', 'data_dir': './datasets/pokemon', 'expt_dir': './experiments/pokemon', 'expt_dir_describe': './experiments/pokemon/describe', 'path_vqa_questions': './experiments/pokemon/describe/pokemon_vqa_questions', 'path_vqa_answers': './experiments/pokemon/describe/pokemon_attributes_pairs', 'path_llm_prompts': './experiments/pokemon/describe/pokemon_llm_prompts', 'expt_dir_guess': './experiments/pokemon/guess', 'path_llm_replies_raw': './experiments/pokemon/guess/pokemon_llm_replies_raw', 'path_llm_replies_jsoned': './experiments/pokemon/guess/pokemon_llm_replies_jsoned', 'path_llm_gussed_names': './experiments/pokemon/guess/pokemon_llm_gussed_names', 'expt_dir_grouping': './experiments/pokemon/grouping'}
Loading checkpoint shards:   0%|          | 0/5 [00:00<?, ?it/s]Loading checkpoint shards:  20%|██        | 1/5 [00:02<00:09,  2.25s/it]Loading checkpoint shards:  40%|████      | 2/5 [00:04<00:06,  2.28s/it]Loading checkpoint shards:  60%|██████    | 3/5 [00:06<00:04,  2.27s/it]Loading checkpoint shards:  80%|████████  | 4/5 [00:09<00:02,  2.25s/it]Loading checkpoint shards: 100%|██████████| 5/5 [00:11<00:00,  2.16s/it]Loading checkpoint shards: 100%|██████████| 5/5 [00:11<00:00,  2.21s/it]
0it [00:00, ?it/s]1it [00:05,  5.81s/it]2it [00:11,  5.59s/it]0: label=2
==============================
Charmander_0 with label 2
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a small orange pokemon'''
        Attributes List:
        - '''color''': '''orange'''
        - '''size''': '''small'''
        - '''shape''': '''a small, orange, squirtle-like creature'''
        - '''body pattern''': '''a small, orange, scaly, lizard-like creature with'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''orange'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a stubby tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''fire'''
        - '''special markings''': '''the pokemon has a snout with a horn on it'''
        - '''ear shape''': '''a frog'''
        - '''skin texture''': '''smooth and shiny'''
        - '''evolutionary stage''': '''a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a t-shaped arm'''
        - '''facial expression''': '''a sad expression'''
        - '''unique feature''': '''it has a fire-type'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

1: label=2
==============================
Charmander_1 with label 2
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a small orange pokemon'''
        Attributes List:
        - '''color''': '''orange'''
        - '''size''': '''it is small'''
        - '''shape''': '''a small, orange, and yellow lizard'''
        - '''body pattern''': '''a scaly, squarish, snout-like'''
        - '''number of limbs''': '''four limbs'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''orange'''
        - '''mouth shape''': '''a snout'''
        - '''tail shape''': '''a slanted snout'''
        - '''number of heads''': '''two heads'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''fire'''
        - '''special markings''': '''the pokemon has a red nose and a yellow tummy'''
        - '''ear shape''': '''a frog'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a t-shaped arm'''
        - '''facial expression''': '''a smile'''
        - '''unique feature''': '''it has a tail'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

2: label=2
==============================
Charmander_2 with label 2
==============================

3it [00:16,  5.63s/it]4it [00:22,  5.69s/it]5it [00:27,  5.51s/it]
        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''brown'''
        - '''size''': '''it is small'''
        - '''shape''': '''it is a small, round, and stubby'''
        - '''body pattern''': '''it has a spherical head, a spherical body'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''the eyes are a squint'''
        - '''eye color''': '''blue'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a stubby tail with a rounded tip'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''fire'''
        - '''special markings''': '''the pokemon has a white belly and a blue tail'''
        - '''ear shape''': '''a spherical shape'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a t'''
        - '''arm shape''': '''the arms are a t shape'''
        - '''facial expression''': '''a smile'''
        - '''unique feature''': '''it has a flame on its head'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

3: label=9
==============================
Pidgeotto_3 with label 9
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a sylveon'''
        Attributes List:
        - '''color''': '''brown and pink'''
        - '''size''': '''it is a medium size'''
        - '''shape''': '''a bird with a long neck and a long tail'''
        - '''body pattern''': '''a tan body with a red head and wings'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''pink'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a swan-like tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a bird'''
        - '''special markings''': '''the pokemon has a red crest on its head'''
        - '''ear shape''': '''a spherical shape'''
        - '''skin texture''': '''a scaly texture'''
        - '''evolutionary stage''': '''a sylveon'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a slanted wing'''
        - '''arm shape''': '''a wing shape'''
        - '''facial expression''': '''a smirk'''
        - '''unique feature''': '''a bird with a long beak'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

4: label=9
==============================
Pidgeotto_4 with label 9
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a sylveon'''
        Attributes List:
        - '''color''': '''pink and brown'''
        - '''size''': '''it is a medium size'''
        - '''shape''': '''a bird'''
        - '''body pattern''': '''a bird with a long neck and a long tail'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a hawk's eye'''
        - '''eye color''': '''brown'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a swan'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a bird'''
        - '''special markings''': '''the pokemon has a red and yellow head, a white body, and a'''
        - '''ear shape''': '''a swan'''
        - '''skin texture''': '''a scaly texture'''
        - '''evolutionary stage''': '''a sylveon'''
        - '''number of wings''': '''two wings'''
        - '''leg shape''': '''a swan-like leg shape'''
        - '''arm shape''': '''a wing shape'''
        - '''facial expression''': '''a smirk'''
        - '''unique feature''': '''it has wings'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

5: label=9
==============================6it [00:32,  5.33s/it]7it [00:38,  5.55s/it]
Pidgeotto_5 with label 9
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''brown and red'''
        - '''size''': '''it is small'''
        - '''shape''': '''a bird'''
        - '''body pattern''': '''a brown body with a red head'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a hawk'''
        - '''eye color''': '''red'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a swan-like tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a bird'''
        - '''special markings''': '''a red hat and a white crest on its head'''
        - '''ear shape''': '''a spherical shape'''
        - '''skin texture''': '''smooth and shiny'''
        - '''evolutionary stage''': '''a snorlax'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle pokemon'''
        - '''arm shape''': '''a wing shape'''
        - '''facial expression''': '''a smug look'''
        - '''unique feature''': '''it has a red hat'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''yes'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

6: label=3
==============================
Charmeleon_6 with label 3
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''red'''
        - '''size''': '''it is small'''
        - '''shape''': '''it is a red and yellow pokemon'''
        - '''body pattern''': '''it has a red body with a white belly and a white tail'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''the eyes are a squint'''
        - '''eye color''': '''red'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''it is a stubby tail with a curved tip'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''fire'''
        - '''special markings''': '''the pokemon has a red body with a white belly and a white tail'''
        - '''ear shape''': '''the ear shape is a triangle'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a thigh and a shin'''
        - '''arm shape''': '''the arms are shaped like a t'''
        - '''facial expression''': '''a smirk'''
        - '''unique feature''': '''it has a tail that is on fire'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

7: label=3
==============================
Charmeleon_7 with label 3
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a red tawny tawny'''
        Attributes List:
        - '''color''': '''red'''
        - '''size''': '''it is small'''
        - '''shape''': '''a red and yellow lizard'''
        - '''body pattern''': '''a red and yellow tiger-like pattern'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''red'''
        - '''mouth shape''': '''a snout'''
        - '''tail shape''': '''a slanted tadpole tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''fire'''
        - '''special markings''': '''the pokemon has a red tummy and a white belly'''
        - '''ear shape''': '''a frog'''
        - '''skin texture''': '''a red lizard'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a t-shaped arm'''
        - '''facial expression''': '''a smirk'''
        - '''unique feature''': '''it has a fire-type'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

8it [00:44,  5.54s/it]9it [00:49,  5.45s/it]10it [00:55,  5.43s/it]END==============================

8: label=3
==============================
Charmeleon_8 with label 3
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a red pokemon with fire on its back'''
        Attributes List:
        - '''color''': '''red'''
        - '''size''': '''it is small'''
        - '''shape''': '''a red and yellow lizard'''
        - '''body pattern''': '''a red and white striped body with a black belly'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''red'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a stubby tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''fire'''
        - '''special markings''': '''the pokemon has a red body with a white belly and a white tail'''
        - '''ear shape''': '''a slanted triangle'''
        - '''skin texture''': '''a red lizard'''
        - '''evolutionary stage''': '''a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a t-shaped arm'''
        - '''facial expression''': '''angry'''
        - '''unique feature''': '''it has a flame on its head'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

9: label=1
==============================
Ivysaur_9 with label 1
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''blue'''
        - '''size''': '''it is small'''
        - '''shape''': '''a squirtle'''
        - '''body pattern''': '''a blue and green squirtle with a pink flower on its head'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''blue'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a flower'''
        - '''special markings''': '''the pokemon has a flower on its head'''
        - '''ear shape''': '''a squirtle'''
        - '''skin texture''': '''a scaly texture'''
        - '''evolutionary stage''': '''a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a squirtle'''
        - '''facial expression''': '''a sad expression'''
        - '''unique feature''': '''it has a flower on its head'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

10: label=1
==============================
Ivysaur_10 with label 1
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''green'''
        - '''size''': '''it is small'''
        - '''shape''': '''a squirtle'''
        - '''body pattern''': '''a squirtle with a flower on its head'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''green'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''grass'''
        - '''special markings''': '''the pokemon has a snout with a horn and a tail'''
        - '''ear shape''': '''a squirtle'''
        - '''skin texture''': '''a scaly texture'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a twig'''
        - '''facial expression''': '''a sad expression'''
        - '''unique feature''': '''it has a flower on its head'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

11it [01:00,  5.42s/it]12it [01:06,  5.70s/it]13it [01:11,  5.54s/it]END==============================

11: label=1
==============================
Ivysaur_11 with label 1
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''blue'''
        - '''size''': '''it is small'''
        - '''shape''': '''it is a small blue pokemon with a leaf on its back'''
        - '''body pattern''': '''it has a blue body with a green head and a pink tail'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''the eyes are a squint'''
        - '''eye color''': '''blue'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''the pokemon is a squirtle'''
        - '''special markings''': '''the pokemon has a green head, a blue body, and a pink tail'''
        - '''ear shape''': '''a squirtle'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a thigh and a thigh'''
        - '''arm shape''': '''the pokemon has a squirtle arm shape'''
        - '''facial expression''': '''a sad expression'''
        - '''unique feature''': '''it has a flower on its head'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

12: label=6
==============================
Pikachu_12 with label 6
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''pikachu'''
        Attributes List:
        - '''color''': '''yellow'''
        - '''size''': '''it is small'''
        - '''shape''': '''a small yellow pokemon'''
        - '''body pattern''': '''it has a yellow body with a black head and a black tail'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''yellow'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a slanted squirt tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''grass'''
        - '''special markings''': '''the pokemon has a yellow body with a black stripe on the side of its'''
        - '''ear shape''': '''a ear shape of a t'''
        - '''skin texture''': '''smooth'''
        - '''evolutionary stage''': '''it is a pikachu'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a t-shape'''
        - '''facial expression''': '''a sad expression'''
        - '''unique feature''': '''it has a tail'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

13: label=6
==============================
Pikachu_13 with label 6
==============================

14it [01:17,  5.39s/it]15it [01:22,  5.36s/it]16it [01:27,  5.17s/it]
        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''pikachu'''
        Attributes List:
        - '''color''': '''yellow'''
        - '''size''': '''it is small'''
        - '''shape''': '''a yellow pokemon with a black nose'''
        - '''body pattern''': '''a yellow body with black eyes and a black nose'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''yellow'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a stubby tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a pokemon'''
        - '''special markings''': '''the pokemon has a black stripe on its forehead'''
        - '''ear shape''': '''a squished triangle'''
        - '''skin texture''': '''smooth'''
        - '''evolutionary stage''': '''pikachu'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a slanted triangle'''
        - '''facial expression''': '''a pikachu with a smile on his face'''
        - '''unique feature''': '''it has a yellow head'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

14: label=6
==============================
Pikachu_14 with label 6
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''pikachu'''
        Attributes List:
        - '''color''': '''yellow'''
        - '''size''': '''it is small'''
        - '''shape''': '''it is a small yellow ball'''
        - '''body pattern''': '''it has a yellow body with a black head and a black tail'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''yellow'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a stubby tail'''
        - '''number of heads''': '''two heads'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a ball'''
        - '''special markings''': '''the pokemon has a white belly and a black tail'''
        - '''ear shape''': '''a ear shape of a squirtle'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a pikachu'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a t'''
        - '''arm shape''': '''it is a squirtle'''
        - '''facial expression''': '''a smile'''
        - '''unique feature''': '''it is a pikachu'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

15: label=4
==============================
Squirtle_15 with label 4
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a small turtle'''
        Attributes List:
        - '''color''': '''blue and yellow'''
        - '''size''': '''small'''
        - '''shape''': '''a turtle'''
        - '''body pattern''': '''a turtle with a blue head and a yellow belly'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''blue'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''sand'''
        - '''special markings''': '''the pokemon has a blue and yellow shell'''
        - '''ear shape''': '''a teddy bear'''
        - '''skin texture''': '''smooth'''
        - '''evolutionary stage''': '''a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a t-shape'''
        - '''facial expression''': '''a sad expression'''
        - '''unique feature''': '''it is a turtle'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

16: label=4
==============================
Squirtle_16 with label 4
17it [01:32,  5.21s/it]18it [01:38,  5.38s/it]==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''blue'''
        - '''size''': '''it is small'''
        - '''shape''': '''a turtle'''
        - '''body pattern''': '''it is a squirtle'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''blue'''
        - '''mouth shape''': '''a snout'''
        - '''tail shape''': '''a squirtle'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''water'''
        - '''special markings''': '''the pokemon has a blue head, a blue body, and a blue tail'''
        - '''ear shape''': '''a squirtle'''
        - '''skin texture''': '''it is smooth and shiny'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''it is a squirtle'''
        - '''facial expression''': '''a smile'''
        - '''unique feature''': '''it is a squirtle'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

17: label=4
==============================
Squirtle_17 with label 4
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a turtle'''
        Attributes List:
        - '''color''': '''blue'''
        - '''size''': '''it is a small turtle'''
        - '''shape''': '''it is a turtle'''
        - '''body pattern''': '''it is a turtle pokemon'''
        - '''number of limbs''': '''four limbs'''
        - '''eye shape''': '''the eye shape is a squint'''
        - '''eye color''': '''blue'''
        - '''mouth shape''': '''the mouth shape of the pokemon in this image is a snout'''
        - '''tail shape''': '''it is a turtle'''
        - '''number of heads''': '''two heads'''
        - '''number of eyes''': '''two eyes'''
        - '''associated element''': '''a turtle'''
        - '''special markings''': '''the pokemon has a blue shell with a brown head and a brown body with'''
        - '''ear shape''': '''the ear shape is a t'''
        - '''skin texture''': '''the skin texture is smooth and shiny'''
        - '''evolutionary stage''': '''the pokemon in this image is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a t'''
        - '''arm shape''': '''the arm shape is a t'''
        - '''facial expression''': '''a turtle pokemon'''
        - '''unique feature''': '''it is a turtle'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

18: label=5
==============================
Wartortle_18 with label 5
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''blue'''
        - '''size''': '''it is small'''
        - '''shape''': '''a turtle'''
        - '''body pattern''': '''it has a spherical body with a spherical head'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''blue'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''water'''
        - '''special markings''': '''the pokemon has a blue body with a white belly and a blue head'''
        - '''ear shape''': '''a squirtle'''
        - '''skin texture''': '''it is smooth and shiny'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''it is a squirtle'''
        - '''facial expression''': '''a smirk'''
        - '''unique feature''': '''it has a shell'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''yes'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

19it [01:43,  5.39s/it]20it [01:49,  5.49s/it]21it [01:55,  5.71s/it]END==============================

19: label=5
==============================
Wartortle_19 with label 5
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a pokemon that is a turtle'''
        Attributes List:
        - '''color''': '''blue'''
        - '''size''': '''it is a small turtle'''
        - '''shape''': '''it is a turtle'''
        - '''body pattern''': '''it has a blue body with a white belly and a white head'''
        - '''number of limbs''': '''four limbs'''
        - '''eye shape''': '''the eye shape is a squint'''
        - '''eye color''': '''blue'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''it is a squirtle'''
        - '''number of heads''': '''two heads'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a turtle'''
        - '''special markings''': '''the pokemon has a blue body with a white belly and a white head with'''
        - '''ear shape''': '''the ear shape is a t'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a t'''
        - '''arm shape''': '''the arm shape is a t'''
        - '''facial expression''': '''a turtle pokemon'''
        - '''unique feature''': '''it has a shell'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

20: label=5
==============================
Wartortle_20 with label 5
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''person, person, person, person, person, person, person, person, person, person'''
        Attributes List:
        - '''color''': '''blue'''
        - '''size''': '''it is a small pokemon'''
        - '''shape''': '''a turtle'''
        - '''body pattern''': '''a squirtle with a squirtle on its'''
        - '''number of limbs''': '''four limbs'''
        - '''eye shape''': '''a person'''
        - '''eye color''': '''blue'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a twig'''
        - '''special markings''': '''the pokemon has a squirtle on its back, and a'''
        - '''ear shape''': '''a squirtle'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''person, person, person, person, person, person, person, person, person, person'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a thigh and a thigh'''
        - '''arm shape''': '''a teddy bear'''
        - '''facial expression''': '''a smile'''
        - '''unique feature''': '''it is a squirtle'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

21: label=8
==============================
Pidgey_21 with label 8
==============================

22it [02:01,  5.76s/it]23it [02:06,  5.63s/it]
        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a bird pokemon'''
        Attributes List:
        - '''color''': '''brown and white'''
        - '''size''': '''it is a small bird'''
        - '''shape''': '''it is a bird'''
        - '''body pattern''': '''it is a bird with a brown body and white head'''
        - '''number of limbs''': '''four limbs'''
        - '''eye shape''': '''the eyes are a squint'''
        - '''eye color''': '''brown eyes'''
        - '''mouth shape''': '''the mouth shape is a slit'''
        - '''tail shape''': '''it is a swan'''
        - '''number of heads''': '''two heads'''
        - '''number of eyes''': '''two eyes'''
        - '''associated element''': '''bird'''
        - '''special markings''': '''the bird has a white crest on its head, and a white wing patch'''
        - '''ear shape''': '''the ear shape is a triangle'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''the pokemon in this image is a snorlax'''
        - '''number of wings''': '''two wings'''
        - '''leg shape''': '''the leg shape is a squirtle'''
        - '''arm shape''': '''the arm shape is a wing'''
        - '''facial expression''': '''a bird pokemon'''
        - '''unique feature''': '''it has a beak'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

22: label=8
==============================
Pidgey_22 with label 8
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a sylveon'''
        Attributes List:
        - '''color''': '''brown and white'''
        - '''size''': '''it is a medium size'''
        - '''shape''': '''a bird'''
        - '''body pattern''': '''it is a bird with a brown body and a white head'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a hawk'''
        - '''eye color''': '''brown'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a swan'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a bird'''
        - '''special markings''': '''the pokemon has a brown body with a white head and a brown tail'''
        - '''ear shape''': '''a spherical shape'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''a sylveon'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a squirtle'''
        - '''arm shape''': '''it is a swan'''
        - '''facial expression''': '''a hawk'''
        - '''unique feature''': '''it has a long neck'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

23: label=8
==============================
Pidgey_23 with label 8
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a bird'''
        Attributes List:
        - '''color''': '''brown and white'''
        - '''size''': '''it is a medium size'''
        - '''shape''': '''a bird'''
        - '''body pattern''': '''it is a bird'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a hawk'''
        - '''eye color''': '''brown'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a swan'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a bird'''
        - '''special markings''': '''the bird has a white crest on its head'''
        - '''ear shape''': '''a spherical shape'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''a sylveon'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a squirtle'''
        - '''arm shape''': '''it is a swan'''
        - '''facial expression''': '''a bird with a smirk'''
        - '''unique feature''': '''it is a bird'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

24it [02:11,  5.42s/it]25it [02:17,  5.45s/it]26it [02:22,  5.34s/it]END==============================

24: label=0
==============================
Bulbasaur_24 with label 0
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''green'''
        - '''size''': '''it is small'''
        - '''shape''': '''it is a green and red pokemon'''
        - '''body pattern''': '''a green body with a red head and a red tail'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''green'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a pokemon'''
        - '''special markings''': '''the pokemon has a green body with a red nose and eyes'''
        - '''ear shape''': '''a frog'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a thigh shape'''
        - '''arm shape''': '''the arms are shaped like a t'''
        - '''facial expression''': '''a smile'''
        - '''unique feature''': '''it has a green body and red eyes'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

25: label=0
==============================
Bulbasaur_25 with label 0
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''blue'''
        - '''size''': '''it is small'''
        - '''shape''': '''a small, green, leafy creature'''
        - '''body pattern''': '''a spherical body with a tail'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''green'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''leaf'''
        - '''special markings''': '''the pokemon has a green leaf on its back'''
        - '''ear shape''': '''a squirtle'''
        - '''skin texture''': '''smooth'''
        - '''evolutionary stage''': '''a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a squirtle'''
        - '''facial expression''': '''a sad expression'''
        - '''unique feature''': '''it has a leaf on its back'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

26: label=0
==============================
Bulbasaur_26 with label 0
==============================

27it [02:27,  5.38s/it]28it [02:33,  5.55s/it]
        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''green'''
        - '''size''': '''it is small'''
        - '''shape''': '''a small, green, squirtle-like creature'''
        - '''body pattern''': '''a spherical body with a rounded head and a s'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''green'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''grass'''
        - '''special markings''': '''the pokemon has a large green pouch on its back'''
        - '''ear shape''': '''a squirtle'''
        - '''skin texture''': '''a scaly texture'''
        - '''evolutionary stage''': '''a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a squirtle'''
        - '''facial expression''': '''a sad expression'''
        - '''unique feature''': '''it has a backpack'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

27: label=7
==============================
Raichu_27 with label 7
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''pikachu'''
        Attributes List:
        - '''color''': '''yellow'''
        - '''size''': '''it is small'''
        - '''shape''': '''it is a small, yellow, and brown pokemon'''
        - '''body pattern''': '''it has a squirtle tail and a squirt'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''yellow'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a pokemon that is a squirtle'''
        - '''special markings''': '''the pokemon has a yellow body with a black tail and a white t'''
        - '''ear shape''': '''a squiggly tail'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a pikachu'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a t'''
        - '''arm shape''': '''the arm shape is a t'''
        - '''facial expression''': '''a smile'''
        - '''unique feature''': '''it has a tail'''
        - '''body posturetail presence''': '''yes'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

28: label=7
==============================
Raichu_28 with label 7
==============================

29it [02:39,  5.59s/it]30it [02:44,  5.62s/it]30it [02:44,  5.50s/it]

        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''pikachu, person, person, person, person, person, person, person, person'''
        Attributes List:
        - '''color''': '''orange and white'''
        - '''size''': '''it is small'''
        - '''shape''': '''it is a small, yellow, and brown pokemon'''
        - '''body pattern''': '''it is a squirtle'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''yellow'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a pig tail'''
        - '''number of heads''': '''two heads'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a pokemon'''
        - '''special markings''': '''the pokemon has a yellow head, a yellow body, and a yellow tail'''
        - '''ear shape''': '''a squished ear shape'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a pikachu'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a t'''
        - '''arm shape''': '''it is a teddy bear'''
        - '''facial expression''': '''sad'''
        - '''unique feature''': '''it has a horn on its head'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

29: label=7
==============================
Raichu_29 with label 7
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a pikachu'''
        Attributes List:
        - '''color''': '''brown'''
        - '''size''': '''it is small'''
        - '''shape''': '''a small, stubby, snoutlike creature with a long'''
        - '''body pattern''': '''it has a squirtle like pattern on its back'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''brown'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a pig tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a pokemon'''
        - '''special markings''': '''the pokemon has a snout with a horn on it, and'''
        - '''ear shape''': '''a squished ear'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a pikachu'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a thigh and a thigh'''
        - '''arm shape''': '''the arm shape is a t'''
        - '''facial expression''': '''a smirk'''
        - '''unique feature''': '''it has a tail'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''yes'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

Succ. dumped attribute values to ./experiments/pokemon/describe/pokemon_attributes_pairs_3
Succ. dumped LLM prompts  to ./experiments/pokemon/describe/pokemon_llm_prompts_3
Namespace(mode='guess', config_file_env='./configs/env_machine.yml', config_file_expt='./configs/expts/pokemon_all.yml', num_per_category='3')
{'setup': 'ours', 'experiment': 5.0, 'dataset_name': 'pokemon', 'num_classes': 10, 'num_base': 5, 'num_novel': 5, 'seed': 1, 'batch_size': 256, 'clustering_method': 'multi_clip_voting', 'model_size': 'ViT-B/16', 'model_size_vqa': 'FlanT5-XXL', 'model_type_llm': 'gpt-3.5-turbo', 'image_size': 224, 'verbose': False, 'host': 'chaos', 'num_workers': 16, 'device': 'cuda', 'device_count': '1', 'device_id': '0', 'data_dir': './datasets/pokemon', 'expt_dir': './experiments/pokemon', 'expt_dir_describe': './experiments/pokemon/describe', 'path_vqa_questions': './experiments/pokemon/describe/pokemon_vqa_questions', 'path_vqa_answers': './experiments/pokemon/describe/pokemon_attributes_pairs', 'path_llm_prompts': './experiments/pokemon/describe/pokemon_llm_prompts', 'expt_dir_guess': './experiments/pokemon/guess', 'path_llm_replies_raw': './experiments/pokemon/guess/pokemon_llm_replies_raw', 'path_llm_replies_jsoned': './experiments/pokemon/guess/pokemon_llm_replies_jsoned', 'path_llm_gussed_names': './experiments/pokemon/guess/pokemon_llm_gussed_names', 'expt_dir_grouping': './experiments/pokemon/grouping'}
0it [00:00, ?it/s]0it [00:17, ?it/s]
╭───────────────────── Traceback (most recent call last) ──────────────────────╮
│ /home/hdl/miniconda3/envs/finer/lib/python3.9/site-packages/tenacity/__init_ │
│ _.py:382 in __call__                                                         │
│                                                                              │
│   379 │   │   │   do = self.iter(retry_state=retry_state)                    │
│   380 │   │   │   if isinstance(do, DoAttempt):                              │
│   381 │   │   │   │   try:                                                   │
│ ❱ 382 │   │   │   │   │   result = fn(*args, **kwargs)                       │
│   383 │   │   │   │   except BaseException:  # noqa: B902                    │
│   384 │   │   │   │   │   retry_state.set_exception(sys.exc_info())  # type: │
│   385 │   │   │   │   else:                                                  │
│                                                                              │
│ /home/hdl/project/FineR/FineR_0/agents/llm_bot.py:57 in call_gpts            │
│                                                                              │
│    54 │   │   │   max_tokens=max_tokens                                      │
│    55 │   │   )                                                              │
│    56 │   else:                                                              │
│ ❱  57 │   │   response = client.chat.completions.create(                     │
│    58 │   │   │   model=model,                                               │
│    59 │   │   │   messages=chatgpt_messages,                                 │
│    60 │   │   │   temperature=temperature                                    │
│                                                                              │
│ /home/hdl/miniconda3/envs/finer/lib/python3.9/site-packages/openai/_utils/_u │
│ tils.py:287 in wrapper                                                       │
│                                                                              │
│   284 │   │   │   │   │   else:                                              │
│   285 │   │   │   │   │   │   msg = f"Missing required argument: {quote(miss │
│   286 │   │   │   │   raise TypeError(msg)                                   │
│ ❱ 287 │   │   │   return func(*args, **kwargs)                               │
│   288 │   │                                                                  │
│   289 │   │   return wrapper  # type: ignore                                 │
│   290                                                                        │
│                                                                              │
│ /home/hdl/miniconda3/envs/finer/lib/python3.9/site-packages/openai/resources │
│ /chat/completions/completions.py:1147 in create                              │
│                                                                              │
│   1144 │   │   timeout: float | httpx.Timeout | None | NotGiven = NOT_GIVEN, │
│   1145 │   ) -> ChatCompletion | Stream[ChatCompletionChunk]:                │
│   1146 │   │   validate_response_format(response_format)                     │
│ ❱ 1147 │   │   return self._post(                                            │
│   1148 │   │   │   "/chat/completions",                                      │
│   1149 │   │   │   body=maybe_transform(                                     │
│   1150 │   │   │   │   {                                                     │
│                                                                              │
│ /home/hdl/miniconda3/envs/finer/lib/python3.9/site-packages/openai/_base_cli │
│ ent.py:1259 in post                                                          │
│                                                                              │
│   1256 │   │   opts = FinalRequestOptions.construct(                         │
│   1257 │   │   │   method="post", url=path, json_data=body, files=to_httpx_f │
│   1258 │   │   )                                                             │
│ ❱ 1259 │   │   return cast(ResponseT, self.request(cast_to, opts, stream=str │
│   1260 │                                                                     │
│   1261 │   def patch(                                                        │
│   1262 │   │   self,                                                         │
│                                                                              │
│ /home/hdl/miniconda3/envs/finer/lib/python3.9/site-packages/openai/_base_cli │
│ ent.py:1047 in request                                                       │
│                                                                              │
│   1044 │   │   │   │   │   err.response.read()                               │
│   1045 │   │   │   │                                                         │
│   1046 │   │   │   │   log.debug("Re-raising status error")                  │
│ ❱ 1047 │   │   │   │   raise self._make_status_error_from_response(err.respo │
│   1048 │   │   │                                                             │
│   1049 │   │   │   break                                                     │
│   1050                                                                       │
╰──────────────────────────────────────────────────────────────────────────────╯
AuthenticationError: Error code: 401 - {'error': {'message': '无效的sk 
token，请检查token是否正确', 'type': 'error'}}

The above exception was the direct cause of the following exception:

╭───────────────────── Traceback (most recent call last) ──────────────────────╮
│ /home/hdl/project/FineR/FineR_0/discovering.py:394 in <module>               │
│                                                                              │
│   391 │   │   llm_bot = LLMBot(model=cfg['model_type_llm'])                  │
│   392 │   │                                                                  │
│   393 │   │   # run the main program                                         │
│ ❱ 394 │   │   raw_replies, jsoned_replies = main_guess(cfg, llm_bot, reasoni │
│   395 │   │                                                                  │
│   396 │   │   # save LLM replis                                              │
│   397 │   │   dump_json(cfg['path_llm_replies_raw'] + expt_id_suffix, raw_re │
│                                                                              │
│ /home/hdl/project/FineR/FineR_0/discovering.py:170 in main_guess             │
│                                                                              │
│   167 │                                                                      │
│   168 │   # LLM inferring                                                    │
│   169 │   for i, (key, prompt) in tqdm(enumerate(prompt_list.items())):      │
│ ❱ 170 │   │   raw_reply = bot.infer(prompt, temperature=0.9)  # use a high t │
│   171 │   │   used_tokens = bot.get_used_tokens()                            │
│   172 │   │                                                                  │
│   173 │   │   replies_raw[key] = raw_reply                                   │
│                                                                              │
│ /home/hdl/project/FineR/FineR_0/agents/llm_bot.py:119 in infer               │
│                                                                              │
│   116 │   │   return reply, total_prompt, n_tokens                           │
│   117 │                                                                      │
│   118 │   def infer(self, prompt, temperature=0.9):                          │
│ ❱ 119 │   │   reply, _, n_tokens = self.__query(prompt, temperature, max_tok │
│   120 │   │   self.total_tokens += n_tokens                                  │
│   121 │   │   return reply.strip()                                           │
│   122                                                                        │
│                                                                              │
│ /home/hdl/project/FineR/FineR_0/agents/llm_bot.py:109 in __query             │
│                                                                              │
│   106 │                                                                      │
│   107 │   def __query(self, prompt, temperature, max_token):                 │
│   108 │   │   total_prompt = prepare_chatgpt_message(prompt)                 │
│ ❱ 109 │   │   reply, n_tokens = call_gpts(                                   │
│   110 │   │   │   client=self.client,                                        │
│   111 │   │   │   chatgpt_messages=total_prompt,                             │
│   112 │   │   │   temperature=temperature,                                   │
│                                                                              │
│ /home/hdl/miniconda3/envs/finer/lib/python3.9/site-packages/tenacity/__init_ │
│ _.py:289 in wrapped_f                                                        │
│                                                                              │
│   286 │   │                                                                  │
│   287 │   │   @functools.wraps(f)                                            │
│   288 │   │   def wrapped_f(*args: t.Any, **kw: t.Any) -> t.Any:             │
│ ❱ 289 │   │   │   return self(f, *args, **kw)                                │
│   290 │   │                                                                  │
│   291 │   │   def retry_with(*args: t.Any, **kwargs: t.Any) -> WrappedFn:    │
│   292 │   │   │   return self.copy(*args, **kwargs).wraps(f)                 │
│                                                                              │
│ /home/hdl/miniconda3/envs/finer/lib/python3.9/site-packages/tenacity/__init_ │
│ _.py:379 in __call__                                                         │
│                                                                              │
│   376 │   │                                                                  │
│   377 │   │   retry_state = RetryCallState(retry_object=self, fn=fn, args=ar │
│   378 │   │   while True:                                                    │
│ ❱ 379 │   │   │   do = self.iter(retry_state=retry_state)                    │
│   380 │   │   │   if isinstance(do, DoAttempt):                              │
│   381 │   │   │   │   try:                                                   │
│   382 │   │   │   │   │   result = fn(*args, **kwargs)                       │
│                                                                              │
│ /home/hdl/miniconda3/envs/finer/lib/python3.9/site-packages/tenacity/__init_ │
│ _.py:326 in iter                                                             │
│                                                                              │
│   323 │   │   │   retry_exc = self.retry_error_cls(fut)                      │
│   324 │   │   │   if self.reraise:                                           │
│   325 │   │   │   │   raise retry_exc.reraise()                              │
│ ❱ 326 │   │   │   raise retry_exc from fut.exception()                       │
│   327 │   │                                                                  │
│   328 │   │   if self.wait:                                                  │
│   329 │   │   │   sleep = self.wait(retry_state)                             │
╰──────────────────────────────────────────────────────────────────────────────╯
RetryError: RetryError[<Future at 0x7a8addbd3820 state=finished raised 
AuthenticationError>]
Namespace(mode='postprocess', config_file_env='./configs/env_machine.yml', config_file_expt='./configs/expts/pokemon_all.yml', num_per_category='3')
{'setup': 'ours', 'experiment': 5.0, 'dataset_name': 'pokemon', 'num_classes': 10, 'num_base': 5, 'num_novel': 5, 'seed': 1, 'batch_size': 256, 'clustering_method': 'multi_clip_voting', 'model_size': 'ViT-B/16', 'model_size_vqa': 'FlanT5-XXL', 'model_type_llm': 'gpt-3.5-turbo', 'image_size': 224, 'verbose': False, 'host': 'chaos', 'num_workers': 16, 'device': 'cuda', 'device_count': '1', 'device_id': '0', 'data_dir': './datasets/pokemon', 'expt_dir': './experiments/pokemon', 'expt_dir_describe': './experiments/pokemon/describe', 'path_vqa_questions': './experiments/pokemon/describe/pokemon_vqa_questions', 'path_vqa_answers': './experiments/pokemon/describe/pokemon_attributes_pairs', 'path_llm_prompts': './experiments/pokemon/describe/pokemon_llm_prompts', 'expt_dir_guess': './experiments/pokemon/guess', 'path_llm_replies_raw': './experiments/pokemon/guess/pokemon_llm_replies_raw', 'path_llm_replies_jsoned': './experiments/pokemon/guess/pokemon_llm_replies_jsoned', 'path_llm_gussed_names': './experiments/pokemon/guess/pokemon_llm_gussed_names', 'expt_dir_grouping': './experiments/pokemon/grouping'}
Charmander_0
{
    "Squirtle": [
        "Squirtle is a small, orange Pokemon with a stubby, snout-like creature.",
        "It has a spherical body with a spherical head and four limbs.",
        "The Pokemon has a squint eye shape and orange eyes.",
        "Its mouth shape is a slit and it has a stubby tail.",
        "Squirtle has two heads and two eyes."
    ],
    "Charmander": [
        "Squirtle is a small, orange Pokemon with a stubby, snout-like creature.",
        "It has a spherical body with a spherical head and four limbs.",
        "The Pokemon has a squint eye shape and orange eyes.",
        "Its mouth shape is a slit and it has a stubby tail.",
        "Squirtle has two heads and two eyes."
    ],
    "Cyndaquil": [
        "Squirtle is a small, orange Pokemon with a stubby, snout-like creature.",
        "It has a spherical body with a spherical head and four limbs.",
        "The Pokemon has a squint eye shape and orange eyes.",
        "Its mouth shape is a slit and it has a stubby tail.",
        "Squirtle has two heads and two eyes."
    ]
}


Charmander_1
{
    "Squirtle": [
        "This pokemon is a small orange creature with a scaly, stubby, snout-like head, two heads, and two squinty orange eyes.",
        "It has a small, lizard-like body with a tail, four limbs, and smooth skin texture.",
        "The special markings of this pokemon are a bright red nose and a yellow tummy.",
        "Its mouth is in the shape of a snout and its ears resemble those of a frog.",
        "It is associated with the fire element and has a smile as its facial expression."
    ],
    "Charmander": [
        "This pokemon is a small orange creature with a scaly, stubby, snout-like head, two heads, and two squinty orange eyes.",
        "It has a small, lizard-like body with a tail, four limbs, and smooth skin texture.",
        "The special markings of this pokemon are a bright red nose and a yellow tummy.",
        "Its mouth is in the shape of a snout and its ears resemble those of a frog.",
        "It is associated with the fire element and has a smile as its facial expression."
    ],
    "Charmeleon": [
        "This pokemon is a small orange creature with a scaly, stubby, snout-like head, two heads, and two squinty orange eyes.",
        "It has a small, lizard-like body with a tail, four limbs, and smooth skin texture.",
        "The special markings of this pokemon are a bright red nose and a yellow tummy.",
        "Its mouth is in the shape of a snout and its ears resemble those of a frog.",
        "It is associated with the fire element and has a smile as its facial expression."
    ]
}


Charmander_2
{
  "Squirtle": [
    "A squirtle is a small, round, and stubby pokemon with a brown color.",
    "It has a spherical head and body with a white belly and blue tummy.",
    "This pokemon has four limbs in a T shape and two heads with squinty blue eyes and a slit mouth.",
    "It also has a stubby tail and a spherical shape ear.",
    "The skin is smooth and it has a flame on its head."
  ],
  "Wartortle": [
    "A squirtle is a small, round, and stubby pokemon with a brown color.",
    "It has a spherical head and body with a white belly and blue tummy.",
    "This pokemon has four limbs in a T shape and two heads with squinty blue eyes and a slit mouth.",
    "It also has a stubby tail and a spherical shape ear.",
    "The skin is smooth and it has a flame on its head."
  ],
  "Blastoise": [
    "A squirtle is a small, round, and stubby pokemon with a brown color.",
    "It has a spherical head and body with a white belly and blue tummy.",
    "This pokemon has four limbs in a T shape and two heads with squinty blue eyes and a slit mouth.",
    "It also has a stubby tail and a spherical shape ear.",
    "The skin is smooth and it has a flame on its head."
  ]
}


Pidgey_3
{
    "Swellow": [
        "The Pokemon in the image is a bird with a brown and white body pattern.",
        "It is small in size and has a beak.",
        "It has a white crest on its head and a white wing patch.",
        "It has two heads and two eyes with a squint shape.",
        "The Pokemon has four limbs, two wings, and a tail shaped like a swan."
    ],
    "Pidgeot": [
        "The Pokemon in the image is a bird with a brown and white body pattern.",
        "It is small in size and has a beak.",
        "It has a white crest on its head and a white wing patch.",
        "It has two heads and two eyes with a squint shape.",
        "The Pokemon has four limbs, two wings, and a tail shaped like a swan."
    ],
    "Staraptor": [
        "The Pokemon in the image is a bird with a brown and white body pattern.",
        "It is small in size and has a beak.",
        "It has a white crest on its head and a white wing patch.",
        "It has two heads and two eyes with a squint shape.",
        "The Pokemon has four limbs, two wings, and a tail shaped like a swan."
    ]
}


Pidgey_4
{
  "Crestwing": [
    "This is a medium-sized bird with a brown head and a white belly.",
    "It has four limbs and two heads with two eyes each.",
    "The bird has a hawk-like eye shape and brown eyes.",
    "It has a slit-shaped mouth and a tail resembling that of a swan.",
    "The bird has a unique white crest on its head and a spherical ear shape."
  ],
  "Swaneye": [
    "This is a medium-sized bird with a brown head and a white belly.",
    "It has four limbs and two heads with two eyes each.",
    "The bird has a hawk-like eye shape and brown eyes.",
    "It has a slit-shaped mouth and a tail resembling that of a swan.",
    "The bird has a unique white crest on its head and a spherical ear shape."
  ],
  "Hawkbeak": [
    "This is a medium-sized bird with a brown head and a white belly.",
    "It has four limbs and two heads with two eyes each.",
    "The bird has a hawk-like eye shape and brown eyes.",
    "It has a slit-shaped mouth and a tail resembling that of a swan.",
    "The bird has a unique white crest on its head and a spherical ear shape."
  ]
}


Pidgey_5
{
    "Sylveon": [
        "A Sylveon is a medium-sized bird-like Pokemon with brown and white feathers.",
        "Its body is covered in brown feathers with a white head and a red beak.",
        "The Pokemon has two heads and two eyes, which are brown and shaped like a hawk.",
        "It has a spherical-shaped ear and a scaly skin texture.",
        "The Sylveon has a unique feature of a long neck and two wings."
    ],
    "Hawkwing": [
        "A Sylveon is a medium-sized bird-like Pokemon with brown and white feathers.",
        "Its body is covered in brown feathers with a white head and a red beak.",
        "The Pokemon has two heads and two eyes, which are brown and shaped like a hawk.",
        "It has a spherical-shaped ear and a scaly skin texture.",
        "The Sylveon has a unique feature of a long neck and two wings."
    ],
    "Swanbeak": [
        "A Sylveon is a medium-sized bird-like Pokemon with brown and white feathers.",
        "Its body is covered in brown feathers with a white head and a red beak.",
        "The Pokemon has two heads and two eyes, which are brown and shaped like a hawk.",
        "It has a spherical-shaped ear and a scaly skin texture.",
        "The Sylveon has a unique feature of a long neck and two wings."
    ]
}


Pidgeotto_6
{
    "Sylveon": [
        "This image features a Pokemon called Sylveon, which is a bird-like creature with a medium size.",
        "It has a tan body with a red head and wings, and it is characterized by its brown and pink coloration.",
        "Sylveon has a unique shape with a long neck, long tail, and a swan-like tail.",
        "It has four limbs and two heads with squinty pink eyes.",
        "The Pokemon has a slit mouth and a spherical ear shape."
    ],
    "Birdor": [
        "This image features a Pokemon called Birdor, which is a bird-like creature with a medium size.",
        "It has a tan body with a red head and wings, and it is characterized by its brown and pink coloration.",
        "Birdor has a unique shape with a long neck, long tail, and a swan-like tail.",
        "It has four limbs and two heads with squinty pink eyes.",
        "The Pokemon has a slit mouth and a spherical ear shape."
    ],
    "Swanwing": [
        "This image features a Pokemon called Swanwing, which is a bird-like creature with a medium size.",
        "It has a tan body with a red head and wings, and it is characterized by its brown and pink coloration.",
        "Swanwing has a unique shape with a long neck, long tail, and a swan-like tail.",
        "It has four limbs and two heads with squinty pink eyes.",
        "The Pokemon has a slit mouth and a spherical ear shape."
    ]
}


Pidgeotto_7
{
    "Sylveon": [
        "Sylveon is a medium-sized bird-like Pokémon with a pink and brown coloration. It has a brown body with a yellow head and wings.",
        "The Pokémon has four limbs, two heads, and two eyes with a hawk-like shape. Its eye color is brown, and its mouth has a slit shape.",
        "The tail resembles that of a swan. It has a special marking of a red and yellow crest on its head, along with a white ear shape similar to a swan.",
        "Sylveon's skin texture is smooth. It is in the evolutionary stage of being a Sandslash.",
        "It has two wings and legs shaped like a Squirtle. Its arms have a wing-like shape. The Pokémon has a smug facial expression and a unique feature of wings."
    ],
    "Sandslash": [
        "Sylveon is in the evolutionary stage of being a Sandslash. Its coloration is pink and brown, and its size is medium.",
        "It has a brown body with a yellow head and wings. The Pokémon has four limbs, two heads, and two eyes with a hawk-like shape.",
        "The eye color is brown, and the mouth has a slit shape. The tail resembles that of a swan.",
        "Sylveon has a special marking of a red and yellow crest on its head, along with a white ear shape similar to a swan. Its skin texture is smooth.",
        "It has two wings and legs shaped like a Squirtle. Its arms have a wing-like shape. The Pokémon has a smug facial expression and a unique feature of wings."
    ],
    "Swanslash": [
        "Sylveon resembles a bird, particularly a swan, with its medium size and pink and brown coloration.",
        "Its brown body has a yellow head and wings. The Pokémon has four limbs, two heads, and two eyes with a hawk-like shape.",
        "The eye color is brown, and the mouth has a slit shape. The tail is shaped like that of a swan.",
        "Sylveon has a special marking of a red and yellow crest on its head, along with a white ear shape similar to a swan. Its skin texture is smooth.",
        "It has two wings and legs shaped like a Squirtle. Its arms have a wing-like shape. The Pokémon has a smug facial expression and a unique feature of wings."
    ]
}


Pidgeotto_8
{
  "Squirtle": [
    "The image shows a pokemon resembling a squirtle with a brown body and a red head.",
    "It has a small size and a bird-like shape.",
    "The pokemon has hawk-shaped red eyes and a slit-shaped mouth.",
    "It has a swan-like tail and two heads, with two eyes on each head.",
    "The pokemon is associated with the bird element and has a special marking of a red hat with a white crest on its head."
  ],
  "Redhat": [
    "The image shows a pokemon resembling a squirtle with a brown body and a red head.",
    "It has a small size and a bird-like shape.",
    "The pokemon has hawk-shaped red eyes and a slit-shaped mouth.",
    "It has a swan-like tail and two heads, with two eyes on each head.",
    "The pokemon is associated with the bird element and has a special marking of a red hat with a white crest on its head."
  ],
  "Crestspike": [
    "The image shows a pokemon resembling a squirtle with a brown body and a red head.",
    "It has a small size and a bird-like shape.",
    "The pokemon has hawk-shaped red eyes and a slit-shaped mouth.",
    "It has a swan-like tail and two heads, with two eyes on each head.",
    "The pokemon is associated with the bird element and has a special marking of a red hat with a white crest on its head."
  ]
}


Charmeleon_9
{
    "Flamizard": [
        "The image shows a small red fire type pokemon with a red and white striped body, black belly, and a flame on its head.",
        "It has a sad expression with squint-shaped red eyes and a slit-shaped mouth.",
        "The pokemon has two heads, two eyes, and four limbs.",
        "It has a stubby tail with a curved tip and no presence of fins, horns, or crests.",
        "The unique features include slanted triangle-shaped ears, a red scaly skin, and a spike on its body."
    ],
    "Lizardflare": [
        "The image shows a small red fire type pokemon with a red and white striped body, black belly, and a flame on its head.",
        "It has a sad expression with squint-shaped red eyes and a slit-shaped mouth.",
        "The pokemon has two heads, two eyes, and four limbs.",
        "It has a stubby tail with a curved tip and no presence of fins, horns, or crests.",
        "The unique features include slanted triangle-shaped ears, a red scaly skin, and a spike on its body."
    ],
    "Ignisaur": [
        "The image shows a small red fire type pokemon with a red and white striped body, black belly, and a flame on its head.",
        "It has a sad expression with squint-shaped red eyes and a slit-shaped mouth.",
        "The pokemon has two heads, two eyes, and four limbs.",
        "It has a stubby tail with a curved tip and no presence of fins, horns, or crests.",
        "The unique features include slanted triangle-shaped ears, a red scaly skin, and a spike on its body."
    ]
}


Charmeleon_10
{
    "Squirtle": [
        "The pokemon in the image is a small, red-colored creature that resembles a lizard.",
        "It has a tiger-like pattern on its body and a red tummy with a white belly.",
        "With four limbs and two heads, it has squinted red eyes and a snout-like mouth.",
        "Its tail is slanted and resembles a tadpole.",
        "This pokemon is associated with the fire element and has the ability of a fire-type."
    ],
    "Charmander": [
        "The pokemon in the image is a small, red-colored creature that resembles a lizard.",
        "It has a tiger-like pattern on its body and a red tummy with a white belly.",
        "With four limbs and two heads, it has squinted red eyes and a snout-like mouth.",
        "Its tail is slanted and resembles a tadpole.",
        "This pokemon is associated with the fire element and has the ability of a fire-type."
    ],
    "Charizard": [
        "The pokemon in the image is a small, red-colored creature that resembles a lizard.",
        "It has a tiger-like pattern on its body and a red tummy with a white belly.",
        "With four limbs and two heads, it has squinted red eyes and a snout-like mouth.",
        "Its tail is slanted and resembles a tadpole.",
        "This pokemon is associated with the fire element and has the ability of a fire-type."
    ]
}


Charmeleon_11
{
    "Squirtle": [
        "A squirtle is a small, red and yellow pokemon with a red body, white belly, and white tail.",
        "It has four limbs, two heads, and two eyes that are squint and red in color.",
        "The pokemon has a slit mouth and a stubby tail with a curved tip.",
        "It is associated with the fire element and has special markings on its body.",
        "The squirtle has a triangular ear shape, smooth skin texture, and a smirk facial expression."
    ],
    "Charmeleon": [
        "A squirtle is a small, red and yellow pokemon with a red body, white belly, and white tail.",
        "It has four limbs, two heads, and two eyes that are squint and red in color.",
        "The pokemon has a slit mouth and a stubby tail with a curved tip.",
        "It is associated with the fire element and has special markings on its body.",
        "The squirtle has a triangular ear shape, smooth skin texture, and a smirk facial expression."
    ],
    "Charizard": [
        "A squirtle is a small, red and yellow pokemon with a red body, white belly, and white tail.",
        "It has four limbs, two heads, and two eyes that are squint and red in color.",
        "The pokemon has a slit mouth and a stubby tail with a curved tip.",
        "It is associated with the fire element and has special markings on its body.",
        "The squirtle has a triangular ear shape, smooth skin texture, and a smirk facial expression."
    ]
}


Squirtle_12
{
    "Squirtle": [
        "This is a small turtle-like pokemon called Squirtle.",
        "It has a blue body with a yellow head and a yellow tail.",
        "The pokemon has a sad expression with squinted blue eyes and a slit mouth.",
        "It has four limbs and two heads with two blue eyes.",
        "Squirtle is associated with the element of sand and has a smooth skin texture."
    ],
    "Wartortle": [
        "This is a small turtle-like pokemon called Wartortle.",
        "It has a blue body with a yellow head and a yellow tail.",
        "The pokemon has a sad expression with squinted blue eyes and a slit mouth.",
        "It has four limbs and two heads with two blue eyes.",
        "Wartortle is associated with the element of sand and has a smooth skin texture."
    ],
    "Blastoise": [
        "This is a small turtle-like pokemon called Blastoise.",
        "It has a blue body with a yellow head and a yellow tail.",
        "The pokemon has a sad expression with squinted blue eyes and a slit mouth.",
        "It has four limbs and two heads with two blue eyes.",
        "Blastoise is associated with the element of sand and has a smooth skin texture."
    ]
}


Squirtle_13
{
    "Squirtle": [
        "Squirtle is a small, blue turtle-like Pokémon with a smooth skin texture.",
        "It has a squint eye shape and blue eyes.",
        "The mouth is in the form of a snout.",
        "Squirtle has a unique body pattern that resembles a squirtle.",
        "It has four limbs, a tail, and two heads."
    ],
    "Wartortle": [
        "Wartortle evolves from Squirtle and is a larger, more powerful water-type Pokémon.",
        "It retains the same blue color and turtle-like shape.",
        "Wartortle has evolved to have a larger body size and more defined limbs.",
        "It still has a snout-shaped mouth and two squint eyes.",
        "The special markings on Wartortle include a darker blue tail and the presence of a spike on its back."
    ],
    "Blastoise": [
        "Blastoise is the final evolution stage of Squirtle, following Wartortle.",
        "It is a larger, more heavily built Pokémon with a dark blue color.",
        "Blastoise has a more pronounced turtle shape and a distinctive cannon-like structure on its back.",
        "It has two heads, a snout-shaped mouth, and blue eyes.",
        "The special markings of Blastoise include water cannons on its shell and a spike on its back."
    ]
}


Squirtle_14
{
    "Squirtle": [
        "This is a blue turtle with a small size and a smooth skin texture.",
        "It has a squint eye shape and blue eyes.",
        "The mouth shape is a slit and it has a turtle-shaped body with a tail.",
        "It has two heads and two limbs.",
        "The pokemon is a squirtle in its evolutionary stage."
    ],
    "Wartortle": [
        "This is a blue turtle with a small size and a smooth skin texture.",
        "It has a squint eye shape and blue eyes.",
        "The mouth shape is a slit and it has a turtle-shaped body with a tail.",
        "It has two heads and two limbs.",
        "The pokemon is a squirtle in its evolutionary stage."
    ],
    "Blastoise": [
        "This is a blue turtle with a small size and a smooth skin texture.",
        "It has a squint eye shape and blue eyes.",
        "The mouth shape is a slit and it has a turtle-shaped body with a tail.",
        "It has two heads and two limbs.",
        "The pokemon is a squirtle in its evolutionary stage."
    ]
}


Bulbasaur_15
{
    "Squirtle": [
        "A squirtle is a small and green pokemon with a red head and tail.",
        "It has four limbs and a squinty green eyes.",
        "The mouth is in a slit shape and the unique feature of this pokemon is its green body with red eyes.",
        "It has two heads and two eyes.",
        "The skin texture of the squirtle is smooth and it is at the evolutionary stage of being a squirtle."
    ],
    "Greened": [
        "A squirtle is a small and green pokemon with a red head and tail.",
        "It has four limbs and a squinty green eyes.",
        "The mouth is in a slit shape and the unique feature of this pokemon is its green body with red eyes.",
        "It has two heads and two eyes.",
        "The skin texture of the squirtle is smooth and it is at the evolutionary stage of being a squirtle."
    ],
    "Frogleaf": [
        "A squirtle is a small and green pokemon with a red head and tail.",
        "It has four limbs and a squinty green eyes.",
        "The mouth is in a slit shape and the unique feature of this pokemon is its green body with red eyes.",
        "It has two heads and two eyes.",
        "The skin texture of the squirtle is smooth and it is at the evolutionary stage of being a squirtle."
    ]
}


Bulbasaur_16
{
    "Squirtle": [
        "Squirtle is a small, green, leafy creature with a sad expression.",
        "It has a leaf on its back and is associated with the grass element.",
        "It has four limbs, two heads, and two eyes which are squinted and green in color.",
        "Squirtle has a smooth skin texture and its body shape resembles a squirtle.",
        "It does not have wings, fins, or horns, but it does have a spike on its back."
    ],
    "Greenleaf": [
        "Greenleaf is a small, green, leafy creature with a sad expression.",
        "It has a leaf on its back and is associated with the grass element.",
        "It has four limbs, two heads, and two eyes which are squinted and green in color.",
        "Greenleaf has a smooth skin texture and its body shape resembles a squirtle.",
        "It does not have wings, fins, or horns, but it does have a spike on its back."
    ],
    "Leafurtle": [
        "Leafurtle is a small, green, leafy creature with a sad expression.",
        "It has a leaf on its back and is associated with the grass element.",
        "It has four limbs, two heads, and two eyes which are squinted and green in color.",
        "Leafurtle has a smooth skin texture and its body shape resembles a squirtle.",
        "It does not have wings, fins, or horns, but it does have a spike on its back."
    ]
}


Bulbasaur_17
{
    "Squirtle": [
        "This image shows a small, green Pokemon called Squirtle.",
        "It has a spherical body with a rounded head and two squinty green eyes.",
        "The Pokemon has a sad facial expression and its mouth is in the shape of a slit.",
        "It has four limbs, each ending in a Squirtle-like shape.",
        "Squirtle has a unique feature, which is a backpack-like pouch on its back."
    ],
    "Squirtle-like creature": [
        "This image shows a small, green Pokemon called Squirtle-like creature.",
        "It has a spherical body with a rounded head and two squinty green eyes.",
        "The Pokemon has a sad facial expression and its mouth is in the shape of a slit.",
        "It has four limbs, each ending in a Squirtle-like shape.",
        "Squirtle-like creature has a unique feature, which is a backpack-like pouch on its back."
    ],
    "Green Pokemon": [
        "This image shows a small, green Pokemon called Green Pokemon.",
        "It has a spherical body with a rounded head and two squinty green eyes.",
        "The Pokemon has a sad facial expression and its mouth is in the shape of a slit.",
        "It has four limbs, each ending in a Squirtle-like shape.",
        "Green Pokemon has a unique feature, which is a backpack-like pouch on its back."
    ]
}


Raichu_18
{
    "Pikachu": [
        "This image shows a small, yellow pokemon called Pikachu.",
        "It has a Squirtle-like tail and a snout, and its body has special markings with a yellow color, a black tail, and a white t.",
        "Pikachu has a squint eye shape with yellow eyes and a smiley facial expression.",
        "It has two heads, two eyes, and four limbs, with a small and smooth skin texture.",
        "Pikachu is associated with the water element and has a unique feature of having a tail."
    ],
    "Pichu": [
        "This image shows a small, yellow pokemon called Pichu.",
        "It has a Squirtle-like tail and a snout, and its body has special markings with a yellow color, a black tail, and a white t.",
        "Pichu has a squint eye shape with yellow eyes and a smiley facial expression.",
        "It has two heads, two eyes, and four limbs, with a small and smooth skin texture.",
        "Pichu is associated with the water element and has a unique feature of having a tail."
    ],
    "Raichu": [
        "This image shows a small, yellow pokemon called Raichu.",
        "It has a Squirtle-like tail and a snout, and its body has special markings with a yellow color, a black tail, and a white t.",
        "Raichu has a squint eye shape with yellow eyes and a smiley facial expression.",
        "It has two heads, two eyes, and four limbs, with a small and smooth skin texture.",
        "Raichu is associated with the water element and has a unique feature of having a tail."
    ]
}


Raichu_19
{
    "PikaHorn": [
        "This image shows a small, brown pikachu with a snout-like shape and a pigtail tail.",
        "It has a squirtle-like pattern on its back.",
        "The pikachu has four limbs and two heads, with two squinty brown eyes and a slit mouth.",
        "It has a unique feature of a horn on its snout and a sad expression.",
        "The skin texture is smooth, and it is in the evolutionary stage of a pikachu."
    ],
    "Squirtchu": [
        "This image shows a small, brown pikachu with a snout-like shape and a pigtail tail.",
        "It has a squirtle-like pattern on its back.",
        "The pikachu has four limbs and two heads, with two squinty brown eyes and a slit mouth.",
        "It has a unique feature of a horn on its snout and a sad expression.",
        "The skin texture is smooth, and it is in the evolutionary stage of a pikachu."
    ],
    "Sadtail Pikachu": [
        "This image shows a small, brown pikachu with a snout-like shape and a pigtail tail.",
        "It has a squirtle-like pattern on its back.",
        "The pikachu has four limbs and two heads, with two squinty brown eyes and a slit mouth.",
        "It has a unique feature of a horn on its snout and a sad expression.",
        "The skin texture is smooth, and it is in the evolutionary stage of a pikachu."
    ]
}


Raichu_20
{
    "Pikachu": [
        "This is a small, orange and white Pokemon called Pikachu.",
        "It has a yellow body, a yellow head, and a yellow tail.",
        "It has two heads and two eyes, with a squint eye shape and yellow eye color.",
        "Pikachu has a small size and a smooth skin texture.",
        "It has a unique feature of a horn."
    ],
    "Pika": [
        "This is a small, orange and white Pokemon called Pikachu.",
        "It has a yellow body, a yellow head, and a yellow tail.",
        "It has two heads and two eyes, with a squint eye shape and yellow eye color.",
        "Pikachu has a small size and a smooth skin texture.",
        "It has a unique feature of a horn."
    ],
    "Sparkachu": [
        "This is a small, orange and white Pokemon called Pikachu.",
        "It has a yellow body, a yellow head, and a yellow tail.",
        "It has two heads and two eyes, with a squint eye shape and yellow eye color.",
        "Pikachu has a small size and a smooth skin texture.",
        "It has a unique feature of a horn."
    ]
}


Wartortle_21
{
  "Squirtle": [
    "A squirtle is a small-sized turtle-like Pokemon with a blue body and a white belly.",
    "It has a blue head with a squint-shaped blue eyes and a slit-like mouth.",
    "The Pokemon has two heads and four limbs.",
    "It is associated with the water element and has a tail shaped like a squirtle.",
    "It has smooth and shiny skin and a unique feature of having a shell."
  ],
  "Wartortle": [
    "A squirtle is a small-sized turtle-like Pokemon with a blue body and a white belly.",
    "It has a blue head with a squint-shaped blue eyes and a slit-like mouth.",
    "The Pokemon has two heads and four limbs.",
    "It is associated with the water element and has a tail shaped like a squirtle.",
    "It has smooth and shiny skin and a unique feature of having a shell."
  ],
  "Blastoise": [
    "A squirtle is a small-sized turtle-like Pokemon with a blue body and a white belly.",
    "It has a blue head with a squint-shaped blue eyes and a slit-like mouth.",
    "The Pokemon has two heads and four limbs.",
    "It is associated with the water element and has a tail shaped like a squirtle.",
    "It has smooth and shiny skin and a unique feature of having a shell."
  ]
}


Wartortle_22
{
   "Squirturtle": [
      "The pokemon in the image is a small, blue turtle-like creature with a squirtle pattern on its body.",
      "It has four limbs and two heads with squinted blue eyes and a slit-like mouth.",
      "The pokemon has a fairy element associated with it and special markings in the form of a squirtle on its back and a smooth skin texture.",
      "It is at an early evolutionary stage and does not have any wings, fins, or horns.",
      "Its unique feature is that it is a squirtle. The pokemon has a friendly facial expression with a smile."
   ],
   "Bluetail": [
      "The pokemon in the image is a small, blue turtle-like creature with a squirtle pattern on its body.",
      "It has four limbs and two heads with squinted blue eyes and a slit-like mouth.",
      "The pokemon has a fairy element associated with it and special markings in the form of a squirtle on its back and a smooth skin texture.",
      "It is at an early evolutionary stage and does not have any wings, fins, or horns.",
      "Its unique feature is that it is a squirtle. The pokemon has a friendly facial expression with a smile."
   ],
   "Fairesquirt": [
      "The pokemon in the image is a small, blue turtle-like creature with a squirtle pattern on its body.",
      "It has four limbs and two heads with squinted blue eyes and a slit-like mouth.",
      "The pokemon has a fairy element associated with it and special markings in the form of a squirtle on its back and a smooth skin texture.",
      "It is at an early evolutionary stage and does not have any wings, fins, or horns.",
      "Its unique feature is that it is a squirtle. The pokemon has a friendly facial expression with a smile."
   ]
}


Wartortle_23
{
    "Squirtle": [
        "This is a small, blue turtle-like pokemon with a white belly and head.",
        "It has four limbs that are shaped like a turtle's arms and a tail shaped like a squirtle.",
        "It has two heads and two blue squint-shaped eyes.",
        "The pokemon has a sad facial expression and a slit mouth.",
        "Its ears are in the shape of a 't' and it doesn't have any fins, horns, or crests/spikes."
    ],
    "Wartortle": [
        "This is a small, blue turtle-like pokemon with a white belly and head.",
        "It has four limbs that are shaped like a turtle's arms and a tail shaped like a squirtle.",
        "It has two heads and two blue squint-shaped eyes.",
        "The pokemon has a sad facial expression and a slit mouth.",
        "Its ears are in the shape of a 't' and it doesn't have any fins, horns, or crests/spikes."
    ],
    "Blastoise": [
        "This is a small, blue turtle-like pokemon with a white belly and head.",
        "It has four limbs that are shaped like a turtle's arms and a tail shaped like a squirtle.",
        "It has two heads and two blue squint-shaped eyes.",
        "The pokemon has a sad facial expression and a slit mouth.",
        "Its ears are in the shape of a 't' and it doesn't have any fins, horns, or crests/spikes."
    ]
}


Ivysaur_24
{
"Flower Squirtle": [
"A Squirtle with a flower on its head is a small, green Pokemon with a scaly texture.",
"It has a sad facial expression and squinted blue eyes.",
"The Pokemon has four limbs, two heads, and two eyes.",
"It has a slit mouth and a unique feature of a flower on its head.",
"The body pattern of this Squirtle includes a splotch of green on its back."
],
"Greenleaf Squirtle": [
"A Squirtle with a flower on its head is a small, green Pokemon with a scaly texture.",
"It has a sad facial expression and squinted blue eyes.",
"The Pokemon has four limbs, two heads, and two eyes.",
"It has a slit mouth and a unique feature of a flower on its head.",
"The body pattern of this Squirtle includes a splotch of green on its back."
],
"Sadpetal Squirtle": [
"A Squirtle with a flower on its head is a small, green Pokemon with a scaly texture.",
"It has a sad facial expression and squinted blue eyes.",
"The Pokemon has four limbs, two heads, and two eyes.",
"It has a slit mouth and a unique feature of a flower on its head.",
"The body pattern of this Squirtle includes a splotch of green on its back."
]
}


Ivysaur_25
{
    "Squirtle": [
        "This image shows a small blue Pokemon known as Squirtle.",
        "It has a leaf on its back and a body with a green head and a pink tail.",
        "Squirtle has four limbs, two heads, and two eyes.",
        "Its eyes are squinted and blue in color.",
        "The mouth is in the shape of a slit."
    ],
    "Wartortle": [
        "This image shows a small blue Pokemon known as Wartortle.",
        "It has a leaf on its back and a body with a green head and a pink tail.",
        "Wartortle has four limbs, two heads, and two eyes.",
        "Its eyes are squinted and blue in color.",
        "The mouth is in the shape of a slit."
    ],
    "Blastoise": [
        "This image shows a small blue Pokemon known as Blastoise.",
        "It has a leaf on its back and a body with a green head and a pink tail.",
        "Blastoise has four limbs, two heads, and two eyes.",
        "Its eyes are squinted and blue in color.",
        "The mouth is in the shape of a slit."
    ]
}


Ivysaur_26
{
    "Squirtle": [
        "This image is of a small, blue pokemon called Squirtle.",
        "It has a blue and green body pattern with a pink flower on its head.",
        "Squirtle has four limbs, two heads, and two squinty blue eyes.",
        "Its mouth has a slit shape and it has a tail specific to Squirtle.",
        "The pokemon is associated with a flower and has special markings in the form of a flower on its head."
    ],
    "Wartortle": [
        "This image is of a small, blue pokemon called Wartortle.",
        "It has a blue and green body pattern with a pink flower on its head.",
        "Wartortle has four limbs, two heads, and two squinty blue eyes.",
        "Its mouth has a slit shape and it has a tail specific to Wartortle.",
        "The pokemon is associated with a flower and has special markings in the form of a flower on its head."
    ],
    "Blastoise": [
        "This image is of a small, blue pokemon called Blastoise.",
        "It has a blue and green body pattern with a pink flower on its head.",
        "Blastoise has four limbs, two heads, and two squinty blue eyes.",
        "Its mouth has a slit shape and it has a tail specific to Blastoise.",
        "The pokemon is associated with a flower and has special markings in the form of a flower on its head."
    ]
}


Pikachu_27
{
  "Pikachu": [
    "Pikachu is a small, yellow Pokemon with a black nose and black eyes.",
    "It has a squinty eye shape and a slit mouth shape.",
    "The Pokemon has a stubby tail and two heads.",
    "It is associated with the element of electricity.",
    "Pikachu has a unique feature of a yellow head and a smooth skin texture."
  ],
  "Pichu": [
    "Pikachu is a small, yellow Pokemon with a black nose and black eyes.",
    "It has a squinty eye shape and a slit mouth shape.",
    "The Pokemon has a stubby tail and two heads.",
    "It is associated with the element of electricity.",
    "Pikachu has a unique feature of a yellow head and a smooth skin texture."
  ],
  "Raichu": [
    "Pikachu is a small, yellow Pokemon with a black nose and black eyes.",
    "It has a squinty eye shape and a slit mouth shape.",
    "The Pokemon has a stubby tail and two heads.",
    "It is associated with the element of electricity.",
    "Pikachu has a unique feature of a yellow head and a smooth skin texture."
  ]
}


Pikachu_28
{
"pikachu": [
"Summary: Pikachu is a small, yellow Pokémon with a body shape of a small yellow ball.",
"It has a yellow squinty eyes, a slit mouth, and a stubby tail.",
"It has two heads with two eyes each.",
"Pikachu has a smooth and shiny skin texture.",
"It is a unique Pokémon belonging to the evolutionary stage of Pikachu."
],
"Pika": [
"Summary: Pikachu is a small, yellow Pokémon with a body shape of a small yellow ball.",
"It has a yellow squinty eyes, a slit mouth, and a stubby tail.",
"It has two heads with two eyes each.",
"Pikachu has a smooth and shiny skin texture.",
"It is a unique Pokémon belonging to the evolutionary stage of Pikachu."
],
"Electricball": [
"Summary: Pikachu is a small, yellow Pokémon with a body shape of a small yellow ball.",
"It has a yellow squinty eyes, a slit mouth, and a stubby tail.",
"It has two heads with two eyes each.",
"Pikachu has a smooth and shiny skin texture.",
"It is a unique Pokémon belonging to the evolutionary stage of Pikachu."
]
}


Pikachu_29
{
    "Pikachu": [
        "The pokemon in the image is a yellow Pikachu, small in size with a yellow body, black head, and a black tail.",
        "It has four limbs and a squint eye shape with yellow eyes.",
        "The mouth has a slit shape.",
        "The Pikachu has a unique feature of a tail and it is at the evolutionary stage of a Pikachu.",
        "There are no fins, horns, or crests present. The pokemon has a sad facial expression and associated with the element of lightning."
    ],
    "Pichu": [
        "The pokemon in the image is a yellow Pichu, small in size with a yellow body, black head, and a black tail.",
        "It has four limbs and a squint eye shape with yellow eyes.",
        "The mouth has a slit shape.",
        "The Pichu has a unique feature of a tail and it is at an early evolutionary stage.",
        "There are no fins, horns, or crests present. The pokemon has a sad facial expression and associated with the element of lightning."
    ],
    "Raichu": [
        "The pokemon in the image is a yellow Raichu, small in size with a yellow body, black head, and a black tail.",
        "It has four limbs and a squint eye shape with yellow eyes.",
        "The mouth has a slit shape.",
        "The Raichu has a unique feature of a tail and it is at an advanced evolutionary stage.",
        "There are no fins, horns, or crests present. The pokemon has a sad facial expression and associated with the element of lightning."
    ]
}


==============================
		 Finished Post-processing
==============================
		 ---> total discovered names = 47
['Charmeleon', 'Swanbeak', 'Greened', 'Sparkachu', 'Squirturtle', 'Electricball', 'Raichu', 'Sylveon', 'Squirtle-like creature', 'Greenleaf', 'Swanslash', 'Squirtle', 'Staraptor', 'Sadpetal Squirtle', 'Flamizard', 'Pika', 'Sandslash', 'Green Pokemon', 'Swellow', 'Cyndaquil', 'Charmander', 'Ignisaur', 'Sadtail Pikachu', 'Blastoise', 'Flower Squirtle', 'Charizard', 'Fairesquirt', 'Hawkwing', 'Swaneye', 'Birdor', 'Pikachu', 'Pidgeot', 'Hawkbeak', 'Pichu', 'Lizardflare', 'PikaHorn', 'Crestspike', 'Squirtchu', 'Crestwing', 'Leafurtle', 'pikachu', 'Bluetail', 'Greenleaf Squirtle', 'Redhat', 'Swanwing', 'Wartortle', 'Frogleaf']

		 ---> total discovered names = 47
		 ---> number of failure entries = 0
END==============================

Namespace(config_file_env='./configs/env_machine.yml', config_file_expt='./configs/expts/pokemon_all.yml', alpha=0.7, N_tta=10, num_per_category='3', num_runs=10)
Number of GPUs: 1
Device ID: 0 Device Name: NVIDIA RTX A6000
['Charmeleon', 'Swanbeak', 'Greened', 'Sparkachu', 'Squirturtle', 'Electricball', 'Raichu', 'Sylveon', 'Squirtle-like creature', 'Greenleaf', 'Swanslash', 'Squirtle', 'Staraptor', 'Sadpetal Squirtle', 'Flamizard', 'Pika', 'Sandslash', 'Green Pokemon', 'Swellow', 'Cyndaquil', 'Charmander', 'Ignisaur', 'Sadtail Pikachu', 'Blastoise', 'Flower Squirtle', 'Charizard', 'Fairesquirt', 'Hawkwing', 'Swaneye', 'Birdor', 'Pikachu', 'Pidgeot', 'Hawkbeak', 'Pichu', 'Lizardflare', 'PikaHorn', 'Crestspike', 'Squirtchu', 'Crestwing', 'Leafurtle', 'pikachu', 'Bluetail', 'Greenleaf Squirtle', 'Redhat', 'Swanwing', 'Wartortle', 'Frogleaf']
0it [00:00, ?it/s]1it [00:00,  5.05it/s]4it [00:00,  8.81it/s]6it [00:00, 11.20it/s]8it [00:00, 13.34it/s]10it [00:00, 13.04it/s]13it [00:01,  9.06it/s]15it [00:01,  8.98it/s]17it [00:01,  9.97it/s]19it [00:01, 10.65it/s]22it [00:01, 13.52it/s]24it [00:02, 13.67it/s]26it [00:02, 14.97it/s]28it [00:02, 15.28it/s]30it [00:02, 12.32it/s]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:01<00:00,  1.46s/it]100%|██████████| 1/1 [00:01<00:00,  1.58s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:01<00:00,  1.27s/it]100%|██████████| 1/1 [00:01<00:00,  1.32s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.789372444152832


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 71.53846153846153
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 81.95026331016642
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 65.98797952066484


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 78.93724060058594
=========================          END          =========================
0it [00:00, ?it/s]2it [00:00, 14.14it/s]4it [00:00, 10.23it/s]7it [00:00, 14.56it/s]9it [00:00, 13.55it/s]11it [00:00, 13.32it/s]13it [00:00, 14.22it/s]15it [00:01, 14.32it/s]17it [00:01, 15.03it/s]19it [00:01, 15.33it/s]21it [00:01, 15.75it/s]23it [00:01, 15.19it/s]25it [00:01, 15.79it/s]27it [00:01, 15.08it/s]29it [00:01, 16.07it/s]30it [00:02, 14.84it/s]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:01<00:00,  1.80s/it]100%|██████████| 1/1 [00:01<00:00,  1.91s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:01<00:00,  1.78s/it]100%|██████████| 1/1 [00:01<00:00,  1.88s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.7823934555053711


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 72.3076923076923
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 82.44214092823508
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 66.1134328358209


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 78.23934936523438
=========================          END          =========================
0it [00:00, ?it/s]2it [00:00, 14.89it/s]4it [00:00, 11.59it/s]6it [00:00, 13.60it/s]8it [00:00, 14.60it/s]10it [00:00, 14.88it/s]13it [00:00, 16.86it/s]15it [00:00, 15.77it/s]17it [00:01, 15.57it/s]19it [00:01, 15.68it/s]22it [00:01, 17.08it/s]24it [00:01, 14.66it/s]26it [00:01, 15.01it/s]28it [00:01, 14.89it/s]30it [00:01, 15.76it/s]30it [00:01, 15.28it/s]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:01<00:00,  1.87s/it]100%|██████████| 1/1 [00:01<00:00,  1.97s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:01<00:00,  1.86s/it]100%|██████████| 1/1 [00:01<00:00,  1.96s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.7877997756004333


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 70.0
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 81.37838283145075
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 65.03859442769976


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 78.77997589111328
=========================          END          =========================
0it [00:00, ?it/s]2it [00:00, 12.07it/s]4it [00:00, 10.99it/s]6it [00:00, 12.82it/s]8it [00:00, 13.77it/s]10it [00:00, 14.82it/s]12it [00:00, 16.21it/s]14it [00:01, 12.65it/s]16it [00:01, 12.41it/s]18it [00:01, 13.29it/s]21it [00:01, 15.65it/s]23it [00:01, 15.80it/s]26it [00:01, 16.77it/s]28it [00:01, 16.28it/s]30it [00:02, 14.92it/s]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:01<00:00,  1.87s/it]100%|██████████| 1/1 [00:01<00:00,  1.98s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:01<00:00,  1.86s/it]100%|██████████| 1/1 [00:01<00:00,  1.96s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.7855166792869568


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 71.53846153846153
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 82.47900596167906
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 66.20196864746629


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 78.55166625976562
=========================          END          =========================
0it [00:00, ?it/s]1it [00:00,  2.65it/s]2it [00:00,  2.06it/s]4it [00:01,  3.05it/s]5it [00:01,  3.53it/s]6it [00:01,  4.36it/s]7it [00:02,  3.97it/s]8it [00:02,  3.09it/s]9it [00:02,  3.26it/s]11it [00:02,  5.03it/s]13it [00:03,  6.97it/s]15it [00:03,  8.39it/s]17it [00:03,  9.97it/s]19it [00:03, 11.72it/s]21it [00:03, 13.31it/s]23it [00:03, 14.74it/s]25it [00:03, 15.61it/s]27it [00:03, 15.20it/s]30it [00:04, 16.43it/s]30it [00:04,  7.44it/s]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:01<00:00,  1.83s/it]100%|██████████| 1/1 [00:01<00:00,  1.93s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:01<00:00,  1.81s/it]100%|██████████| 1/1 [00:01<00:00,  1.91s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.786565363407135


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 72.3076923076923
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 82.28536165665598
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 66.24465102552752


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 78.65653991699219
=========================          END          =========================
0it [00:00, ?it/s]2it [00:00, 16.14it/s]4it [00:00,  5.78it/s]6it [00:00,  6.03it/s]7it [00:01,  6.11it/s]8it [00:01,  5.89it/s]9it [00:01,  5.53it/s]10it [00:01,  5.46it/s]11it [00:02,  4.23it/s]12it [00:02,  4.00it/s]13it [00:02,  3.81it/s]14it [00:02,  3.68it/s]15it [00:03,  3.90it/s]16it [00:03,  4.16it/s]17it [00:03,  3.39it/s]18it [00:04,  3.01it/s]19it [00:04,  3.52it/s]20it [00:04,  3.18it/s]21it [00:05,  2.60it/s]22it [00:05,  2.70it/s]23it [00:06,  2.46it/s]24it [00:06,  2.86it/s]25it [00:07,  2.19it/s]26it [00:07,  2.62it/s]27it [00:07,  3.11it/s]29it [00:07,  4.98it/s]30it [00:07,  3.94it/s]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:01<00:00,  1.81s/it]100%|██████████| 1/1 [00:01<00:00,  1.91s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:01<00:00,  1.85s/it]100%|██████████| 1/1 [00:01<00:00,  1.95s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.7819525599479675


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 71.53846153846153
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 81.33159445485518
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 65.07581921739774


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 78.19525909423828
=========================          END          =========================
0it [00:00, ?it/s]2it [00:00, 17.28it/s]4it [00:00, 10.02it/s]6it [00:00, 12.44it/s]8it [00:00, 13.67it/s]10it [00:00, 13.59it/s]12it [00:00, 15.12it/s]14it [00:01, 14.58it/s]16it [00:01,  5.35it/s]18it [00:02,  6.61it/s]20it [00:02,  6.26it/s]22it [00:03,  4.60it/s]23it [00:03,  4.66it/s]24it [00:03,  4.99it/s]25it [00:03,  3.97it/s]26it [00:04,  3.95it/s]27it [00:04,  3.41it/s]28it [00:04,  4.02it/s]29it [00:05,  3.55it/s]30it [00:05,  3.45it/s]30it [00:05,  5.62it/s]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.12s/it]100%|██████████| 1/1 [00:02<00:00,  2.23s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:01<00:00,  1.90s/it]100%|██████████| 1/1 [00:02<00:00,  2.02s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.7775742411613464


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 70.0
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 80.91855288838559
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 64.16666666666667


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 77.7574234008789
=========================          END          =========================
0it [00:00, ?it/s]1it [00:00,  8.06it/s]3it [00:00, 13.51it/s]5it [00:01,  4.07it/s]7it [00:01,  5.92it/s]9it [00:01,  7.66it/s]11it [00:01,  9.50it/s]13it [00:01,  9.55it/s]15it [00:01, 10.11it/s]17it [00:01, 10.45it/s]19it [00:02, 10.03it/s]21it [00:02,  9.95it/s]23it [00:02, 10.14it/s]25it [00:02,  9.11it/s]27it [00:02, 10.58it/s]29it [00:03, 11.27it/s]30it [00:03,  9.14it/s]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:01<00:00,  1.97s/it]100%|██████████| 1/1 [00:02<00:00,  2.07s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.16s/it]100%|██████████| 1/1 [00:02<00:00,  2.29s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.7731141448020935


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 69.23076923076923
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 80.29294895083979
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 63.167142543378


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 77.31141662597656
=========================          END          =========================
0it [00:00, ?it/s]3it [00:00, 25.74it/s]6it [00:00, 14.41it/s]8it [00:00, 13.71it/s]10it [00:00, 13.36it/s]12it [00:00, 13.45it/s]14it [00:01, 13.26it/s]16it [00:01, 12.96it/s]18it [00:01, 14.50it/s]21it [00:01, 15.90it/s]24it [00:01, 16.42it/s]27it [00:01, 17.13it/s]29it [00:01, 16.50it/s]30it [00:01, 15.30it/s]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:01<00:00,  1.86s/it]100%|██████████| 1/1 [00:01<00:00,  1.97s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:01<00:00,  1.85s/it]100%|██████████| 1/1 [00:01<00:00,  1.95s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.7787977457046509


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 69.23076923076923
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 79.52636310365648
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 62.59755734286565


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 77.87977600097656
=========================          END          =========================
0it [00:00, ?it/s]2it [00:00, 15.99it/s]4it [00:00, 12.12it/s]6it [00:00, 14.21it/s]8it [00:00, 15.07it/s]10it [00:00, 14.30it/s]12it [00:00, 15.34it/s]14it [00:00, 14.20it/s]16it [00:01, 11.02it/s]18it [00:01, 12.63it/s]21it [00:01, 15.46it/s]23it [00:01, 14.60it/s]25it [00:01, 15.60it/s]27it [00:01, 15.37it/s]30it [00:01, 18.26it/s]30it [00:01, 15.04it/s]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:01<00:00,  1.83s/it]100%|██████████| 1/1 [00:01<00:00,  1.93s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:01<00:00,  1.86s/it]100%|██████████| 1/1 [00:01<00:00,  1.96s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.7864943742752075


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 71.53846153846153
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 82.1136700515549
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 66.36097275124524


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 78.6494369506836
=========================          END          =========================


========================= ViLang Final Results of 10 runs, w/ 3 imgs per class=========================


[Clustering]
Clustering ACC: 70.92307692307693
Semantic ACC:   78.29580688476562
=========================          END          =========================
Namespace(mode='describe', config_file_env='./configs/env_machine.yml', config_file_expt='./configs/expts/pokemon_all.yml', num_per_category='3')
{'setup': 'ours', 'experiment': 5.0, 'dataset_name': 'pokemon', 'num_classes': 10, 'num_base': 5, 'num_novel': 5, 'seed': 1, 'batch_size': 256, 'clustering_method': 'multi_clip_voting', 'model_size': 'ViT-B/16', 'model_size_vqa': 'FlanT5-XXL', 'model_type_llm': 'gpt-3.5-turbo', 'image_size': 224, 'verbose': False, 'host': 'chaos', 'num_workers': 16, 'device': 'cuda', 'device_count': '1', 'device_id': '0', 'data_dir': './datasets/pokemon', 'expt_dir': './experiments/pokemon', 'expt_dir_describe': './experiments/pokemon/describe', 'path_vqa_questions': './experiments/pokemon/describe/pokemon_vqa_questions', 'path_vqa_answers': './experiments/pokemon/describe/pokemon_attributes_pairs', 'path_llm_prompts': './experiments/pokemon/describe/pokemon_llm_prompts', 'expt_dir_guess': './experiments/pokemon/guess', 'path_llm_replies_raw': './experiments/pokemon/guess/pokemon_llm_replies_raw', 'path_llm_replies_jsoned': './experiments/pokemon/guess/pokemon_llm_replies_jsoned', 'path_llm_gussed_names': './experiments/pokemon/guess/pokemon_llm_gussed_names', 'expt_dir_grouping': './experiments/pokemon/grouping'}
Loading checkpoint shards:   0%|          | 0/5 [00:00<?, ?it/s]Loading checkpoint shards:  20%|██        | 1/5 [00:02<00:08,  2.22s/it]Loading checkpoint shards:  40%|████      | 2/5 [00:04<00:06,  2.24s/it]Loading checkpoint shards:  60%|██████    | 3/5 [00:06<00:04,  2.23s/it]Loading checkpoint shards:  80%|████████  | 4/5 [00:08<00:02,  2.19s/it]Loading checkpoint shards: 100%|██████████| 5/5 [00:10<00:00,  2.11s/it]Loading checkpoint shards: 100%|██████████| 5/5 [00:10<00:00,  2.16s/it]
0it [00:00, ?it/s]1it [00:05,  5.89s/it]2it [00:11,  5.64s/it]0: label=2
==============================
Charmander_0 with label 2
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a small orange pokemon'''
        Attributes List:
        - '''color''': '''orange'''
        - '''size''': '''small'''
        - '''shape''': '''a small, orange, squirtle-like creature'''
        - '''body pattern''': '''a small, orange, scaly, lizard-like creature with'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''orange'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a stubby tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''fire'''
        - '''special markings''': '''the pokemon has a snout with a horn on it'''
        - '''ear shape''': '''a frog'''
        - '''skin texture''': '''smooth and shiny'''
        - '''evolutionary stage''': '''a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a t-shaped arm'''
        - '''facial expression''': '''a sad expression'''
        - '''unique feature''': '''it has a fire-type'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

1: label=2
==============================
Charmander_1 with label 2
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a small orange pokemon'''
        Attributes List:
        - '''color''': '''orange'''
        - '''size''': '''it is small'''
        - '''shape''': '''a small, orange, and yellow lizard'''
        - '''body pattern''': '''a scaly, squarish, snout-like'''
        - '''number of limbs''': '''four limbs'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''orange'''
        - '''mouth shape''': '''a snout'''
        - '''tail shape''': '''a slanted snout'''
        - '''number of heads''': '''two heads'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''fire'''
        - '''special markings''': '''the pokemon has a red nose and a yellow tummy'''
        - '''ear shape''': '''a frog'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a t-shaped arm'''
        - '''facial expression''': '''a smile'''
        - '''unique feature''': '''it has a tail'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

2: label=2
==============================
Charmander_2 with label 2
==============================

3it [00:17,  5.74s/it]4it [00:23,  5.95s/it]5it [00:28,  5.75s/it]
        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''brown'''
        - '''size''': '''it is small'''
        - '''shape''': '''it is a small, round, and stubby'''
        - '''body pattern''': '''it has a spherical head, a spherical body'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''the eyes are a squint'''
        - '''eye color''': '''blue'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a stubby tail with a rounded tip'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''fire'''
        - '''special markings''': '''the pokemon has a white belly and a blue tail'''
        - '''ear shape''': '''a spherical shape'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a t'''
        - '''arm shape''': '''the arms are a t shape'''
        - '''facial expression''': '''a smile'''
        - '''unique feature''': '''it has a flame on its head'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

3: label=9
==============================
Pidgeotto_3 with label 9
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a sylveon'''
        Attributes List:
        - '''color''': '''brown and pink'''
        - '''size''': '''it is a medium size'''
        - '''shape''': '''a bird with a long neck and a long tail'''
        - '''body pattern''': '''a tan body with a red head and wings'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''pink'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a swan-like tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a bird'''
        - '''special markings''': '''the pokemon has a red crest on its head'''
        - '''ear shape''': '''a spherical shape'''
        - '''skin texture''': '''a scaly texture'''
        - '''evolutionary stage''': '''a sylveon'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a slanted wing'''
        - '''arm shape''': '''a wing shape'''
        - '''facial expression''': '''a smirk'''
        - '''unique feature''': '''a bird with a long beak'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

4: label=9
==============================
Pidgeotto_4 with label 9
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a sylveon'''
        Attributes List:
        - '''color''': '''pink and brown'''
        - '''size''': '''it is a medium size'''
        - '''shape''': '''a bird'''
        - '''body pattern''': '''a bird with a long neck and a long tail'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a hawk's eye'''
        - '''eye color''': '''brown'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a swan'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a bird'''
        - '''special markings''': '''the pokemon has a red and yellow head, a white body, and a'''
        - '''ear shape''': '''a swan'''
        - '''skin texture''': '''a scaly texture'''
        - '''evolutionary stage''': '''a sylveon'''
        - '''number of wings''': '''two wings'''
        - '''leg shape''': '''a swan-like leg shape'''
        - '''arm shape''': '''a wing shape'''
        - '''facial expression''': '''a smirk'''
        - '''unique feature''': '''it has wings'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

5: label=9
==============================6it [00:33,  5.50s/it]7it [00:39,  5.68s/it]
Pidgeotto_5 with label 9
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''brown and red'''
        - '''size''': '''it is small'''
        - '''shape''': '''a bird'''
        - '''body pattern''': '''a brown body with a red head'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a hawk'''
        - '''eye color''': '''red'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a swan-like tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a bird'''
        - '''special markings''': '''a red hat and a white crest on its head'''
        - '''ear shape''': '''a spherical shape'''
        - '''skin texture''': '''smooth and shiny'''
        - '''evolutionary stage''': '''a snorlax'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle pokemon'''
        - '''arm shape''': '''a wing shape'''
        - '''facial expression''': '''a smug look'''
        - '''unique feature''': '''it has a red hat'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''yes'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

6: label=3
==============================
Charmeleon_6 with label 3
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''red'''
        - '''size''': '''it is small'''
        - '''shape''': '''it is a red and yellow pokemon'''
        - '''body pattern''': '''it has a red body with a white belly and a white tail'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''the eyes are a squint'''
        - '''eye color''': '''red'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''it is a stubby tail with a curved tip'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''fire'''
        - '''special markings''': '''the pokemon has a red body with a white belly and a white tail'''
        - '''ear shape''': '''the ear shape is a triangle'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a thigh and a shin'''
        - '''arm shape''': '''the arms are shaped like a t'''
        - '''facial expression''': '''a smirk'''
        - '''unique feature''': '''it has a tail that is on fire'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

7: label=3
==============================
Charmeleon_7 with label 3
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a red tawny tawny'''
        Attributes List:
        - '''color''': '''red'''
        - '''size''': '''it is small'''
        - '''shape''': '''a red and yellow lizard'''
        - '''body pattern''': '''a red and yellow tiger-like pattern'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''red'''
        - '''mouth shape''': '''a snout'''
        - '''tail shape''': '''a slanted tadpole tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''fire'''
        - '''special markings''': '''the pokemon has a red tummy and a white belly'''
        - '''ear shape''': '''a frog'''
        - '''skin texture''': '''a red lizard'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a t-shaped arm'''
        - '''facial expression''': '''a smirk'''
        - '''unique feature''': '''it has a fire-type'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

8it [00:45,  5.63s/it]9it [00:50,  5.53s/it]10it [00:56,  5.49s/it]END==============================

8: label=3
==============================
Charmeleon_8 with label 3
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a red pokemon with fire on its back'''
        Attributes List:
        - '''color''': '''red'''
        - '''size''': '''it is small'''
        - '''shape''': '''a red and yellow lizard'''
        - '''body pattern''': '''a red and white striped body with a black belly'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''red'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a stubby tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''fire'''
        - '''special markings''': '''the pokemon has a red body with a white belly and a white tail'''
        - '''ear shape''': '''a slanted triangle'''
        - '''skin texture''': '''a red lizard'''
        - '''evolutionary stage''': '''a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a t-shaped arm'''
        - '''facial expression''': '''angry'''
        - '''unique feature''': '''it has a flame on its head'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

9: label=1
==============================
Ivysaur_9 with label 1
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''blue'''
        - '''size''': '''it is small'''
        - '''shape''': '''a squirtle'''
        - '''body pattern''': '''a blue and green squirtle with a pink flower on its head'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''blue'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a flower'''
        - '''special markings''': '''the pokemon has a flower on its head'''
        - '''ear shape''': '''a squirtle'''
        - '''skin texture''': '''a scaly texture'''
        - '''evolutionary stage''': '''a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a squirtle'''
        - '''facial expression''': '''a sad expression'''
        - '''unique feature''': '''it has a flower on its head'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

10: label=1
==============================
Ivysaur_10 with label 1
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''green'''
        - '''size''': '''it is small'''
        - '''shape''': '''a squirtle'''
        - '''body pattern''': '''a squirtle with a flower on its head'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''green'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''grass'''
        - '''special markings''': '''the pokemon has a snout with a horn and a tail'''
        - '''ear shape''': '''a squirtle'''
        - '''skin texture''': '''a scaly texture'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a twig'''
        - '''facial expression''': '''a sad expression'''
        - '''unique feature''': '''it has a flower on its head'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

11it [01:01,  5.48s/it]12it [01:08,  5.76s/it]13it [01:13,  5.59s/it]END==============================

11: label=1
==============================
Ivysaur_11 with label 1
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''blue'''
        - '''size''': '''it is small'''
        - '''shape''': '''it is a small blue pokemon with a leaf on its back'''
        - '''body pattern''': '''it has a blue body with a green head and a pink tail'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''the eyes are a squint'''
        - '''eye color''': '''blue'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''the pokemon is a squirtle'''
        - '''special markings''': '''the pokemon has a green head, a blue body, and a pink tail'''
        - '''ear shape''': '''a squirtle'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a thigh and a thigh'''
        - '''arm shape''': '''the pokemon has a squirtle arm shape'''
        - '''facial expression''': '''a sad expression'''
        - '''unique feature''': '''it has a flower on its head'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

12: label=6
==============================
Pikachu_12 with label 6
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''pikachu'''
        Attributes List:
        - '''color''': '''yellow'''
        - '''size''': '''it is small'''
        - '''shape''': '''a small yellow pokemon'''
        - '''body pattern''': '''it has a yellow body with a black head and a black tail'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''yellow'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a slanted squirt tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''grass'''
        - '''special markings''': '''the pokemon has a yellow body with a black stripe on the side of its'''
        - '''ear shape''': '''a ear shape of a t'''
        - '''skin texture''': '''smooth'''
        - '''evolutionary stage''': '''it is a pikachu'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a t-shape'''
        - '''facial expression''': '''a sad expression'''
        - '''unique feature''': '''it has a tail'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

13: label=6
==============================
Pikachu_13 with label 6
==============================

14it [01:18,  5.44s/it]15it [01:23,  5.49s/it]16it [01:28,  5.28s/it]
        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''pikachu'''
        Attributes List:
        - '''color''': '''yellow'''
        - '''size''': '''it is small'''
        - '''shape''': '''a yellow pokemon with a black nose'''
        - '''body pattern''': '''a yellow body with black eyes and a black nose'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''yellow'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a stubby tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a pokemon'''
        - '''special markings''': '''the pokemon has a black stripe on its forehead'''
        - '''ear shape''': '''a squished triangle'''
        - '''skin texture''': '''smooth'''
        - '''evolutionary stage''': '''pikachu'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a slanted triangle'''
        - '''facial expression''': '''a pikachu with a smile on his face'''
        - '''unique feature''': '''it has a yellow head'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

14: label=6
==============================
Pikachu_14 with label 6
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''pikachu'''
        Attributes List:
        - '''color''': '''yellow'''
        - '''size''': '''it is small'''
        - '''shape''': '''it is a small yellow ball'''
        - '''body pattern''': '''it has a yellow body with a black head and a black tail'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''yellow'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a stubby tail'''
        - '''number of heads''': '''two heads'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a ball'''
        - '''special markings''': '''the pokemon has a white belly and a black tail'''
        - '''ear shape''': '''a ear shape of a squirtle'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a pikachu'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a t'''
        - '''arm shape''': '''it is a squirtle'''
        - '''facial expression''': '''a smile'''
        - '''unique feature''': '''it is a pikachu'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

15: label=4
==============================
Squirtle_15 with label 4
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a small turtle'''
        Attributes List:
        - '''color''': '''blue and yellow'''
        - '''size''': '''small'''
        - '''shape''': '''a turtle'''
        - '''body pattern''': '''a turtle with a blue head and a yellow belly'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''blue'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''sand'''
        - '''special markings''': '''the pokemon has a blue and yellow shell'''
        - '''ear shape''': '''a teddy bear'''
        - '''skin texture''': '''smooth'''
        - '''evolutionary stage''': '''a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a t-shape'''
        - '''facial expression''': '''a sad expression'''
        - '''unique feature''': '''it is a turtle'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

16: label=4
==============================
Squirtle_16 with label 4
17it [01:34,  5.28s/it]18it [01:39,  5.46s/it]==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''blue'''
        - '''size''': '''it is small'''
        - '''shape''': '''a turtle'''
        - '''body pattern''': '''it is a squirtle'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''blue'''
        - '''mouth shape''': '''a snout'''
        - '''tail shape''': '''a squirtle'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''water'''
        - '''special markings''': '''the pokemon has a blue head, a blue body, and a blue tail'''
        - '''ear shape''': '''a squirtle'''
        - '''skin texture''': '''it is smooth and shiny'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''it is a squirtle'''
        - '''facial expression''': '''a smile'''
        - '''unique feature''': '''it is a squirtle'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

17: label=4
==============================
Squirtle_17 with label 4
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a turtle'''
        Attributes List:
        - '''color''': '''blue'''
        - '''size''': '''it is a small turtle'''
        - '''shape''': '''it is a turtle'''
        - '''body pattern''': '''it is a turtle pokemon'''
        - '''number of limbs''': '''four limbs'''
        - '''eye shape''': '''the eye shape is a squint'''
        - '''eye color''': '''blue'''
        - '''mouth shape''': '''the mouth shape of the pokemon in this image is a snout'''
        - '''tail shape''': '''it is a turtle'''
        - '''number of heads''': '''two heads'''
        - '''number of eyes''': '''two eyes'''
        - '''associated element''': '''a turtle'''
        - '''special markings''': '''the pokemon has a blue shell with a brown head and a brown body with'''
        - '''ear shape''': '''the ear shape is a t'''
        - '''skin texture''': '''the skin texture is smooth and shiny'''
        - '''evolutionary stage''': '''the pokemon in this image is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a t'''
        - '''arm shape''': '''the arm shape is a t'''
        - '''facial expression''': '''a turtle pokemon'''
        - '''unique feature''': '''it is a turtle'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

18: label=5
==============================
Wartortle_18 with label 5
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''blue'''
        - '''size''': '''it is small'''
        - '''shape''': '''a turtle'''
        - '''body pattern''': '''it has a spherical body with a spherical head'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''blue'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''water'''
        - '''special markings''': '''the pokemon has a blue body with a white belly and a blue head'''
        - '''ear shape''': '''a squirtle'''
        - '''skin texture''': '''it is smooth and shiny'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''it is a squirtle'''
        - '''facial expression''': '''a smirk'''
        - '''unique feature''': '''it has a shell'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''yes'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

19it [01:45,  5.45s/it]20it [01:51,  5.55s/it]21it [01:57,  5.77s/it]END==============================

19: label=5
==============================
Wartortle_19 with label 5
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a pokemon that is a turtle'''
        Attributes List:
        - '''color''': '''blue'''
        - '''size''': '''it is a small turtle'''
        - '''shape''': '''it is a turtle'''
        - '''body pattern''': '''it has a blue body with a white belly and a white head'''
        - '''number of limbs''': '''four limbs'''
        - '''eye shape''': '''the eye shape is a squint'''
        - '''eye color''': '''blue'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''it is a squirtle'''
        - '''number of heads''': '''two heads'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a turtle'''
        - '''special markings''': '''the pokemon has a blue body with a white belly and a white head with'''
        - '''ear shape''': '''the ear shape is a t'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a t'''
        - '''arm shape''': '''the arm shape is a t'''
        - '''facial expression''': '''a turtle pokemon'''
        - '''unique feature''': '''it has a shell'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

20: label=5
==============================
Wartortle_20 with label 5
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''person, person, person, person, person, person, person, person, person, person'''
        Attributes List:
        - '''color''': '''blue'''
        - '''size''': '''it is a small pokemon'''
        - '''shape''': '''a turtle'''
        - '''body pattern''': '''a squirtle with a squirtle on its'''
        - '''number of limbs''': '''four limbs'''
        - '''eye shape''': '''a person'''
        - '''eye color''': '''blue'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a twig'''
        - '''special markings''': '''the pokemon has a squirtle on its back, and a'''
        - '''ear shape''': '''a squirtle'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''person, person, person, person, person, person, person, person, person, person'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a thigh and a thigh'''
        - '''arm shape''': '''a teddy bear'''
        - '''facial expression''': '''a smile'''
        - '''unique feature''': '''it is a squirtle'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

21: label=8
==============================
Pidgey_21 with label 8
==============================

22it [02:03,  5.81s/it]23it [02:08,  5.67s/it]
        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a bird pokemon'''
        Attributes List:
        - '''color''': '''brown and white'''
        - '''size''': '''it is a small bird'''
        - '''shape''': '''it is a bird'''
        - '''body pattern''': '''it is a bird with a brown body and white head'''
        - '''number of limbs''': '''four limbs'''
        - '''eye shape''': '''the eyes are a squint'''
        - '''eye color''': '''brown eyes'''
        - '''mouth shape''': '''the mouth shape is a slit'''
        - '''tail shape''': '''it is a swan'''
        - '''number of heads''': '''two heads'''
        - '''number of eyes''': '''two eyes'''
        - '''associated element''': '''bird'''
        - '''special markings''': '''the bird has a white crest on its head, and a white wing patch'''
        - '''ear shape''': '''the ear shape is a triangle'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''the pokemon in this image is a snorlax'''
        - '''number of wings''': '''two wings'''
        - '''leg shape''': '''the leg shape is a squirtle'''
        - '''arm shape''': '''the arm shape is a wing'''
        - '''facial expression''': '''a bird pokemon'''
        - '''unique feature''': '''it has a beak'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

22: label=8
==============================
Pidgey_22 with label 8
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a sylveon'''
        Attributes List:
        - '''color''': '''brown and white'''
        - '''size''': '''it is a medium size'''
        - '''shape''': '''a bird'''
        - '''body pattern''': '''it is a bird with a brown body and a white head'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a hawk'''
        - '''eye color''': '''brown'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a swan'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a bird'''
        - '''special markings''': '''the pokemon has a brown body with a white head and a brown tail'''
        - '''ear shape''': '''a spherical shape'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''a sylveon'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a squirtle'''
        - '''arm shape''': '''it is a swan'''
        - '''facial expression''': '''a hawk'''
        - '''unique feature''': '''it has a long neck'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

23: label=8
==============================
Pidgey_23 with label 8
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a bird'''
        Attributes List:
        - '''color''': '''brown and white'''
        - '''size''': '''it is a medium size'''
        - '''shape''': '''a bird'''
        - '''body pattern''': '''it is a bird'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a hawk'''
        - '''eye color''': '''brown'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a swan'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a bird'''
        - '''special markings''': '''the bird has a white crest on its head'''
        - '''ear shape''': '''a spherical shape'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''a sylveon'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a squirtle'''
        - '''arm shape''': '''it is a swan'''
        - '''facial expression''': '''a bird with a smirk'''
        - '''unique feature''': '''it is a bird'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

24it [02:13,  5.46s/it]25it [02:19,  5.47s/it]26it [02:24,  5.34s/it]END==============================

24: label=0
==============================
Bulbasaur_24 with label 0
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''green'''
        - '''size''': '''it is small'''
        - '''shape''': '''it is a green and red pokemon'''
        - '''body pattern''': '''a green body with a red head and a red tail'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''green'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a pokemon'''
        - '''special markings''': '''the pokemon has a green body with a red nose and eyes'''
        - '''ear shape''': '''a frog'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a thigh shape'''
        - '''arm shape''': '''the arms are shaped like a t'''
        - '''facial expression''': '''a smile'''
        - '''unique feature''': '''it has a green body and red eyes'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

25: label=0
==============================
Bulbasaur_25 with label 0
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''blue'''
        - '''size''': '''it is small'''
        - '''shape''': '''a small, green, leafy creature'''
        - '''body pattern''': '''a spherical body with a tail'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''green'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''leaf'''
        - '''special markings''': '''the pokemon has a green leaf on its back'''
        - '''ear shape''': '''a squirtle'''
        - '''skin texture''': '''smooth'''
        - '''evolutionary stage''': '''a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a squirtle'''
        - '''facial expression''': '''a sad expression'''
        - '''unique feature''': '''it has a leaf on its back'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

26: label=0
==============================
Bulbasaur_26 with label 0
==============================

27it [02:29,  5.38s/it]28it [02:35,  5.48s/it]
        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''green'''
        - '''size''': '''it is small'''
        - '''shape''': '''a small, green, squirtle-like creature'''
        - '''body pattern''': '''a spherical body with a rounded head and a s'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''green'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''grass'''
        - '''special markings''': '''the pokemon has a large green pouch on its back'''
        - '''ear shape''': '''a squirtle'''
        - '''skin texture''': '''a scaly texture'''
        - '''evolutionary stage''': '''a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a squirtle'''
        - '''facial expression''': '''a sad expression'''
        - '''unique feature''': '''it has a backpack'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

27: label=7
==============================
Raichu_27 with label 7
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''pikachu'''
        Attributes List:
        - '''color''': '''yellow'''
        - '''size''': '''it is small'''
        - '''shape''': '''it is a small, yellow, and brown pokemon'''
        - '''body pattern''': '''it has a squirtle tail and a squirt'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''yellow'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a pokemon that is a squirtle'''
        - '''special markings''': '''the pokemon has a yellow body with a black tail and a white t'''
        - '''ear shape''': '''a squiggly tail'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a pikachu'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a t'''
        - '''arm shape''': '''the arm shape is a t'''
        - '''facial expression''': '''a smile'''
        - '''unique feature''': '''it has a tail'''
        - '''body posturetail presence''': '''yes'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

28: label=7
==============================
Raichu_28 with label 7
==============================

29it [02:40,  5.54s/it]30it [02:46,  5.59s/it]30it [02:46,  5.56s/it]

        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''pikachu, person, person, person, person, person, person, person, person'''
        Attributes List:
        - '''color''': '''orange and white'''
        - '''size''': '''it is small'''
        - '''shape''': '''it is a small, yellow, and brown pokemon'''
        - '''body pattern''': '''it is a squirtle'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''yellow'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a pig tail'''
        - '''number of heads''': '''two heads'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a pokemon'''
        - '''special markings''': '''the pokemon has a yellow head, a yellow body, and a yellow tail'''
        - '''ear shape''': '''a squished ear shape'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a pikachu'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a t'''
        - '''arm shape''': '''it is a teddy bear'''
        - '''facial expression''': '''sad'''
        - '''unique feature''': '''it has a horn on its head'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

29: label=7
==============================
Raichu_29 with label 7
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a pikachu'''
        Attributes List:
        - '''color''': '''brown'''
        - '''size''': '''it is small'''
        - '''shape''': '''a small, stubby, snoutlike creature with a long'''
        - '''body pattern''': '''it has a squirtle like pattern on its back'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''brown'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a pig tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a pokemon'''
        - '''special markings''': '''the pokemon has a snout with a horn on it, and'''
        - '''ear shape''': '''a squished ear'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a pikachu'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a thigh and a thigh'''
        - '''arm shape''': '''the arm shape is a t'''
        - '''facial expression''': '''a smirk'''
        - '''unique feature''': '''it has a tail'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''yes'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

Succ. dumped attribute values to ./experiments/pokemon/describe/pokemon_attributes_pairs_3
Succ. dumped LLM prompts  to ./experiments/pokemon/describe/pokemon_llm_prompts_3
Namespace(mode='guess', config_file_env='./configs/env_machine.yml', config_file_expt='./configs/expts/pokemon_all.yml', num_per_category='3')
{'setup': 'ours', 'experiment': 5.0, 'dataset_name': 'pokemon', 'num_classes': 10, 'num_base': 5, 'num_novel': 5, 'seed': 1, 'batch_size': 256, 'clustering_method': 'multi_clip_voting', 'model_size': 'ViT-B/16', 'model_size_vqa': 'FlanT5-XXL', 'model_type_llm': 'gpt-3.5-turbo', 'image_size': 224, 'verbose': False, 'host': 'chaos', 'num_workers': 16, 'device': 'cuda', 'device_count': '1', 'device_id': '0', 'data_dir': './datasets/pokemon', 'expt_dir': './experiments/pokemon', 'expt_dir_describe': './experiments/pokemon/describe', 'path_vqa_questions': './experiments/pokemon/describe/pokemon_vqa_questions', 'path_vqa_answers': './experiments/pokemon/describe/pokemon_attributes_pairs', 'path_llm_prompts': './experiments/pokemon/describe/pokemon_llm_prompts', 'expt_dir_guess': './experiments/pokemon/guess', 'path_llm_replies_raw': './experiments/pokemon/guess/pokemon_llm_replies_raw', 'path_llm_replies_jsoned': './experiments/pokemon/guess/pokemon_llm_replies_jsoned', 'path_llm_gussed_names': './experiments/pokemon/guess/pokemon_llm_gussed_names', 'expt_dir_grouping': './experiments/pokemon/grouping'}
0it [00:00, ?it/s]0it [00:17, ?it/s]
╭───────────────────── Traceback (most recent call last) ──────────────────────╮
│ /home/hdl/miniconda3/envs/finer/lib/python3.9/site-packages/tenacity/__init_ │
│ _.py:382 in __call__                                                         │
│                                                                              │
│   379 │   │   │   do = self.iter(retry_state=retry_state)                    │
│   380 │   │   │   if isinstance(do, DoAttempt):                              │
│   381 │   │   │   │   try:                                                   │
│ ❱ 382 │   │   │   │   │   result = fn(*args, **kwargs)                       │
│   383 │   │   │   │   except BaseException:  # noqa: B902                    │
│   384 │   │   │   │   │   retry_state.set_exception(sys.exc_info())  # type: │
│   385 │   │   │   │   else:                                                  │
│                                                                              │
│ /home/hdl/project/FineR/FineR_0/agents/llm_bot.py:57 in call_gpts            │
│                                                                              │
│    54 │   │   │   max_tokens=max_tokens                                      │
│    55 │   │   )                                                              │
│    56 │   else:                                                              │
│ ❱  57 │   │   response = client.chat.completions.create(                     │
│    58 │   │   │   model=model,                                               │
│    59 │   │   │   messages=chatgpt_messages,                                 │
│    60 │   │   │   temperature=temperature                                    │
│                                                                              │
│ /home/hdl/miniconda3/envs/finer/lib/python3.9/site-packages/openai/_utils/_u │
│ tils.py:287 in wrapper                                                       │
│                                                                              │
│   284 │   │   │   │   │   else:                                              │
│   285 │   │   │   │   │   │   msg = f"Missing required argument: {quote(miss │
│   286 │   │   │   │   raise TypeError(msg)                                   │
│ ❱ 287 │   │   │   return func(*args, **kwargs)                               │
│   288 │   │                                                                  │
│   289 │   │   return wrapper  # type: ignore                                 │
│   290                                                                        │
│                                                                              │
│ /home/hdl/miniconda3/envs/finer/lib/python3.9/site-packages/openai/resources │
│ /chat/completions/completions.py:1147 in create                              │
│                                                                              │
│   1144 │   │   timeout: float | httpx.Timeout | None | NotGiven = NOT_GIVEN, │
│   1145 │   ) -> ChatCompletion | Stream[ChatCompletionChunk]:                │
│   1146 │   │   validate_response_format(response_format)                     │
│ ❱ 1147 │   │   return self._post(                                            │
│   1148 │   │   │   "/chat/completions",                                      │
│   1149 │   │   │   body=maybe_transform(                                     │
│   1150 │   │   │   │   {                                                     │
│                                                                              │
│ /home/hdl/miniconda3/envs/finer/lib/python3.9/site-packages/openai/_base_cli │
│ ent.py:1259 in post                                                          │
│                                                                              │
│   1256 │   │   opts = FinalRequestOptions.construct(                         │
│   1257 │   │   │   method="post", url=path, json_data=body, files=to_httpx_f │
│   1258 │   │   )                                                             │
│ ❱ 1259 │   │   return cast(ResponseT, self.request(cast_to, opts, stream=str │
│   1260 │                                                                     │
│   1261 │   def patch(                                                        │
│   1262 │   │   self,                                                         │
│                                                                              │
│ /home/hdl/miniconda3/envs/finer/lib/python3.9/site-packages/openai/_base_cli │
│ ent.py:1047 in request                                                       │
│                                                                              │
│   1044 │   │   │   │   │   err.response.read()                               │
│   1045 │   │   │   │                                                         │
│   1046 │   │   │   │   log.debug("Re-raising status error")                  │
│ ❱ 1047 │   │   │   │   raise self._make_status_error_from_response(err.respo │
│   1048 │   │   │                                                             │
│   1049 │   │   │   break                                                     │
│   1050                                                                       │
╰──────────────────────────────────────────────────────────────────────────────╯
AuthenticationError: Error code: 401 - {'error': {'message': '无效的sk 
token，请检查token是否正确', 'type': 'error'}}

The above exception was the direct cause of the following exception:

╭───────────────────── Traceback (most recent call last) ──────────────────────╮
│ /home/hdl/project/FineR/FineR_0/discovering.py:394 in <module>               │
│                                                                              │
│   391 │   │   llm_bot = LLMBot(model=cfg['model_type_llm'])                  │
│   392 │   │                                                                  │
│   393 │   │   # run the main program                                         │
│ ❱ 394 │   │   raw_replies, jsoned_replies = main_guess(cfg, llm_bot, reasoni │
│   395 │   │                                                                  │
│   396 │   │   # save LLM replis                                              │
│   397 │   │   dump_json(cfg['path_llm_replies_raw'] + expt_id_suffix, raw_re │
│                                                                              │
│ /home/hdl/project/FineR/FineR_0/discovering.py:170 in main_guess             │
│                                                                              │
│   167 │                                                                      │
│   168 │   # LLM inferring                                                    │
│   169 │   for i, (key, prompt) in tqdm(enumerate(prompt_list.items())):      │
│ ❱ 170 │   │   raw_reply = bot.infer(prompt, temperature=0.9)  # use a high t │
│   171 │   │   used_tokens = bot.get_used_tokens()                            │
│   172 │   │                                                                  │
│   173 │   │   replies_raw[key] = raw_reply                                   │
│                                                                              │
│ /home/hdl/project/FineR/FineR_0/agents/llm_bot.py:119 in infer               │
│                                                                              │
│   116 │   │   return reply, total_prompt, n_tokens                           │
│   117 │                                                                      │
│   118 │   def infer(self, prompt, temperature=0.9):                          │
│ ❱ 119 │   │   reply, _, n_tokens = self.__query(prompt, temperature, max_tok │
│   120 │   │   self.total_tokens += n_tokens                                  │
│   121 │   │   return reply.strip()                                           │
│   122                                                                        │
│                                                                              │
│ /home/hdl/project/FineR/FineR_0/agents/llm_bot.py:109 in __query             │
│                                                                              │
│   106 │                                                                      │
│   107 │   def __query(self, prompt, temperature, max_token):                 │
│   108 │   │   total_prompt = prepare_chatgpt_message(prompt)                 │
│ ❱ 109 │   │   reply, n_tokens = call_gpts(                                   │
│   110 │   │   │   client=self.client,                                        │
│   111 │   │   │   chatgpt_messages=total_prompt,                             │
│   112 │   │   │   temperature=temperature,                                   │
│                                                                              │
│ /home/hdl/miniconda3/envs/finer/lib/python3.9/site-packages/tenacity/__init_ │
│ _.py:289 in wrapped_f                                                        │
│                                                                              │
│   286 │   │                                                                  │
│   287 │   │   @functools.wraps(f)                                            │
│   288 │   │   def wrapped_f(*args: t.Any, **kw: t.Any) -> t.Any:             │
│ ❱ 289 │   │   │   return self(f, *args, **kw)                                │
│   290 │   │                                                                  │
│   291 │   │   def retry_with(*args: t.Any, **kwargs: t.Any) -> WrappedFn:    │
│   292 │   │   │   return self.copy(*args, **kwargs).wraps(f)                 │
│                                                                              │
│ /home/hdl/miniconda3/envs/finer/lib/python3.9/site-packages/tenacity/__init_ │
│ _.py:379 in __call__                                                         │
│                                                                              │
│   376 │   │                                                                  │
│   377 │   │   retry_state = RetryCallState(retry_object=self, fn=fn, args=ar │
│   378 │   │   while True:                                                    │
│ ❱ 379 │   │   │   do = self.iter(retry_state=retry_state)                    │
│   380 │   │   │   if isinstance(do, DoAttempt):                              │
│   381 │   │   │   │   try:                                                   │
│   382 │   │   │   │   │   result = fn(*args, **kwargs)                       │
│                                                                              │
│ /home/hdl/miniconda3/envs/finer/lib/python3.9/site-packages/tenacity/__init_ │
│ _.py:326 in iter                                                             │
│                                                                              │
│   323 │   │   │   retry_exc = self.retry_error_cls(fut)                      │
│   324 │   │   │   if self.reraise:                                           │
│   325 │   │   │   │   raise retry_exc.reraise()                              │
│ ❱ 326 │   │   │   raise retry_exc from fut.exception()                       │
│   327 │   │                                                                  │
│   328 │   │   if self.wait:                                                  │
│   329 │   │   │   sleep = self.wait(retry_state)                             │
╰──────────────────────────────────────────────────────────────────────────────╯
RetryError: RetryError[<Future at 0x7f0d4a5d3850 state=finished raised 
AuthenticationError>]
Namespace(mode='postprocess', config_file_env='./configs/env_machine.yml', config_file_expt='./configs/expts/pokemon_all.yml', num_per_category='3')
{'setup': 'ours', 'experiment': 5.0, 'dataset_name': 'pokemon', 'num_classes': 10, 'num_base': 5, 'num_novel': 5, 'seed': 1, 'batch_size': 256, 'clustering_method': 'multi_clip_voting', 'model_size': 'ViT-B/16', 'model_size_vqa': 'FlanT5-XXL', 'model_type_llm': 'gpt-3.5-turbo', 'image_size': 224, 'verbose': False, 'host': 'chaos', 'num_workers': 16, 'device': 'cuda', 'device_count': '1', 'device_id': '0', 'data_dir': './datasets/pokemon', 'expt_dir': './experiments/pokemon', 'expt_dir_describe': './experiments/pokemon/describe', 'path_vqa_questions': './experiments/pokemon/describe/pokemon_vqa_questions', 'path_vqa_answers': './experiments/pokemon/describe/pokemon_attributes_pairs', 'path_llm_prompts': './experiments/pokemon/describe/pokemon_llm_prompts', 'expt_dir_guess': './experiments/pokemon/guess', 'path_llm_replies_raw': './experiments/pokemon/guess/pokemon_llm_replies_raw', 'path_llm_replies_jsoned': './experiments/pokemon/guess/pokemon_llm_replies_jsoned', 'path_llm_gussed_names': './experiments/pokemon/guess/pokemon_llm_gussed_names', 'expt_dir_grouping': './experiments/pokemon/grouping'}
Charmander_0
{
    "Squirtle": [
        "Squirtle is a small, orange Pokemon with a stubby, snout-like creature.",
        "It has a spherical body with a spherical head and four limbs.",
        "The Pokemon has a squint eye shape and orange eyes.",
        "Its mouth shape is a slit and it has a stubby tail.",
        "Squirtle has two heads and two eyes."
    ],
    "Charmander": [
        "Squirtle is a small, orange Pokemon with a stubby, snout-like creature.",
        "It has a spherical body with a spherical head and four limbs.",
        "The Pokemon has a squint eye shape and orange eyes.",
        "Its mouth shape is a slit and it has a stubby tail.",
        "Squirtle has two heads and two eyes."
    ],
    "Cyndaquil": [
        "Squirtle is a small, orange Pokemon with a stubby, snout-like creature.",
        "It has a spherical body with a spherical head and four limbs.",
        "The Pokemon has a squint eye shape and orange eyes.",
        "Its mouth shape is a slit and it has a stubby tail.",
        "Squirtle has two heads and two eyes."
    ]
}


Charmander_1
{
    "Squirtle": [
        "This pokemon is a small orange creature with a scaly, stubby, snout-like head, two heads, and two squinty orange eyes.",
        "It has a small, lizard-like body with a tail, four limbs, and smooth skin texture.",
        "The special markings of this pokemon are a bright red nose and a yellow tummy.",
        "Its mouth is in the shape of a snout and its ears resemble those of a frog.",
        "It is associated with the fire element and has a smile as its facial expression."
    ],
    "Charmander": [
        "This pokemon is a small orange creature with a scaly, stubby, snout-like head, two heads, and two squinty orange eyes.",
        "It has a small, lizard-like body with a tail, four limbs, and smooth skin texture.",
        "The special markings of this pokemon are a bright red nose and a yellow tummy.",
        "Its mouth is in the shape of a snout and its ears resemble those of a frog.",
        "It is associated with the fire element and has a smile as its facial expression."
    ],
    "Charmeleon": [
        "This pokemon is a small orange creature with a scaly, stubby, snout-like head, two heads, and two squinty orange eyes.",
        "It has a small, lizard-like body with a tail, four limbs, and smooth skin texture.",
        "The special markings of this pokemon are a bright red nose and a yellow tummy.",
        "Its mouth is in the shape of a snout and its ears resemble those of a frog.",
        "It is associated with the fire element and has a smile as its facial expression."
    ]
}


Charmander_2
{
  "Squirtle": [
    "A squirtle is a small, round, and stubby pokemon with a brown color.",
    "It has a spherical head and body with a white belly and blue tummy.",
    "This pokemon has four limbs in a T shape and two heads with squinty blue eyes and a slit mouth.",
    "It also has a stubby tail and a spherical shape ear.",
    "The skin is smooth and it has a flame on its head."
  ],
  "Wartortle": [
    "A squirtle is a small, round, and stubby pokemon with a brown color.",
    "It has a spherical head and body with a white belly and blue tummy.",
    "This pokemon has four limbs in a T shape and two heads with squinty blue eyes and a slit mouth.",
    "It also has a stubby tail and a spherical shape ear.",
    "The skin is smooth and it has a flame on its head."
  ],
  "Blastoise": [
    "A squirtle is a small, round, and stubby pokemon with a brown color.",
    "It has a spherical head and body with a white belly and blue tummy.",
    "This pokemon has four limbs in a T shape and two heads with squinty blue eyes and a slit mouth.",
    "It also has a stubby tail and a spherical shape ear.",
    "The skin is smooth and it has a flame on its head."
  ]
}


Pidgey_3
{
    "Swellow": [
        "The Pokemon in the image is a bird with a brown and white body pattern.",
        "It is small in size and has a beak.",
        "It has a white crest on its head and a white wing patch.",
        "It has two heads and two eyes with a squint shape.",
        "The Pokemon has four limbs, two wings, and a tail shaped like a swan."
    ],
    "Pidgeot": [
        "The Pokemon in the image is a bird with a brown and white body pattern.",
        "It is small in size and has a beak.",
        "It has a white crest on its head and a white wing patch.",
        "It has two heads and two eyes with a squint shape.",
        "The Pokemon has four limbs, two wings, and a tail shaped like a swan."
    ],
    "Staraptor": [
        "The Pokemon in the image is a bird with a brown and white body pattern.",
        "It is small in size and has a beak.",
        "It has a white crest on its head and a white wing patch.",
        "It has two heads and two eyes with a squint shape.",
        "The Pokemon has four limbs, two wings, and a tail shaped like a swan."
    ]
}


Pidgey_4
{
  "Crestwing": [
    "This is a medium-sized bird with a brown head and a white belly.",
    "It has four limbs and two heads with two eyes each.",
    "The bird has a hawk-like eye shape and brown eyes.",
    "It has a slit-shaped mouth and a tail resembling that of a swan.",
    "The bird has a unique white crest on its head and a spherical ear shape."
  ],
  "Swaneye": [
    "This is a medium-sized bird with a brown head and a white belly.",
    "It has four limbs and two heads with two eyes each.",
    "The bird has a hawk-like eye shape and brown eyes.",
    "It has a slit-shaped mouth and a tail resembling that of a swan.",
    "The bird has a unique white crest on its head and a spherical ear shape."
  ],
  "Hawkbeak": [
    "This is a medium-sized bird with a brown head and a white belly.",
    "It has four limbs and two heads with two eyes each.",
    "The bird has a hawk-like eye shape and brown eyes.",
    "It has a slit-shaped mouth and a tail resembling that of a swan.",
    "The bird has a unique white crest on its head and a spherical ear shape."
  ]
}


Pidgey_5
{
    "Sylveon": [
        "A Sylveon is a medium-sized bird-like Pokemon with brown and white feathers.",
        "Its body is covered in brown feathers with a white head and a red beak.",
        "The Pokemon has two heads and two eyes, which are brown and shaped like a hawk.",
        "It has a spherical-shaped ear and a scaly skin texture.",
        "The Sylveon has a unique feature of a long neck and two wings."
    ],
    "Hawkwing": [
        "A Sylveon is a medium-sized bird-like Pokemon with brown and white feathers.",
        "Its body is covered in brown feathers with a white head and a red beak.",
        "The Pokemon has two heads and two eyes, which are brown and shaped like a hawk.",
        "It has a spherical-shaped ear and a scaly skin texture.",
        "The Sylveon has a unique feature of a long neck and two wings."
    ],
    "Swanbeak": [
        "A Sylveon is a medium-sized bird-like Pokemon with brown and white feathers.",
        "Its body is covered in brown feathers with a white head and a red beak.",
        "The Pokemon has two heads and two eyes, which are brown and shaped like a hawk.",
        "It has a spherical-shaped ear and a scaly skin texture.",
        "The Sylveon has a unique feature of a long neck and two wings."
    ]
}


Pidgeotto_6
{
    "Sylveon": [
        "This image features a Pokemon called Sylveon, which is a bird-like creature with a medium size.",
        "It has a tan body with a red head and wings, and it is characterized by its brown and pink coloration.",
        "Sylveon has a unique shape with a long neck, long tail, and a swan-like tail.",
        "It has four limbs and two heads with squinty pink eyes.",
        "The Pokemon has a slit mouth and a spherical ear shape."
    ],
    "Birdor": [
        "This image features a Pokemon called Birdor, which is a bird-like creature with a medium size.",
        "It has a tan body with a red head and wings, and it is characterized by its brown and pink coloration.",
        "Birdor has a unique shape with a long neck, long tail, and a swan-like tail.",
        "It has four limbs and two heads with squinty pink eyes.",
        "The Pokemon has a slit mouth and a spherical ear shape."
    ],
    "Swanwing": [
        "This image features a Pokemon called Swanwing, which is a bird-like creature with a medium size.",
        "It has a tan body with a red head and wings, and it is characterized by its brown and pink coloration.",
        "Swanwing has a unique shape with a long neck, long tail, and a swan-like tail.",
        "It has four limbs and two heads with squinty pink eyes.",
        "The Pokemon has a slit mouth and a spherical ear shape."
    ]
}


Pidgeotto_7
{
    "Sylveon": [
        "Sylveon is a medium-sized bird-like Pokémon with a pink and brown coloration. It has a brown body with a yellow head and wings.",
        "The Pokémon has four limbs, two heads, and two eyes with a hawk-like shape. Its eye color is brown, and its mouth has a slit shape.",
        "The tail resembles that of a swan. It has a special marking of a red and yellow crest on its head, along with a white ear shape similar to a swan.",
        "Sylveon's skin texture is smooth. It is in the evolutionary stage of being a Sandslash.",
        "It has two wings and legs shaped like a Squirtle. Its arms have a wing-like shape. The Pokémon has a smug facial expression and a unique feature of wings."
    ],
    "Sandslash": [
        "Sylveon is in the evolutionary stage of being a Sandslash. Its coloration is pink and brown, and its size is medium.",
        "It has a brown body with a yellow head and wings. The Pokémon has four limbs, two heads, and two eyes with a hawk-like shape.",
        "The eye color is brown, and the mouth has a slit shape. The tail resembles that of a swan.",
        "Sylveon has a special marking of a red and yellow crest on its head, along with a white ear shape similar to a swan. Its skin texture is smooth.",
        "It has two wings and legs shaped like a Squirtle. Its arms have a wing-like shape. The Pokémon has a smug facial expression and a unique feature of wings."
    ],
    "Swanslash": [
        "Sylveon resembles a bird, particularly a swan, with its medium size and pink and brown coloration.",
        "Its brown body has a yellow head and wings. The Pokémon has four limbs, two heads, and two eyes with a hawk-like shape.",
        "The eye color is brown, and the mouth has a slit shape. The tail is shaped like that of a swan.",
        "Sylveon has a special marking of a red and yellow crest on its head, along with a white ear shape similar to a swan. Its skin texture is smooth.",
        "It has two wings and legs shaped like a Squirtle. Its arms have a wing-like shape. The Pokémon has a smug facial expression and a unique feature of wings."
    ]
}


Pidgeotto_8
{
  "Squirtle": [
    "The image shows a pokemon resembling a squirtle with a brown body and a red head.",
    "It has a small size and a bird-like shape.",
    "The pokemon has hawk-shaped red eyes and a slit-shaped mouth.",
    "It has a swan-like tail and two heads, with two eyes on each head.",
    "The pokemon is associated with the bird element and has a special marking of a red hat with a white crest on its head."
  ],
  "Redhat": [
    "The image shows a pokemon resembling a squirtle with a brown body and a red head.",
    "It has a small size and a bird-like shape.",
    "The pokemon has hawk-shaped red eyes and a slit-shaped mouth.",
    "It has a swan-like tail and two heads, with two eyes on each head.",
    "The pokemon is associated with the bird element and has a special marking of a red hat with a white crest on its head."
  ],
  "Crestspike": [
    "The image shows a pokemon resembling a squirtle with a brown body and a red head.",
    "It has a small size and a bird-like shape.",
    "The pokemon has hawk-shaped red eyes and a slit-shaped mouth.",
    "It has a swan-like tail and two heads, with two eyes on each head.",
    "The pokemon is associated with the bird element and has a special marking of a red hat with a white crest on its head."
  ]
}


Charmeleon_9
{
    "Flamizard": [
        "The image shows a small red fire type pokemon with a red and white striped body, black belly, and a flame on its head.",
        "It has a sad expression with squint-shaped red eyes and a slit-shaped mouth.",
        "The pokemon has two heads, two eyes, and four limbs.",
        "It has a stubby tail with a curved tip and no presence of fins, horns, or crests.",
        "The unique features include slanted triangle-shaped ears, a red scaly skin, and a spike on its body."
    ],
    "Lizardflare": [
        "The image shows a small red fire type pokemon with a red and white striped body, black belly, and a flame on its head.",
        "It has a sad expression with squint-shaped red eyes and a slit-shaped mouth.",
        "The pokemon has two heads, two eyes, and four limbs.",
        "It has a stubby tail with a curved tip and no presence of fins, horns, or crests.",
        "The unique features include slanted triangle-shaped ears, a red scaly skin, and a spike on its body."
    ],
    "Ignisaur": [
        "The image shows a small red fire type pokemon with a red and white striped body, black belly, and a flame on its head.",
        "It has a sad expression with squint-shaped red eyes and a slit-shaped mouth.",
        "The pokemon has two heads, two eyes, and four limbs.",
        "It has a stubby tail with a curved tip and no presence of fins, horns, or crests.",
        "The unique features include slanted triangle-shaped ears, a red scaly skin, and a spike on its body."
    ]
}


Charmeleon_10
{
    "Squirtle": [
        "The pokemon in the image is a small, red-colored creature that resembles a lizard.",
        "It has a tiger-like pattern on its body and a red tummy with a white belly.",
        "With four limbs and two heads, it has squinted red eyes and a snout-like mouth.",
        "Its tail is slanted and resembles a tadpole.",
        "This pokemon is associated with the fire element and has the ability of a fire-type."
    ],
    "Charmander": [
        "The pokemon in the image is a small, red-colored creature that resembles a lizard.",
        "It has a tiger-like pattern on its body and a red tummy with a white belly.",
        "With four limbs and two heads, it has squinted red eyes and a snout-like mouth.",
        "Its tail is slanted and resembles a tadpole.",
        "This pokemon is associated with the fire element and has the ability of a fire-type."
    ],
    "Charizard": [
        "The pokemon in the image is a small, red-colored creature that resembles a lizard.",
        "It has a tiger-like pattern on its body and a red tummy with a white belly.",
        "With four limbs and two heads, it has squinted red eyes and a snout-like mouth.",
        "Its tail is slanted and resembles a tadpole.",
        "This pokemon is associated with the fire element and has the ability of a fire-type."
    ]
}


Charmeleon_11
{
    "Squirtle": [
        "A squirtle is a small, red and yellow pokemon with a red body, white belly, and white tail.",
        "It has four limbs, two heads, and two eyes that are squint and red in color.",
        "The pokemon has a slit mouth and a stubby tail with a curved tip.",
        "It is associated with the fire element and has special markings on its body.",
        "The squirtle has a triangular ear shape, smooth skin texture, and a smirk facial expression."
    ],
    "Charmeleon": [
        "A squirtle is a small, red and yellow pokemon with a red body, white belly, and white tail.",
        "It has four limbs, two heads, and two eyes that are squint and red in color.",
        "The pokemon has a slit mouth and a stubby tail with a curved tip.",
        "It is associated with the fire element and has special markings on its body.",
        "The squirtle has a triangular ear shape, smooth skin texture, and a smirk facial expression."
    ],
    "Charizard": [
        "A squirtle is a small, red and yellow pokemon with a red body, white belly, and white tail.",
        "It has four limbs, two heads, and two eyes that are squint and red in color.",
        "The pokemon has a slit mouth and a stubby tail with a curved tip.",
        "It is associated with the fire element and has special markings on its body.",
        "The squirtle has a triangular ear shape, smooth skin texture, and a smirk facial expression."
    ]
}


Squirtle_12
{
    "Squirtle": [
        "This is a small turtle-like pokemon called Squirtle.",
        "It has a blue body with a yellow head and a yellow tail.",
        "The pokemon has a sad expression with squinted blue eyes and a slit mouth.",
        "It has four limbs and two heads with two blue eyes.",
        "Squirtle is associated with the element of sand and has a smooth skin texture."
    ],
    "Wartortle": [
        "This is a small turtle-like pokemon called Wartortle.",
        "It has a blue body with a yellow head and a yellow tail.",
        "The pokemon has a sad expression with squinted blue eyes and a slit mouth.",
        "It has four limbs and two heads with two blue eyes.",
        "Wartortle is associated with the element of sand and has a smooth skin texture."
    ],
    "Blastoise": [
        "This is a small turtle-like pokemon called Blastoise.",
        "It has a blue body with a yellow head and a yellow tail.",
        "The pokemon has a sad expression with squinted blue eyes and a slit mouth.",
        "It has four limbs and two heads with two blue eyes.",
        "Blastoise is associated with the element of sand and has a smooth skin texture."
    ]
}


Squirtle_13
{
    "Squirtle": [
        "Squirtle is a small, blue turtle-like Pokémon with a smooth skin texture.",
        "It has a squint eye shape and blue eyes.",
        "The mouth is in the form of a snout.",
        "Squirtle has a unique body pattern that resembles a squirtle.",
        "It has four limbs, a tail, and two heads."
    ],
    "Wartortle": [
        "Wartortle evolves from Squirtle and is a larger, more powerful water-type Pokémon.",
        "It retains the same blue color and turtle-like shape.",
        "Wartortle has evolved to have a larger body size and more defined limbs.",
        "It still has a snout-shaped mouth and two squint eyes.",
        "The special markings on Wartortle include a darker blue tail and the presence of a spike on its back."
    ],
    "Blastoise": [
        "Blastoise is the final evolution stage of Squirtle, following Wartortle.",
        "It is a larger, more heavily built Pokémon with a dark blue color.",
        "Blastoise has a more pronounced turtle shape and a distinctive cannon-like structure on its back.",
        "It has two heads, a snout-shaped mouth, and blue eyes.",
        "The special markings of Blastoise include water cannons on its shell and a spike on its back."
    ]
}


Squirtle_14
{
    "Squirtle": [
        "This is a blue turtle with a small size and a smooth skin texture.",
        "It has a squint eye shape and blue eyes.",
        "The mouth shape is a slit and it has a turtle-shaped body with a tail.",
        "It has two heads and two limbs.",
        "The pokemon is a squirtle in its evolutionary stage."
    ],
    "Wartortle": [
        "This is a blue turtle with a small size and a smooth skin texture.",
        "It has a squint eye shape and blue eyes.",
        "The mouth shape is a slit and it has a turtle-shaped body with a tail.",
        "It has two heads and two limbs.",
        "The pokemon is a squirtle in its evolutionary stage."
    ],
    "Blastoise": [
        "This is a blue turtle with a small size and a smooth skin texture.",
        "It has a squint eye shape and blue eyes.",
        "The mouth shape is a slit and it has a turtle-shaped body with a tail.",
        "It has two heads and two limbs.",
        "The pokemon is a squirtle in its evolutionary stage."
    ]
}


Bulbasaur_15
{
    "Squirtle": [
        "A squirtle is a small and green pokemon with a red head and tail.",
        "It has four limbs and a squinty green eyes.",
        "The mouth is in a slit shape and the unique feature of this pokemon is its green body with red eyes.",
        "It has two heads and two eyes.",
        "The skin texture of the squirtle is smooth and it is at the evolutionary stage of being a squirtle."
    ],
    "Greened": [
        "A squirtle is a small and green pokemon with a red head and tail.",
        "It has four limbs and a squinty green eyes.",
        "The mouth is in a slit shape and the unique feature of this pokemon is its green body with red eyes.",
        "It has two heads and two eyes.",
        "The skin texture of the squirtle is smooth and it is at the evolutionary stage of being a squirtle."
    ],
    "Frogleaf": [
        "A squirtle is a small and green pokemon with a red head and tail.",
        "It has four limbs and a squinty green eyes.",
        "The mouth is in a slit shape and the unique feature of this pokemon is its green body with red eyes.",
        "It has two heads and two eyes.",
        "The skin texture of the squirtle is smooth and it is at the evolutionary stage of being a squirtle."
    ]
}


Bulbasaur_16
{
    "Squirtle": [
        "Squirtle is a small, green, leafy creature with a sad expression.",
        "It has a leaf on its back and is associated with the grass element.",
        "It has four limbs, two heads, and two eyes which are squinted and green in color.",
        "Squirtle has a smooth skin texture and its body shape resembles a squirtle.",
        "It does not have wings, fins, or horns, but it does have a spike on its back."
    ],
    "Greenleaf": [
        "Greenleaf is a small, green, leafy creature with a sad expression.",
        "It has a leaf on its back and is associated with the grass element.",
        "It has four limbs, two heads, and two eyes which are squinted and green in color.",
        "Greenleaf has a smooth skin texture and its body shape resembles a squirtle.",
        "It does not have wings, fins, or horns, but it does have a spike on its back."
    ],
    "Leafurtle": [
        "Leafurtle is a small, green, leafy creature with a sad expression.",
        "It has a leaf on its back and is associated with the grass element.",
        "It has four limbs, two heads, and two eyes which are squinted and green in color.",
        "Leafurtle has a smooth skin texture and its body shape resembles a squirtle.",
        "It does not have wings, fins, or horns, but it does have a spike on its back."
    ]
}


Bulbasaur_17
{
    "Squirtle": [
        "This image shows a small, green Pokemon called Squirtle.",
        "It has a spherical body with a rounded head and two squinty green eyes.",
        "The Pokemon has a sad facial expression and its mouth is in the shape of a slit.",
        "It has four limbs, each ending in a Squirtle-like shape.",
        "Squirtle has a unique feature, which is a backpack-like pouch on its back."
    ],
    "Squirtle-like creature": [
        "This image shows a small, green Pokemon called Squirtle-like creature.",
        "It has a spherical body with a rounded head and two squinty green eyes.",
        "The Pokemon has a sad facial expression and its mouth is in the shape of a slit.",
        "It has four limbs, each ending in a Squirtle-like shape.",
        "Squirtle-like creature has a unique feature, which is a backpack-like pouch on its back."
    ],
    "Green Pokemon": [
        "This image shows a small, green Pokemon called Green Pokemon.",
        "It has a spherical body with a rounded head and two squinty green eyes.",
        "The Pokemon has a sad facial expression and its mouth is in the shape of a slit.",
        "It has four limbs, each ending in a Squirtle-like shape.",
        "Green Pokemon has a unique feature, which is a backpack-like pouch on its back."
    ]
}


Raichu_18
{
    "Pikachu": [
        "This image shows a small, yellow pokemon called Pikachu.",
        "It has a Squirtle-like tail and a snout, and its body has special markings with a yellow color, a black tail, and a white t.",
        "Pikachu has a squint eye shape with yellow eyes and a smiley facial expression.",
        "It has two heads, two eyes, and four limbs, with a small and smooth skin texture.",
        "Pikachu is associated with the water element and has a unique feature of having a tail."
    ],
    "Pichu": [
        "This image shows a small, yellow pokemon called Pichu.",
        "It has a Squirtle-like tail and a snout, and its body has special markings with a yellow color, a black tail, and a white t.",
        "Pichu has a squint eye shape with yellow eyes and a smiley facial expression.",
        "It has two heads, two eyes, and four limbs, with a small and smooth skin texture.",
        "Pichu is associated with the water element and has a unique feature of having a tail."
    ],
    "Raichu": [
        "This image shows a small, yellow pokemon called Raichu.",
        "It has a Squirtle-like tail and a snout, and its body has special markings with a yellow color, a black tail, and a white t.",
        "Raichu has a squint eye shape with yellow eyes and a smiley facial expression.",
        "It has two heads, two eyes, and four limbs, with a small and smooth skin texture.",
        "Raichu is associated with the water element and has a unique feature of having a tail."
    ]
}


Raichu_19
{
    "PikaHorn": [
        "This image shows a small, brown pikachu with a snout-like shape and a pigtail tail.",
        "It has a squirtle-like pattern on its back.",
        "The pikachu has four limbs and two heads, with two squinty brown eyes and a slit mouth.",
        "It has a unique feature of a horn on its snout and a sad expression.",
        "The skin texture is smooth, and it is in the evolutionary stage of a pikachu."
    ],
    "Squirtchu": [
        "This image shows a small, brown pikachu with a snout-like shape and a pigtail tail.",
        "It has a squirtle-like pattern on its back.",
        "The pikachu has four limbs and two heads, with two squinty brown eyes and a slit mouth.",
        "It has a unique feature of a horn on its snout and a sad expression.",
        "The skin texture is smooth, and it is in the evolutionary stage of a pikachu."
    ],
    "Sadtail Pikachu": [
        "This image shows a small, brown pikachu with a snout-like shape and a pigtail tail.",
        "It has a squirtle-like pattern on its back.",
        "The pikachu has four limbs and two heads, with two squinty brown eyes and a slit mouth.",
        "It has a unique feature of a horn on its snout and a sad expression.",
        "The skin texture is smooth, and it is in the evolutionary stage of a pikachu."
    ]
}


Raichu_20
{
    "Pikachu": [
        "This is a small, orange and white Pokemon called Pikachu.",
        "It has a yellow body, a yellow head, and a yellow tail.",
        "It has two heads and two eyes, with a squint eye shape and yellow eye color.",
        "Pikachu has a small size and a smooth skin texture.",
        "It has a unique feature of a horn."
    ],
    "Pika": [
        "This is a small, orange and white Pokemon called Pikachu.",
        "It has a yellow body, a yellow head, and a yellow tail.",
        "It has two heads and two eyes, with a squint eye shape and yellow eye color.",
        "Pikachu has a small size and a smooth skin texture.",
        "It has a unique feature of a horn."
    ],
    "Sparkachu": [
        "This is a small, orange and white Pokemon called Pikachu.",
        "It has a yellow body, a yellow head, and a yellow tail.",
        "It has two heads and two eyes, with a squint eye shape and yellow eye color.",
        "Pikachu has a small size and a smooth skin texture.",
        "It has a unique feature of a horn."
    ]
}


Wartortle_21
{
  "Squirtle": [
    "A squirtle is a small-sized turtle-like Pokemon with a blue body and a white belly.",
    "It has a blue head with a squint-shaped blue eyes and a slit-like mouth.",
    "The Pokemon has two heads and four limbs.",
    "It is associated with the water element and has a tail shaped like a squirtle.",
    "It has smooth and shiny skin and a unique feature of having a shell."
  ],
  "Wartortle": [
    "A squirtle is a small-sized turtle-like Pokemon with a blue body and a white belly.",
    "It has a blue head with a squint-shaped blue eyes and a slit-like mouth.",
    "The Pokemon has two heads and four limbs.",
    "It is associated with the water element and has a tail shaped like a squirtle.",
    "It has smooth and shiny skin and a unique feature of having a shell."
  ],
  "Blastoise": [
    "A squirtle is a small-sized turtle-like Pokemon with a blue body and a white belly.",
    "It has a blue head with a squint-shaped blue eyes and a slit-like mouth.",
    "The Pokemon has two heads and four limbs.",
    "It is associated with the water element and has a tail shaped like a squirtle.",
    "It has smooth and shiny skin and a unique feature of having a shell."
  ]
}


Wartortle_22
{
   "Squirturtle": [
      "The pokemon in the image is a small, blue turtle-like creature with a squirtle pattern on its body.",
      "It has four limbs and two heads with squinted blue eyes and a slit-like mouth.",
      "The pokemon has a fairy element associated with it and special markings in the form of a squirtle on its back and a smooth skin texture.",
      "It is at an early evolutionary stage and does not have any wings, fins, or horns.",
      "Its unique feature is that it is a squirtle. The pokemon has a friendly facial expression with a smile."
   ],
   "Bluetail": [
      "The pokemon in the image is a small, blue turtle-like creature with a squirtle pattern on its body.",
      "It has four limbs and two heads with squinted blue eyes and a slit-like mouth.",
      "The pokemon has a fairy element associated with it and special markings in the form of a squirtle on its back and a smooth skin texture.",
      "It is at an early evolutionary stage and does not have any wings, fins, or horns.",
      "Its unique feature is that it is a squirtle. The pokemon has a friendly facial expression with a smile."
   ],
   "Fairesquirt": [
      "The pokemon in the image is a small, blue turtle-like creature with a squirtle pattern on its body.",
      "It has four limbs and two heads with squinted blue eyes and a slit-like mouth.",
      "The pokemon has a fairy element associated with it and special markings in the form of a squirtle on its back and a smooth skin texture.",
      "It is at an early evolutionary stage and does not have any wings, fins, or horns.",
      "Its unique feature is that it is a squirtle. The pokemon has a friendly facial expression with a smile."
   ]
}


Wartortle_23
{
    "Squirtle": [
        "This is a small, blue turtle-like pokemon with a white belly and head.",
        "It has four limbs that are shaped like a turtle's arms and a tail shaped like a squirtle.",
        "It has two heads and two blue squint-shaped eyes.",
        "The pokemon has a sad facial expression and a slit mouth.",
        "Its ears are in the shape of a 't' and it doesn't have any fins, horns, or crests/spikes."
    ],
    "Wartortle": [
        "This is a small, blue turtle-like pokemon with a white belly and head.",
        "It has four limbs that are shaped like a turtle's arms and a tail shaped like a squirtle.",
        "It has two heads and two blue squint-shaped eyes.",
        "The pokemon has a sad facial expression and a slit mouth.",
        "Its ears are in the shape of a 't' and it doesn't have any fins, horns, or crests/spikes."
    ],
    "Blastoise": [
        "This is a small, blue turtle-like pokemon with a white belly and head.",
        "It has four limbs that are shaped like a turtle's arms and a tail shaped like a squirtle.",
        "It has two heads and two blue squint-shaped eyes.",
        "The pokemon has a sad facial expression and a slit mouth.",
        "Its ears are in the shape of a 't' and it doesn't have any fins, horns, or crests/spikes."
    ]
}


Ivysaur_24
{
"Flower Squirtle": [
"A Squirtle with a flower on its head is a small, green Pokemon with a scaly texture.",
"It has a sad facial expression and squinted blue eyes.",
"The Pokemon has four limbs, two heads, and two eyes.",
"It has a slit mouth and a unique feature of a flower on its head.",
"The body pattern of this Squirtle includes a splotch of green on its back."
],
"Greenleaf Squirtle": [
"A Squirtle with a flower on its head is a small, green Pokemon with a scaly texture.",
"It has a sad facial expression and squinted blue eyes.",
"The Pokemon has four limbs, two heads, and two eyes.",
"It has a slit mouth and a unique feature of a flower on its head.",
"The body pattern of this Squirtle includes a splotch of green on its back."
],
"Sadpetal Squirtle": [
"A Squirtle with a flower on its head is a small, green Pokemon with a scaly texture.",
"It has a sad facial expression and squinted blue eyes.",
"The Pokemon has four limbs, two heads, and two eyes.",
"It has a slit mouth and a unique feature of a flower on its head.",
"The body pattern of this Squirtle includes a splotch of green on its back."
]
}


Ivysaur_25
{
    "Squirtle": [
        "This image shows a small blue Pokemon known as Squirtle.",
        "It has a leaf on its back and a body with a green head and a pink tail.",
        "Squirtle has four limbs, two heads, and two eyes.",
        "Its eyes are squinted and blue in color.",
        "The mouth is in the shape of a slit."
    ],
    "Wartortle": [
        "This image shows a small blue Pokemon known as Wartortle.",
        "It has a leaf on its back and a body with a green head and a pink tail.",
        "Wartortle has four limbs, two heads, and two eyes.",
        "Its eyes are squinted and blue in color.",
        "The mouth is in the shape of a slit."
    ],
    "Blastoise": [
        "This image shows a small blue Pokemon known as Blastoise.",
        "It has a leaf on its back and a body with a green head and a pink tail.",
        "Blastoise has four limbs, two heads, and two eyes.",
        "Its eyes are squinted and blue in color.",
        "The mouth is in the shape of a slit."
    ]
}


Ivysaur_26
{
    "Squirtle": [
        "This image is of a small, blue pokemon called Squirtle.",
        "It has a blue and green body pattern with a pink flower on its head.",
        "Squirtle has four limbs, two heads, and two squinty blue eyes.",
        "Its mouth has a slit shape and it has a tail specific to Squirtle.",
        "The pokemon is associated with a flower and has special markings in the form of a flower on its head."
    ],
    "Wartortle": [
        "This image is of a small, blue pokemon called Wartortle.",
        "It has a blue and green body pattern with a pink flower on its head.",
        "Wartortle has four limbs, two heads, and two squinty blue eyes.",
        "Its mouth has a slit shape and it has a tail specific to Wartortle.",
        "The pokemon is associated with a flower and has special markings in the form of a flower on its head."
    ],
    "Blastoise": [
        "This image is of a small, blue pokemon called Blastoise.",
        "It has a blue and green body pattern with a pink flower on its head.",
        "Blastoise has four limbs, two heads, and two squinty blue eyes.",
        "Its mouth has a slit shape and it has a tail specific to Blastoise.",
        "The pokemon is associated with a flower and has special markings in the form of a flower on its head."
    ]
}


Pikachu_27
{
  "Pikachu": [
    "Pikachu is a small, yellow Pokemon with a black nose and black eyes.",
    "It has a squinty eye shape and a slit mouth shape.",
    "The Pokemon has a stubby tail and two heads.",
    "It is associated with the element of electricity.",
    "Pikachu has a unique feature of a yellow head and a smooth skin texture."
  ],
  "Pichu": [
    "Pikachu is a small, yellow Pokemon with a black nose and black eyes.",
    "It has a squinty eye shape and a slit mouth shape.",
    "The Pokemon has a stubby tail and two heads.",
    "It is associated with the element of electricity.",
    "Pikachu has a unique feature of a yellow head and a smooth skin texture."
  ],
  "Raichu": [
    "Pikachu is a small, yellow Pokemon with a black nose and black eyes.",
    "It has a squinty eye shape and a slit mouth shape.",
    "The Pokemon has a stubby tail and two heads.",
    "It is associated with the element of electricity.",
    "Pikachu has a unique feature of a yellow head and a smooth skin texture."
  ]
}


Pikachu_28
{
"pikachu": [
"Summary: Pikachu is a small, yellow Pokémon with a body shape of a small yellow ball.",
"It has a yellow squinty eyes, a slit mouth, and a stubby tail.",
"It has two heads with two eyes each.",
"Pikachu has a smooth and shiny skin texture.",
"It is a unique Pokémon belonging to the evolutionary stage of Pikachu."
],
"Pika": [
"Summary: Pikachu is a small, yellow Pokémon with a body shape of a small yellow ball.",
"It has a yellow squinty eyes, a slit mouth, and a stubby tail.",
"It has two heads with two eyes each.",
"Pikachu has a smooth and shiny skin texture.",
"It is a unique Pokémon belonging to the evolutionary stage of Pikachu."
],
"Electricball": [
"Summary: Pikachu is a small, yellow Pokémon with a body shape of a small yellow ball.",
"It has a yellow squinty eyes, a slit mouth, and a stubby tail.",
"It has two heads with two eyes each.",
"Pikachu has a smooth and shiny skin texture.",
"It is a unique Pokémon belonging to the evolutionary stage of Pikachu."
]
}


Pikachu_29
{
    "Pikachu": [
        "The pokemon in the image is a yellow Pikachu, small in size with a yellow body, black head, and a black tail.",
        "It has four limbs and a squint eye shape with yellow eyes.",
        "The mouth has a slit shape.",
        "The Pikachu has a unique feature of a tail and it is at the evolutionary stage of a Pikachu.",
        "There are no fins, horns, or crests present. The pokemon has a sad facial expression and associated with the element of lightning."
    ],
    "Pichu": [
        "The pokemon in the image is a yellow Pichu, small in size with a yellow body, black head, and a black tail.",
        "It has four limbs and a squint eye shape with yellow eyes.",
        "The mouth has a slit shape.",
        "The Pichu has a unique feature of a tail and it is at an early evolutionary stage.",
        "There are no fins, horns, or crests present. The pokemon has a sad facial expression and associated with the element of lightning."
    ],
    "Raichu": [
        "The pokemon in the image is a yellow Raichu, small in size with a yellow body, black head, and a black tail.",
        "It has four limbs and a squint eye shape with yellow eyes.",
        "The mouth has a slit shape.",
        "The Raichu has a unique feature of a tail and it is at an advanced evolutionary stage.",
        "There are no fins, horns, or crests present. The pokemon has a sad facial expression and associated with the element of lightning."
    ]
}


==============================
		 Finished Post-processing
==============================
		 ---> total discovered names = 47
['Sparkachu', 'Charmeleon', 'Swanslash', 'Charmander', 'Squirtle', 'Sylveon', 'Greenleaf', 'pikachu', 'Lizardflare', 'Swaneye', 'Raichu', 'Greened', 'PikaHorn', 'Crestwing', 'Hawkbeak', 'Electricball', 'Swanbeak', 'Cyndaquil', 'Staraptor', 'Frogleaf', 'Greenleaf Squirtle', 'Pidgeot', 'Flower Squirtle', 'Birdor', 'Charizard', 'Hawkwing', 'Leafurtle', 'Pichu', 'Redhat', 'Swellow', 'Green Pokemon', 'Crestspike', 'Sandslash', 'Squirtle-like creature', 'Squirturtle', 'Pikachu', 'Sadtail Pikachu', 'Fairesquirt', 'Blastoise', 'Ignisaur', 'Sadpetal Squirtle', 'Swanwing', 'Squirtchu', 'Bluetail', 'Flamizard', 'Pika', 'Wartortle']

		 ---> total discovered names = 47
		 ---> number of failure entries = 0
END==============================

Namespace(config_file_env='./configs/env_machine.yml', config_file_expt='./configs/expts/pokemon_all.yml', alpha=0.7, N_tta=10, num_per_category='3', num_runs=10)
Number of GPUs: 1
Device ID: 0 Device Name: NVIDIA RTX A6000
['Sparkachu', 'Charmeleon', 'Swanslash', 'Charmander', 'Squirtle', 'Sylveon', 'Greenleaf', 'pikachu', 'Lizardflare', 'Swaneye', 'Raichu', 'Greened', 'PikaHorn', 'Crestwing', 'Hawkbeak', 'Electricball', 'Swanbeak', 'Cyndaquil', 'Staraptor', 'Frogleaf', 'Greenleaf Squirtle', 'Pidgeot', 'Flower Squirtle', 'Birdor', 'Charizard', 'Hawkwing', 'Leafurtle', 'Pichu', 'Redhat', 'Swellow', 'Green Pokemon', 'Crestspike', 'Sandslash', 'Squirtle-like creature', 'Squirturtle', 'Pikachu', 'Sadtail Pikachu', 'Fairesquirt', 'Blastoise', 'Ignisaur', 'Sadpetal Squirtle', 'Swanwing', 'Squirtchu', 'Bluetail', 'Flamizard', 'Pika', 'Wartortle']
0it [00:00, ?it/s]1it [00:00,  6.27it/s]4it [00:00, 10.38it/s]6it [00:00, 12.85it/s]8it [00:00, 14.11it/s]10it [00:00, 14.21it/s]12it [00:00, 15.57it/s]14it [00:01, 14.87it/s]16it [00:01, 14.68it/s]18it [00:01, 15.87it/s]21it [00:01, 18.04it/s]24it [00:01, 18.03it/s]26it [00:01, 17.95it/s]28it [00:01, 18.33it/s]30it [00:01, 18.73it/s]30it [00:01, 15.96it/s]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:01<00:00,  1.94s/it]100%|██████████| 1/1 [00:02<00:00,  2.04s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:01<00:00,  1.54s/it]100%|██████████| 1/1 [00:01<00:00,  1.62s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.789372444152832


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 71.53846153846153
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 81.95026331016642
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 65.98797952066484


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 78.93724060058594
=========================          END          =========================
0it [00:00, ?it/s]1it [00:00,  3.57it/s]2it [00:00,  4.57it/s]3it [00:00,  3.96it/s]4it [00:01,  3.24it/s]5it [00:01,  3.28it/s]6it [00:01,  3.83it/s]8it [00:01,  4.97it/s]9it [00:02,  4.87it/s]10it [00:02,  4.34it/s]11it [00:02,  3.92it/s]12it [00:02,  4.30it/s]13it [00:03,  3.84it/s]14it [00:03,  4.27it/s]15it [00:03,  4.66it/s]17it [00:03,  6.94it/s]19it [00:03,  8.86it/s]21it [00:03, 10.68it/s]23it [00:04, 12.45it/s]26it [00:04, 14.83it/s]29it [00:04, 16.42it/s]30it [00:04,  6.79it/s]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.41s/it]100%|██████████| 1/1 [00:02<00:00,  2.54s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.05s/it]100%|██████████| 1/1 [00:02<00:00,  2.17s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.7823934555053711


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 72.3076923076923
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 82.44214092823508
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 66.1134328358209


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 78.23934936523438
=========================          END          =========================
0it [00:00, ?it/s]2it [00:00, 13.65it/s]4it [00:00, 10.36it/s]6it [00:00, 12.84it/s]8it [00:00, 11.17it/s]10it [00:00, 10.69it/s]13it [00:01, 13.06it/s]15it [00:01, 13.51it/s]17it [00:01, 14.58it/s]20it [00:01, 17.24it/s]23it [00:01, 18.39it/s]25it [00:01, 18.15it/s]27it [00:01, 16.76it/s]30it [00:01, 17.55it/s]30it [00:01, 15.05it/s]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.03s/it]100%|██████████| 1/1 [00:02<00:00,  2.14s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.05s/it]100%|██████████| 1/1 [00:02<00:00,  2.17s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.7877997756004333


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 70.0
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 81.37838283145075
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 65.03859442769976


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 78.77997589111328
=========================          END          =========================
0it [00:00, ?it/s]1it [00:00,  5.07it/s]2it [00:00,  5.19it/s]3it [00:00,  4.04it/s]4it [00:01,  2.93it/s]5it [00:01,  2.80it/s]6it [00:01,  3.51it/s]7it [00:02,  3.10it/s]8it [00:02,  3.01it/s]9it [00:02,  3.76it/s]10it [00:02,  4.34it/s]11it [00:02,  4.52it/s]12it [00:03,  4.88it/s]13it [00:03,  5.73it/s]14it [00:03,  5.52it/s]15it [00:03,  4.25it/s]16it [00:04,  4.23it/s]18it [00:04,  6.10it/s]20it [00:04,  7.22it/s]21it [00:04,  6.84it/s]22it [00:04,  6.56it/s]23it [00:04,  5.40it/s]24it [00:05,  4.58it/s]25it [00:05,  5.04it/s]26it [00:05,  5.15it/s]27it [00:05,  5.54it/s]28it [00:05,  5.88it/s]29it [00:06,  6.46it/s]30it [00:06,  6.87it/s]30it [00:06,  4.87it/s]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.31s/it]100%|██████████| 1/1 [00:02<00:00,  2.42s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.14s/it]100%|██████████| 1/1 [00:02<00:00,  2.27s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.7855166792869568


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 71.53846153846153
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 82.47900596167906
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 66.20196864746629


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 78.55166625976562
=========================          END          =========================
0it [00:00, ?it/s]2it [00:00, 18.21it/s]4it [00:00, 11.99it/s]6it [00:00, 12.84it/s]8it [00:00, 14.25it/s]10it [00:00, 13.74it/s]12it [00:00, 15.22it/s]14it [00:00, 14.34it/s]16it [00:01, 14.94it/s]18it [00:01, 14.60it/s]20it [00:01, 15.22it/s]23it [00:01, 16.72it/s]25it [00:01, 17.21it/s]27it [00:01, 16.75it/s]29it [00:01, 17.15it/s]30it [00:01, 15.55it/s]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.17s/it]100%|██████████| 1/1 [00:02<00:00,  2.29s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.04s/it]100%|██████████| 1/1 [00:02<00:00,  2.16s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.786565363407135


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 72.3076923076923
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 82.28536165665598
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 66.24465102552752


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 78.65653991699219
=========================          END          =========================
0it [00:00, ?it/s]1it [00:00,  3.98it/s]2it [00:00,  4.20it/s]3it [00:00,  4.71it/s]4it [00:01,  3.50it/s]5it [00:01,  3.13it/s]6it [00:01,  3.48it/s]7it [00:02,  3.25it/s]8it [00:02,  3.50it/s]9it [00:02,  3.57it/s]10it [00:02,  4.14it/s]11it [00:02,  4.69it/s]13it [00:03,  5.84it/s]14it [00:03,  4.92it/s]15it [00:03,  4.44it/s]16it [00:03,  4.27it/s]17it [00:04,  4.99it/s]18it [00:04,  4.98it/s]19it [00:04,  4.24it/s]20it [00:04,  4.85it/s]21it [00:04,  5.69it/s]22it [00:04,  5.81it/s]23it [00:05,  5.49it/s]24it [00:05,  5.39it/s]25it [00:05,  4.93it/s]26it [00:05,  4.94it/s]27it [00:06,  4.73it/s]28it [00:06,  4.85it/s]29it [00:06,  4.15it/s]30it [00:06,  3.50it/s]30it [00:06,  4.32it/s]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.27s/it]100%|██████████| 1/1 [00:02<00:00,  2.39s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:01<00:00,  1.60s/it]100%|██████████| 1/1 [00:01<00:00,  1.68s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.7819525599479675


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 71.53846153846153
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 81.33159445485518
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 65.07581921739774


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 78.19525909423828
=========================          END          =========================
0it [00:00, ?it/s]2it [00:00, 13.20it/s]4it [00:00,  7.30it/s]6it [00:00,  9.03it/s]8it [00:00, 10.39it/s]10it [00:01, 10.24it/s]12it [00:01, 12.10it/s]14it [00:01, 13.10it/s]17it [00:01, 14.97it/s]20it [00:01, 16.86it/s]22it [00:01, 16.62it/s]24it [00:01, 17.17it/s]26it [00:01, 17.66it/s]28it [00:02, 17.05it/s]30it [00:02, 16.49it/s]30it [00:02, 13.98it/s]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.05s/it]100%|██████████| 1/1 [00:02<00:00,  2.17s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.04s/it]100%|██████████| 1/1 [00:02<00:00,  2.16s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.7775742411613464


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 70.0
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 80.91855288838559
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 64.16666666666667


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 77.7574234008789
=========================          END          =========================
0it [00:00, ?it/s]1it [00:01,  1.14s/it]2it [00:02,  1.03it/s]3it [00:03,  1.04s/it]4it [00:04,  1.13s/it]5it [00:05,  1.12s/it]6it [00:06,  1.11s/it]7it [00:07,  1.09s/it]8it [00:08,  1.06s/it]9it [00:09,  1.08s/it]10it [00:10,  1.08s/it]11it [00:11,  1.09s/it]12it [00:12,  1.06s/it]13it [00:14,  1.11s/it]14it [00:15,  1.11s/it]15it [00:16,  1.11s/it]16it [00:17,  1.11s/it]17it [00:18,  1.02it/s]19it [00:18,  1.74it/s]20it [00:18,  2.04it/s]21it [00:18,  2.36it/s]22it [00:19,  2.73it/s]24it [00:19,  3.74it/s]26it [00:19,  3.99it/s]27it [00:20,  3.79it/s]28it [00:20,  3.98it/s]29it [00:20,  4.12it/s]30it [00:20,  3.89it/s]30it [00:20,  1.44it/s]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.45s/it]100%|██████████| 1/1 [00:02<00:00,  2.59s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.49s/it]100%|██████████| 1/1 [00:02<00:00,  2.61s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.7731141448020935


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 69.23076923076923
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 80.29294895083979
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 63.167142543378


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 77.31141662597656
=========================          END          =========================
0it [00:00, ?it/s]1it [00:00,  5.70it/s]2it [00:01,  1.45it/s]3it [00:01,  1.99it/s]4it [00:01,  2.10it/s]5it [00:02,  2.13it/s]6it [00:02,  2.06it/s]7it [00:03,  2.15it/s]8it [00:03,  2.15it/s]9it [00:04,  1.98it/s]10it [00:04,  2.03it/s]11it [00:05,  2.11it/s]12it [00:05,  2.03it/s]13it [00:06,  2.14it/s]14it [00:06,  2.27it/s]15it [00:06,  2.47it/s]16it [00:07,  3.12it/s]18it [00:07,  5.11it/s]20it [00:07,  6.92it/s]23it [00:07,  9.92it/s]25it [00:07, 11.50it/s]27it [00:07, 13.02it/s]29it [00:07, 14.30it/s]30it [00:07,  3.83it/s]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.09s/it]100%|██████████| 1/1 [00:02<00:00,  2.20s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.09s/it]100%|██████████| 1/1 [00:02<00:00,  2.21s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.7787977457046509


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 69.23076923076923
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 79.52636310365648
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 62.59755734286565


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 77.87977600097656
=========================          END          =========================
0it [00:00, ?it/s]1it [00:00,  1.19it/s]2it [00:01,  1.09it/s]3it [00:02,  1.09it/s]4it [00:04,  1.09s/it]5it [00:05,  1.21s/it]6it [00:06,  1.25s/it]7it [00:08,  1.27s/it]8it [00:09,  1.31s/it]9it [00:10,  1.36s/it]10it [00:12,  1.35s/it]11it [00:13,  1.28s/it]12it [00:14,  1.28s/it]13it [00:16,  1.28s/it]14it [00:17,  1.30s/it]15it [00:18,  1.30s/it]16it [00:19,  1.31s/it]17it [00:20,  1.01s/it]18it [00:20,  1.27it/s]19it [00:20,  1.68it/s]20it [00:20,  2.14it/s]21it [00:21,  2.62it/s]22it [00:21,  2.64it/s]23it [00:21,  2.64it/s]24it [00:22,  2.75it/s]25it [00:22,  3.25it/s]26it [00:22,  3.29it/s]27it [00:22,  3.23it/s]28it [00:23,  3.32it/s]29it [00:23,  3.61it/s]30it [00:23,  4.29it/s]30it [00:23,  1.27it/s]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.53s/it]100%|██████████| 1/1 [00:02<00:00,  2.69s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:01<00:00,  2.00s/it]100%|██████████| 1/1 [00:02<00:00,  2.13s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.7864943742752075


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 71.53846153846153
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 82.1136700515549
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 66.36097275124524


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 78.6494369506836
=========================          END          =========================


========================= ViLang Final Results of 10 runs, w/ 3 imgs per class=========================


[Clustering]
Clustering ACC: 70.92307692307693
Semantic ACC:   78.29580688476562
=========================          END          =========================
Namespace(mode='describe', config_file_env='./configs/env_machine.yml', config_file_expt='./configs/expts/pokemon_all.yml', num_per_category='3')
{'setup': 'ours', 'experiment': 5.0, 'dataset_name': 'pokemon', 'num_classes': 10, 'num_base': 5, 'num_novel': 5, 'seed': 1, 'batch_size': 256, 'clustering_method': 'multi_clip_voting', 'model_size': 'ViT-B/16', 'model_size_vqa': 'FlanT5-XXL', 'model_type_llm': 'gpt-3.5-turbo', 'image_size': 224, 'verbose': False, 'host': 'chaos', 'num_workers': 16, 'device': 'cuda', 'device_count': '1', 'device_id': '0', 'data_dir': './datasets/pokemon', 'expt_dir': './experiments/pokemon', 'expt_dir_describe': './experiments/pokemon/describe', 'path_vqa_questions': './experiments/pokemon/describe/pokemon_vqa_questions', 'path_vqa_answers': './experiments/pokemon/describe/pokemon_attributes_pairs', 'path_llm_prompts': './experiments/pokemon/describe/pokemon_llm_prompts', 'expt_dir_guess': './experiments/pokemon/guess', 'path_llm_replies_raw': './experiments/pokemon/guess/pokemon_llm_replies_raw', 'path_llm_replies_jsoned': './experiments/pokemon/guess/pokemon_llm_replies_jsoned', 'path_llm_gussed_names': './experiments/pokemon/guess/pokemon_llm_gussed_names', 'expt_dir_grouping': './experiments/pokemon/grouping'}
Loading checkpoint shards:   0%|          | 0/5 [00:00<?, ?it/s]Loading checkpoint shards:  20%|██        | 1/5 [00:03<00:15,  3.79s/it]Loading checkpoint shards:  40%|████      | 2/5 [00:06<00:08,  2.97s/it]Loading checkpoint shards:  60%|██████    | 3/5 [00:08<00:05,  2.59s/it]Loading checkpoint shards:  80%|████████  | 4/5 [00:10<00:02,  2.39s/it]Loading checkpoint shards: 100%|██████████| 5/5 [00:12<00:00,  2.24s/it]Loading checkpoint shards: 100%|██████████| 5/5 [00:12<00:00,  2.48s/it]
0it [00:00, ?it/s]1it [00:06,  6.04s/it]2it [00:12,  6.29s/it]0: label=2
==============================
Charmander_0 with label 2
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a small orange pokemon'''
        Attributes List:
        - '''color''': '''orange'''
        - '''size''': '''small'''
        - '''shape''': '''a small, orange, squirtle-like creature'''
        - '''body pattern''': '''a small, orange, scaly, lizard-like creature with'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''orange'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a stubby tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''fire'''
        - '''special markings''': '''the pokemon has a snout with a horn on it'''
        - '''ear shape''': '''a frog'''
        - '''skin texture''': '''smooth and shiny'''
        - '''evolutionary stage''': '''a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a t-shaped arm'''
        - '''facial expression''': '''a sad expression'''
        - '''unique feature''': '''it has a fire-type'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

1: label=2
==============================
Charmander_1 with label 2
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a small orange pokemon'''
        Attributes List:
        - '''color''': '''orange'''
        - '''size''': '''it is small'''
        - '''shape''': '''a small, orange, and yellow lizard'''
        - '''body pattern''': '''a scaly, squarish, snout-like'''
        - '''number of limbs''': '''four limbs'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''orange'''
        - '''mouth shape''': '''a snout'''
        - '''tail shape''': '''a slanted snout'''
        - '''number of heads''': '''two heads'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''fire'''
        - '''special markings''': '''the pokemon has a red nose and a yellow tummy'''
        - '''ear shape''': '''a frog'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a t-shaped arm'''
        - '''facial expression''': '''a smile'''
        - '''unique feature''': '''it has a tail'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

2: label=2
==============================
Charmander_2 with label 2
==============================

3it [00:18,  6.37s/it]4it [00:25,  6.35s/it]5it [00:31,  6.15s/it]
        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''brown'''
        - '''size''': '''it is small'''
        - '''shape''': '''it is a small, round, and stubby'''
        - '''body pattern''': '''it has a spherical head, a spherical body'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''the eyes are a squint'''
        - '''eye color''': '''blue'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a stubby tail with a rounded tip'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''fire'''
        - '''special markings''': '''the pokemon has a white belly and a blue tail'''
        - '''ear shape''': '''a spherical shape'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a t'''
        - '''arm shape''': '''the arms are a t shape'''
        - '''facial expression''': '''a smile'''
        - '''unique feature''': '''it has a flame on its head'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

3: label=9
==============================
Pidgeotto_3 with label 9
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a sylveon'''
        Attributes List:
        - '''color''': '''brown and pink'''
        - '''size''': '''it is a medium size'''
        - '''shape''': '''a bird with a long neck and a long tail'''
        - '''body pattern''': '''a tan body with a red head and wings'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''pink'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a swan-like tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a bird'''
        - '''special markings''': '''the pokemon has a red crest on its head'''
        - '''ear shape''': '''a spherical shape'''
        - '''skin texture''': '''a scaly texture'''
        - '''evolutionary stage''': '''a sylveon'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a slanted wing'''
        - '''arm shape''': '''a wing shape'''
        - '''facial expression''': '''a smirk'''
        - '''unique feature''': '''a bird with a long beak'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

4: label=9
==============================
Pidgeotto_4 with label 9
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a sylveon'''
        Attributes List:
        - '''color''': '''pink and brown'''
        - '''size''': '''it is a medium size'''
        - '''shape''': '''a bird'''
        - '''body pattern''': '''a bird with a long neck and a long tail'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a hawk's eye'''
        - '''eye color''': '''brown'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a swan'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a bird'''
        - '''special markings''': '''the pokemon has a red and yellow head, a white body, and a'''
        - '''ear shape''': '''a swan'''
        - '''skin texture''': '''a scaly texture'''
        - '''evolutionary stage''': '''a sylveon'''
        - '''number of wings''': '''two wings'''
        - '''leg shape''': '''a swan-like leg shape'''
        - '''arm shape''': '''a wing shape'''
        - '''facial expression''': '''a smirk'''
        - '''unique feature''': '''it has wings'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

5: label=9
==============================6it [00:36,  5.79s/it]7it [00:42,  5.93s/it]
Pidgeotto_5 with label 9
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''brown and red'''
        - '''size''': '''it is small'''
        - '''shape''': '''a bird'''
        - '''body pattern''': '''a brown body with a red head'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a hawk'''
        - '''eye color''': '''red'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a swan-like tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a bird'''
        - '''special markings''': '''a red hat and a white crest on its head'''
        - '''ear shape''': '''a spherical shape'''
        - '''skin texture''': '''smooth and shiny'''
        - '''evolutionary stage''': '''a snorlax'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle pokemon'''
        - '''arm shape''': '''a wing shape'''
        - '''facial expression''': '''a smug look'''
        - '''unique feature''': '''it has a red hat'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''yes'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

6: label=3
==============================
Charmeleon_6 with label 3
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''red'''
        - '''size''': '''it is small'''
        - '''shape''': '''it is a red and yellow pokemon'''
        - '''body pattern''': '''it has a red body with a white belly and a white tail'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''the eyes are a squint'''
        - '''eye color''': '''red'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''it is a stubby tail with a curved tip'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''fire'''
        - '''special markings''': '''the pokemon has a red body with a white belly and a white tail'''
        - '''ear shape''': '''the ear shape is a triangle'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a thigh and a shin'''
        - '''arm shape''': '''the arms are shaped like a t'''
        - '''facial expression''': '''a smirk'''
        - '''unique feature''': '''it has a tail that is on fire'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

7: label=3
==============================
Charmeleon_7 with label 3
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a red tawny tawny'''
        Attributes List:
        - '''color''': '''red'''
        - '''size''': '''it is small'''
        - '''shape''': '''a red and yellow lizard'''
        - '''body pattern''': '''a red and yellow tiger-like pattern'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''red'''
        - '''mouth shape''': '''a snout'''
        - '''tail shape''': '''a slanted tadpole tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''fire'''
        - '''special markings''': '''the pokemon has a red tummy and a white belly'''
        - '''ear shape''': '''a frog'''
        - '''skin texture''': '''a red lizard'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a t-shaped arm'''
        - '''facial expression''': '''a smirk'''
        - '''unique feature''': '''it has a fire-type'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

8it [00:48,  6.06s/it]9it [00:55,  6.13s/it]10it [01:01,  6.11s/it]END==============================

8: label=3
==============================
Charmeleon_8 with label 3
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a red pokemon with fire on its back'''
        Attributes List:
        - '''color''': '''red'''
        - '''size''': '''it is small'''
        - '''shape''': '''a red and yellow lizard'''
        - '''body pattern''': '''a red and white striped body with a black belly'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''red'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a stubby tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''fire'''
        - '''special markings''': '''the pokemon has a red body with a white belly and a white tail'''
        - '''ear shape''': '''a slanted triangle'''
        - '''skin texture''': '''a red lizard'''
        - '''evolutionary stage''': '''a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a t-shaped arm'''
        - '''facial expression''': '''angry'''
        - '''unique feature''': '''it has a flame on its head'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

9: label=1
==============================
Ivysaur_9 with label 1
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''blue'''
        - '''size''': '''it is small'''
        - '''shape''': '''a squirtle'''
        - '''body pattern''': '''a blue and green squirtle with a pink flower on its head'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''blue'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a flower'''
        - '''special markings''': '''the pokemon has a flower on its head'''
        - '''ear shape''': '''a squirtle'''
        - '''skin texture''': '''a scaly texture'''
        - '''evolutionary stage''': '''a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a squirtle'''
        - '''facial expression''': '''a sad expression'''
        - '''unique feature''': '''it has a flower on its head'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

10: label=1
==============================
Ivysaur_10 with label 1
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''green'''
        - '''size''': '''it is small'''
        - '''shape''': '''a squirtle'''
        - '''body pattern''': '''a squirtle with a flower on its head'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''green'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''grass'''
        - '''special markings''': '''the pokemon has a snout with a horn and a tail'''
        - '''ear shape''': '''a squirtle'''
        - '''skin texture''': '''a scaly texture'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a twig'''
        - '''facial expression''': '''a sad expression'''
        - '''unique feature''': '''it has a flower on its head'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

11it [01:06,  5.99s/it]12it [01:13,  6.24s/it]13it [01:19,  5.99s/it]END==============================

11: label=1
==============================
Ivysaur_11 with label 1
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''blue'''
        - '''size''': '''it is small'''
        - '''shape''': '''it is a small blue pokemon with a leaf on its back'''
        - '''body pattern''': '''it has a blue body with a green head and a pink tail'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''the eyes are a squint'''
        - '''eye color''': '''blue'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''the pokemon is a squirtle'''
        - '''special markings''': '''the pokemon has a green head, a blue body, and a pink tail'''
        - '''ear shape''': '''a squirtle'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a thigh and a thigh'''
        - '''arm shape''': '''the pokemon has a squirtle arm shape'''
        - '''facial expression''': '''a sad expression'''
        - '''unique feature''': '''it has a flower on its head'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

12: label=6
==============================
Pikachu_12 with label 6
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''pikachu'''
        Attributes List:
        - '''color''': '''yellow'''
        - '''size''': '''it is small'''
        - '''shape''': '''a small yellow pokemon'''
        - '''body pattern''': '''it has a yellow body with a black head and a black tail'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''yellow'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a slanted squirt tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''grass'''
        - '''special markings''': '''the pokemon has a yellow body with a black stripe on the side of its'''
        - '''ear shape''': '''a ear shape of a t'''
        - '''skin texture''': '''smooth'''
        - '''evolutionary stage''': '''it is a pikachu'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a t-shape'''
        - '''facial expression''': '''a sad expression'''
        - '''unique feature''': '''it has a tail'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

13: label=6
==============================
Pikachu_13 with label 6
==============================

14it [01:24,  5.83s/it]15it [01:30,  5.88s/it]16it [01:36,  5.83s/it]
        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''pikachu'''
        Attributes List:
        - '''color''': '''yellow'''
        - '''size''': '''it is small'''
        - '''shape''': '''a yellow pokemon with a black nose'''
        - '''body pattern''': '''a yellow body with black eyes and a black nose'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''yellow'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a stubby tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a pokemon'''
        - '''special markings''': '''the pokemon has a black stripe on its forehead'''
        - '''ear shape''': '''a squished triangle'''
        - '''skin texture''': '''smooth'''
        - '''evolutionary stage''': '''pikachu'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a slanted triangle'''
        - '''facial expression''': '''a pikachu with a smile on his face'''
        - '''unique feature''': '''it has a yellow head'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

14: label=6
==============================
Pikachu_14 with label 6
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''pikachu'''
        Attributes List:
        - '''color''': '''yellow'''
        - '''size''': '''it is small'''
        - '''shape''': '''it is a small yellow ball'''
        - '''body pattern''': '''it has a yellow body with a black head and a black tail'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''yellow'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a stubby tail'''
        - '''number of heads''': '''two heads'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a ball'''
        - '''special markings''': '''the pokemon has a white belly and a black tail'''
        - '''ear shape''': '''a ear shape of a squirtle'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a pikachu'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a t'''
        - '''arm shape''': '''it is a squirtle'''
        - '''facial expression''': '''a smile'''
        - '''unique feature''': '''it is a pikachu'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

15: label=4
==============================
Squirtle_15 with label 4
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a small turtle'''
        Attributes List:
        - '''color''': '''blue and yellow'''
        - '''size''': '''small'''
        - '''shape''': '''a turtle'''
        - '''body pattern''': '''a turtle with a blue head and a yellow belly'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''blue'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''sand'''
        - '''special markings''': '''the pokemon has a blue and yellow shell'''
        - '''ear shape''': '''a teddy bear'''
        - '''skin texture''': '''smooth'''
        - '''evolutionary stage''': '''a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a t-shape'''
        - '''facial expression''': '''a sad expression'''
        - '''unique feature''': '''it is a turtle'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

16: label=4
==============================
Squirtle_16 with label 4
17it [01:41,  5.79s/it]18it [01:48,  6.00s/it]==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''blue'''
        - '''size''': '''it is small'''
        - '''shape''': '''a turtle'''
        - '''body pattern''': '''it is a squirtle'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''blue'''
        - '''mouth shape''': '''a snout'''
        - '''tail shape''': '''a squirtle'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''water'''
        - '''special markings''': '''the pokemon has a blue head, a blue body, and a blue tail'''
        - '''ear shape''': '''a squirtle'''
        - '''skin texture''': '''it is smooth and shiny'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''it is a squirtle'''
        - '''facial expression''': '''a smile'''
        - '''unique feature''': '''it is a squirtle'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

17: label=4
==============================
Squirtle_17 with label 4
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a turtle'''
        Attributes List:
        - '''color''': '''blue'''
        - '''size''': '''it is a small turtle'''
        - '''shape''': '''it is a turtle'''
        - '''body pattern''': '''it is a turtle pokemon'''
        - '''number of limbs''': '''four limbs'''
        - '''eye shape''': '''the eye shape is a squint'''
        - '''eye color''': '''blue'''
        - '''mouth shape''': '''the mouth shape of the pokemon in this image is a snout'''
        - '''tail shape''': '''it is a turtle'''
        - '''number of heads''': '''two heads'''
        - '''number of eyes''': '''two eyes'''
        - '''associated element''': '''a turtle'''
        - '''special markings''': '''the pokemon has a blue shell with a brown head and a brown body with'''
        - '''ear shape''': '''the ear shape is a t'''
        - '''skin texture''': '''the skin texture is smooth and shiny'''
        - '''evolutionary stage''': '''the pokemon in this image is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a t'''
        - '''arm shape''': '''the arm shape is a t'''
        - '''facial expression''': '''a turtle pokemon'''
        - '''unique feature''': '''it is a turtle'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

18: label=5
==============================
Wartortle_18 with label 5
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''blue'''
        - '''size''': '''it is small'''
        - '''shape''': '''a turtle'''
        - '''body pattern''': '''it has a spherical body with a spherical head'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''blue'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''water'''
        - '''special markings''': '''the pokemon has a blue body with a white belly and a blue head'''
        - '''ear shape''': '''a squirtle'''
        - '''skin texture''': '''it is smooth and shiny'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''it is a squirtle'''
        - '''facial expression''': '''a smirk'''
        - '''unique feature''': '''it has a shell'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''yes'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

19it [01:54,  5.91s/it]20it [01:59,  5.89s/it]21it [02:06,  6.16s/it]END==============================

19: label=5
==============================
Wartortle_19 with label 5
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a pokemon that is a turtle'''
        Attributes List:
        - '''color''': '''blue'''
        - '''size''': '''it is a small turtle'''
        - '''shape''': '''it is a turtle'''
        - '''body pattern''': '''it has a blue body with a white belly and a white head'''
        - '''number of limbs''': '''four limbs'''
        - '''eye shape''': '''the eye shape is a squint'''
        - '''eye color''': '''blue'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''it is a squirtle'''
        - '''number of heads''': '''two heads'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a turtle'''
        - '''special markings''': '''the pokemon has a blue body with a white belly and a white head with'''
        - '''ear shape''': '''the ear shape is a t'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a t'''
        - '''arm shape''': '''the arm shape is a t'''
        - '''facial expression''': '''a turtle pokemon'''
        - '''unique feature''': '''it has a shell'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

20: label=5
==============================
Wartortle_20 with label 5
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''person, person, person, person, person, person, person, person, person, person'''
        Attributes List:
        - '''color''': '''blue'''
        - '''size''': '''it is a small pokemon'''
        - '''shape''': '''a turtle'''
        - '''body pattern''': '''a squirtle with a squirtle on its'''
        - '''number of limbs''': '''four limbs'''
        - '''eye shape''': '''a person'''
        - '''eye color''': '''blue'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a twig'''
        - '''special markings''': '''the pokemon has a squirtle on its back, and a'''
        - '''ear shape''': '''a squirtle'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''person, person, person, person, person, person, person, person, person, person'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a thigh and a thigh'''
        - '''arm shape''': '''a teddy bear'''
        - '''facial expression''': '''a smile'''
        - '''unique feature''': '''it is a squirtle'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

21: label=8
==============================
Pidgey_21 with label 8
==============================

22it [02:12,  6.18s/it]23it [02:18,  5.98s/it]
        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a bird pokemon'''
        Attributes List:
        - '''color''': '''brown and white'''
        - '''size''': '''it is a small bird'''
        - '''shape''': '''it is a bird'''
        - '''body pattern''': '''it is a bird with a brown body and white head'''
        - '''number of limbs''': '''four limbs'''
        - '''eye shape''': '''the eyes are a squint'''
        - '''eye color''': '''brown eyes'''
        - '''mouth shape''': '''the mouth shape is a slit'''
        - '''tail shape''': '''it is a swan'''
        - '''number of heads''': '''two heads'''
        - '''number of eyes''': '''two eyes'''
        - '''associated element''': '''bird'''
        - '''special markings''': '''the bird has a white crest on its head, and a white wing patch'''
        - '''ear shape''': '''the ear shape is a triangle'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''the pokemon in this image is a snorlax'''
        - '''number of wings''': '''two wings'''
        - '''leg shape''': '''the leg shape is a squirtle'''
        - '''arm shape''': '''the arm shape is a wing'''
        - '''facial expression''': '''a bird pokemon'''
        - '''unique feature''': '''it has a beak'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

22: label=8
==============================
Pidgey_22 with label 8
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a sylveon'''
        Attributes List:
        - '''color''': '''brown and white'''
        - '''size''': '''it is a medium size'''
        - '''shape''': '''a bird'''
        - '''body pattern''': '''it is a bird with a brown body and a white head'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a hawk'''
        - '''eye color''': '''brown'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a swan'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a bird'''
        - '''special markings''': '''the pokemon has a brown body with a white head and a brown tail'''
        - '''ear shape''': '''a spherical shape'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''a sylveon'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a squirtle'''
        - '''arm shape''': '''it is a swan'''
        - '''facial expression''': '''a hawk'''
        - '''unique feature''': '''it has a long neck'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

23: label=8
==============================
Pidgey_23 with label 8
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a bird'''
        Attributes List:
        - '''color''': '''brown and white'''
        - '''size''': '''it is a medium size'''
        - '''shape''': '''a bird'''
        - '''body pattern''': '''it is a bird'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a hawk'''
        - '''eye color''': '''brown'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a swan'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a bird'''
        - '''special markings''': '''the bird has a white crest on its head'''
        - '''ear shape''': '''a spherical shape'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''a sylveon'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a squirtle'''
        - '''arm shape''': '''it is a swan'''
        - '''facial expression''': '''a bird with a smirk'''
        - '''unique feature''': '''it is a bird'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

24it [02:23,  5.70s/it]25it [02:29,  5.72s/it]26it [02:34,  5.54s/it]END==============================

24: label=0
==============================
Bulbasaur_24 with label 0
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''green'''
        - '''size''': '''it is small'''
        - '''shape''': '''it is a green and red pokemon'''
        - '''body pattern''': '''a green body with a red head and a red tail'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''green'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a pokemon'''
        - '''special markings''': '''the pokemon has a green body with a red nose and eyes'''
        - '''ear shape''': '''a frog'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a thigh shape'''
        - '''arm shape''': '''the arms are shaped like a t'''
        - '''facial expression''': '''a smile'''
        - '''unique feature''': '''it has a green body and red eyes'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

25: label=0
==============================
Bulbasaur_25 with label 0
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''blue'''
        - '''size''': '''it is small'''
        - '''shape''': '''a small, green, leafy creature'''
        - '''body pattern''': '''a spherical body with a tail'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''green'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''leaf'''
        - '''special markings''': '''the pokemon has a green leaf on its back'''
        - '''ear shape''': '''a squirtle'''
        - '''skin texture''': '''smooth'''
        - '''evolutionary stage''': '''a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a squirtle'''
        - '''facial expression''': '''a sad expression'''
        - '''unique feature''': '''it has a leaf on its back'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

26: label=0
==============================
Bulbasaur_26 with label 0
==============================

27it [02:40,  5.73s/it]28it [02:46,  5.87s/it]
        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''green'''
        - '''size''': '''it is small'''
        - '''shape''': '''a small, green, squirtle-like creature'''
        - '''body pattern''': '''a spherical body with a rounded head and a s'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''green'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''grass'''
        - '''special markings''': '''the pokemon has a large green pouch on its back'''
        - '''ear shape''': '''a squirtle'''
        - '''skin texture''': '''a scaly texture'''
        - '''evolutionary stage''': '''a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a squirtle'''
        - '''facial expression''': '''a sad expression'''
        - '''unique feature''': '''it has a backpack'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

27: label=7
==============================
Raichu_27 with label 7
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''pikachu'''
        Attributes List:
        - '''color''': '''yellow'''
        - '''size''': '''it is small'''
        - '''shape''': '''it is a small, yellow, and brown pokemon'''
        - '''body pattern''': '''it has a squirtle tail and a squirt'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''yellow'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a pokemon that is a squirtle'''
        - '''special markings''': '''the pokemon has a yellow body with a black tail and a white t'''
        - '''ear shape''': '''a squiggly tail'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a pikachu'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a t'''
        - '''arm shape''': '''the arm shape is a t'''
        - '''facial expression''': '''a smile'''
        - '''unique feature''': '''it has a tail'''
        - '''body posturetail presence''': '''yes'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

28: label=7
==============================
Raichu_28 with label 7
==============================

29it [02:52,  5.89s/it]30it [02:58,  5.96s/it]30it [02:58,  5.96s/it]

        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''pikachu, person, person, person, person, person, person, person, person'''
        Attributes List:
        - '''color''': '''orange and white'''
        - '''size''': '''it is small'''
        - '''shape''': '''it is a small, yellow, and brown pokemon'''
        - '''body pattern''': '''it is a squirtle'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''yellow'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a pig tail'''
        - '''number of heads''': '''two heads'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a pokemon'''
        - '''special markings''': '''the pokemon has a yellow head, a yellow body, and a yellow tail'''
        - '''ear shape''': '''a squished ear shape'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a pikachu'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a t'''
        - '''arm shape''': '''it is a teddy bear'''
        - '''facial expression''': '''sad'''
        - '''unique feature''': '''it has a horn on its head'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

29: label=7
==============================
Raichu_29 with label 7
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a pikachu'''
        Attributes List:
        - '''color''': '''brown'''
        - '''size''': '''it is small'''
        - '''shape''': '''a small, stubby, snoutlike creature with a long'''
        - '''body pattern''': '''it has a squirtle like pattern on its back'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''brown'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a pig tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a pokemon'''
        - '''special markings''': '''the pokemon has a snout with a horn on it, and'''
        - '''ear shape''': '''a squished ear'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a pikachu'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a thigh and a thigh'''
        - '''arm shape''': '''the arm shape is a t'''
        - '''facial expression''': '''a smirk'''
        - '''unique feature''': '''it has a tail'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''yes'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

Succ. dumped attribute values to ./experiments/pokemon/describe/pokemon_attributes_pairs_3
Succ. dumped LLM prompts  to ./experiments/pokemon/describe/pokemon_llm_prompts_3
Namespace(mode='guess', config_file_env='./configs/env_machine.yml', config_file_expt='./configs/expts/pokemon_all.yml', num_per_category='3')
{'setup': 'ours', 'experiment': 5.0, 'dataset_name': 'pokemon', 'num_classes': 10, 'num_base': 5, 'num_novel': 5, 'seed': 1, 'batch_size': 256, 'clustering_method': 'multi_clip_voting', 'model_size': 'ViT-B/16', 'model_size_vqa': 'FlanT5-XXL', 'model_type_llm': 'gpt-3.5-turbo', 'image_size': 224, 'verbose': False, 'host': 'chaos', 'num_workers': 16, 'device': 'cuda', 'device_count': '1', 'device_id': '0', 'data_dir': './datasets/pokemon', 'expt_dir': './experiments/pokemon', 'expt_dir_describe': './experiments/pokemon/describe', 'path_vqa_questions': './experiments/pokemon/describe/pokemon_vqa_questions', 'path_vqa_answers': './experiments/pokemon/describe/pokemon_attributes_pairs', 'path_llm_prompts': './experiments/pokemon/describe/pokemon_llm_prompts', 'expt_dir_guess': './experiments/pokemon/guess', 'path_llm_replies_raw': './experiments/pokemon/guess/pokemon_llm_replies_raw', 'path_llm_replies_jsoned': './experiments/pokemon/guess/pokemon_llm_replies_jsoned', 'path_llm_gussed_names': './experiments/pokemon/guess/pokemon_llm_gussed_names', 'expt_dir_grouping': './experiments/pokemon/grouping'}
0it [00:00, ?it/s]0it [00:17, ?it/s]
╭───────────────────── Traceback (most recent call last) ──────────────────────╮
│ /home/hdl/miniconda3/envs/finer/lib/python3.9/site-packages/tenacity/__init_ │
│ _.py:382 in __call__                                                         │
│                                                                              │
│   379 │   │   │   do = self.iter(retry_state=retry_state)                    │
│   380 │   │   │   if isinstance(do, DoAttempt):                              │
│   381 │   │   │   │   try:                                                   │
│ ❱ 382 │   │   │   │   │   result = fn(*args, **kwargs)                       │
│   383 │   │   │   │   except BaseException:  # noqa: B902                    │
│   384 │   │   │   │   │   retry_state.set_exception(sys.exc_info())  # type: │
│   385 │   │   │   │   else:                                                  │
│                                                                              │
│ /home/hdl/project/FineR/FineR_0/agents/llm_bot.py:57 in call_gpts            │
│                                                                              │
│    54 │   │   │   max_tokens=max_tokens                                      │
│    55 │   │   )                                                              │
│    56 │   else:                                                              │
│ ❱  57 │   │   response = client.chat.completions.create(                     │
│    58 │   │   │   model=model,                                               │
│    59 │   │   │   messages=chatgpt_messages,                                 │
│    60 │   │   │   temperature=temperature                                    │
│                                                                              │
│ /home/hdl/miniconda3/envs/finer/lib/python3.9/site-packages/openai/_utils/_u │
│ tils.py:287 in wrapper                                                       │
│                                                                              │
│   284 │   │   │   │   │   else:                                              │
│   285 │   │   │   │   │   │   msg = f"Missing required argument: {quote(miss │
│   286 │   │   │   │   raise TypeError(msg)                                   │
│ ❱ 287 │   │   │   return func(*args, **kwargs)                               │
│   288 │   │                                                                  │
│   289 │   │   return wrapper  # type: ignore                                 │
│   290                                                                        │
│                                                                              │
│ /home/hdl/miniconda3/envs/finer/lib/python3.9/site-packages/openai/resources │
│ /chat/completions/completions.py:1147 in create                              │
│                                                                              │
│   1144 │   │   timeout: float | httpx.Timeout | None | NotGiven = NOT_GIVEN, │
│   1145 │   ) -> ChatCompletion | Stream[ChatCompletionChunk]:                │
│   1146 │   │   validate_response_format(response_format)                     │
│ ❱ 1147 │   │   return self._post(                                            │
│   1148 │   │   │   "/chat/completions",                                      │
│   1149 │   │   │   body=maybe_transform(                                     │
│   1150 │   │   │   │   {                                                     │
│                                                                              │
│ /home/hdl/miniconda3/envs/finer/lib/python3.9/site-packages/openai/_base_cli │
│ ent.py:1259 in post                                                          │
│                                                                              │
│   1256 │   │   opts = FinalRequestOptions.construct(                         │
│   1257 │   │   │   method="post", url=path, json_data=body, files=to_httpx_f │
│   1258 │   │   )                                                             │
│ ❱ 1259 │   │   return cast(ResponseT, self.request(cast_to, opts, stream=str │
│   1260 │                                                                     │
│   1261 │   def patch(                                                        │
│   1262 │   │   self,                                                         │
│                                                                              │
│ /home/hdl/miniconda3/envs/finer/lib/python3.9/site-packages/openai/_base_cli │
│ ent.py:1047 in request                                                       │
│                                                                              │
│   1044 │   │   │   │   │   err.response.read()                               │
│   1045 │   │   │   │                                                         │
│   1046 │   │   │   │   log.debug("Re-raising status error")                  │
│ ❱ 1047 │   │   │   │   raise self._make_status_error_from_response(err.respo │
│   1048 │   │   │                                                             │
│   1049 │   │   │   break                                                     │
│   1050                                                                       │
╰──────────────────────────────────────────────────────────────────────────────╯
AuthenticationError: Error code: 401 - {'error': {'message': '无效的sk 
token，请检查token是否正确', 'type': 'error'}}

The above exception was the direct cause of the following exception:

╭───────────────────── Traceback (most recent call last) ──────────────────────╮
│ /home/hdl/project/FineR/FineR_0/discovering.py:394 in <module>               │
│                                                                              │
│   391 │   │   llm_bot = LLMBot(model=cfg['model_type_llm'])                  │
│   392 │   │                                                                  │
│   393 │   │   # run the main program                                         │
│ ❱ 394 │   │   raw_replies, jsoned_replies = main_guess(cfg, llm_bot, reasoni │
│   395 │   │                                                                  │
│   396 │   │   # save LLM replis                                              │
│   397 │   │   dump_json(cfg['path_llm_replies_raw'] + expt_id_suffix, raw_re │
│                                                                              │
│ /home/hdl/project/FineR/FineR_0/discovering.py:170 in main_guess             │
│                                                                              │
│   167 │                                                                      │
│   168 │   # LLM inferring                                                    │
│   169 │   for i, (key, prompt) in tqdm(enumerate(prompt_list.items())):      │
│ ❱ 170 │   │   raw_reply = bot.infer(prompt, temperature=0.9)  # use a high t │
│   171 │   │   used_tokens = bot.get_used_tokens()                            │
│   172 │   │                                                                  │
│   173 │   │   replies_raw[key] = raw_reply                                   │
│                                                                              │
│ /home/hdl/project/FineR/FineR_0/agents/llm_bot.py:119 in infer               │
│                                                                              │
│   116 │   │   return reply, total_prompt, n_tokens                           │
│   117 │                                                                      │
│   118 │   def infer(self, prompt, temperature=0.9):                          │
│ ❱ 119 │   │   reply, _, n_tokens = self.__query(prompt, temperature, max_tok │
│   120 │   │   self.total_tokens += n_tokens                                  │
│   121 │   │   return reply.strip()                                           │
│   122                                                                        │
│                                                                              │
│ /home/hdl/project/FineR/FineR_0/agents/llm_bot.py:109 in __query             │
│                                                                              │
│   106 │                                                                      │
│   107 │   def __query(self, prompt, temperature, max_token):                 │
│   108 │   │   total_prompt = prepare_chatgpt_message(prompt)                 │
│ ❱ 109 │   │   reply, n_tokens = call_gpts(                                   │
│   110 │   │   │   client=self.client,                                        │
│   111 │   │   │   chatgpt_messages=total_prompt,                             │
│   112 │   │   │   temperature=temperature,                                   │
│                                                                              │
│ /home/hdl/miniconda3/envs/finer/lib/python3.9/site-packages/tenacity/__init_ │
│ _.py:289 in wrapped_f                                                        │
│                                                                              │
│   286 │   │                                                                  │
│   287 │   │   @functools.wraps(f)                                            │
│   288 │   │   def wrapped_f(*args: t.Any, **kw: t.Any) -> t.Any:             │
│ ❱ 289 │   │   │   return self(f, *args, **kw)                                │
│   290 │   │                                                                  │
│   291 │   │   def retry_with(*args: t.Any, **kwargs: t.Any) -> WrappedFn:    │
│   292 │   │   │   return self.copy(*args, **kwargs).wraps(f)                 │
│                                                                              │
│ /home/hdl/miniconda3/envs/finer/lib/python3.9/site-packages/tenacity/__init_ │
│ _.py:379 in __call__                                                         │
│                                                                              │
│   376 │   │                                                                  │
│   377 │   │   retry_state = RetryCallState(retry_object=self, fn=fn, args=ar │
│   378 │   │   while True:                                                    │
│ ❱ 379 │   │   │   do = self.iter(retry_state=retry_state)                    │
│   380 │   │   │   if isinstance(do, DoAttempt):                              │
│   381 │   │   │   │   try:                                                   │
│   382 │   │   │   │   │   result = fn(*args, **kwargs)                       │
│                                                                              │
│ /home/hdl/miniconda3/envs/finer/lib/python3.9/site-packages/tenacity/__init_ │
│ _.py:326 in iter                                                             │
│                                                                              │
│   323 │   │   │   retry_exc = self.retry_error_cls(fut)                      │
│   324 │   │   │   if self.reraise:                                           │
│   325 │   │   │   │   raise retry_exc.reraise()                              │
│ ❱ 326 │   │   │   raise retry_exc from fut.exception()                       │
│   327 │   │                                                                  │
│   328 │   │   if self.wait:                                                  │
│   329 │   │   │   sleep = self.wait(retry_state)                             │
╰──────────────────────────────────────────────────────────────────────────────╯
RetryError: RetryError[<Future at 0x7608363d3820 state=finished raised 
AuthenticationError>]
Namespace(mode='postprocess', config_file_env='./configs/env_machine.yml', config_file_expt='./configs/expts/pokemon_all.yml', num_per_category='3')
{'setup': 'ours', 'experiment': 5.0, 'dataset_name': 'pokemon', 'num_classes': 10, 'num_base': 5, 'num_novel': 5, 'seed': 1, 'batch_size': 256, 'clustering_method': 'multi_clip_voting', 'model_size': 'ViT-B/16', 'model_size_vqa': 'FlanT5-XXL', 'model_type_llm': 'gpt-3.5-turbo', 'image_size': 224, 'verbose': False, 'host': 'chaos', 'num_workers': 16, 'device': 'cuda', 'device_count': '1', 'device_id': '0', 'data_dir': './datasets/pokemon', 'expt_dir': './experiments/pokemon', 'expt_dir_describe': './experiments/pokemon/describe', 'path_vqa_questions': './experiments/pokemon/describe/pokemon_vqa_questions', 'path_vqa_answers': './experiments/pokemon/describe/pokemon_attributes_pairs', 'path_llm_prompts': './experiments/pokemon/describe/pokemon_llm_prompts', 'expt_dir_guess': './experiments/pokemon/guess', 'path_llm_replies_raw': './experiments/pokemon/guess/pokemon_llm_replies_raw', 'path_llm_replies_jsoned': './experiments/pokemon/guess/pokemon_llm_replies_jsoned', 'path_llm_gussed_names': './experiments/pokemon/guess/pokemon_llm_gussed_names', 'expt_dir_grouping': './experiments/pokemon/grouping'}
Charmander_0
{
    "Squirtle": [
        "Squirtle is a small, orange Pokemon with a stubby, snout-like creature.",
        "It has a spherical body with a spherical head and four limbs.",
        "The Pokemon has a squint eye shape and orange eyes.",
        "Its mouth shape is a slit and it has a stubby tail.",
        "Squirtle has two heads and two eyes."
    ],
    "Charmander": [
        "Squirtle is a small, orange Pokemon with a stubby, snout-like creature.",
        "It has a spherical body with a spherical head and four limbs.",
        "The Pokemon has a squint eye shape and orange eyes.",
        "Its mouth shape is a slit and it has a stubby tail.",
        "Squirtle has two heads and two eyes."
    ],
    "Cyndaquil": [
        "Squirtle is a small, orange Pokemon with a stubby, snout-like creature.",
        "It has a spherical body with a spherical head and four limbs.",
        "The Pokemon has a squint eye shape and orange eyes.",
        "Its mouth shape is a slit and it has a stubby tail.",
        "Squirtle has two heads and two eyes."
    ]
}


Charmander_1
{
    "Squirtle": [
        "This pokemon is a small orange creature with a scaly, stubby, snout-like head, two heads, and two squinty orange eyes.",
        "It has a small, lizard-like body with a tail, four limbs, and smooth skin texture.",
        "The special markings of this pokemon are a bright red nose and a yellow tummy.",
        "Its mouth is in the shape of a snout and its ears resemble those of a frog.",
        "It is associated with the fire element and has a smile as its facial expression."
    ],
    "Charmander": [
        "This pokemon is a small orange creature with a scaly, stubby, snout-like head, two heads, and two squinty orange eyes.",
        "It has a small, lizard-like body with a tail, four limbs, and smooth skin texture.",
        "The special markings of this pokemon are a bright red nose and a yellow tummy.",
        "Its mouth is in the shape of a snout and its ears resemble those of a frog.",
        "It is associated with the fire element and has a smile as its facial expression."
    ],
    "Charmeleon": [
        "This pokemon is a small orange creature with a scaly, stubby, snout-like head, two heads, and two squinty orange eyes.",
        "It has a small, lizard-like body with a tail, four limbs, and smooth skin texture.",
        "The special markings of this pokemon are a bright red nose and a yellow tummy.",
        "Its mouth is in the shape of a snout and its ears resemble those of a frog.",
        "It is associated with the fire element and has a smile as its facial expression."
    ]
}


Charmander_2
{
  "Squirtle": [
    "A squirtle is a small, round, and stubby pokemon with a brown color.",
    "It has a spherical head and body with a white belly and blue tummy.",
    "This pokemon has four limbs in a T shape and two heads with squinty blue eyes and a slit mouth.",
    "It also has a stubby tail and a spherical shape ear.",
    "The skin is smooth and it has a flame on its head."
  ],
  "Wartortle": [
    "A squirtle is a small, round, and stubby pokemon with a brown color.",
    "It has a spherical head and body with a white belly and blue tummy.",
    "This pokemon has four limbs in a T shape and two heads with squinty blue eyes and a slit mouth.",
    "It also has a stubby tail and a spherical shape ear.",
    "The skin is smooth and it has a flame on its head."
  ],
  "Blastoise": [
    "A squirtle is a small, round, and stubby pokemon with a brown color.",
    "It has a spherical head and body with a white belly and blue tummy.",
    "This pokemon has four limbs in a T shape and two heads with squinty blue eyes and a slit mouth.",
    "It also has a stubby tail and a spherical shape ear.",
    "The skin is smooth and it has a flame on its head."
  ]
}


Pidgey_3
{
    "Swellow": [
        "The Pokemon in the image is a bird with a brown and white body pattern.",
        "It is small in size and has a beak.",
        "It has a white crest on its head and a white wing patch.",
        "It has two heads and two eyes with a squint shape.",
        "The Pokemon has four limbs, two wings, and a tail shaped like a swan."
    ],
    "Pidgeot": [
        "The Pokemon in the image is a bird with a brown and white body pattern.",
        "It is small in size and has a beak.",
        "It has a white crest on its head and a white wing patch.",
        "It has two heads and two eyes with a squint shape.",
        "The Pokemon has four limbs, two wings, and a tail shaped like a swan."
    ],
    "Staraptor": [
        "The Pokemon in the image is a bird with a brown and white body pattern.",
        "It is small in size and has a beak.",
        "It has a white crest on its head and a white wing patch.",
        "It has two heads and two eyes with a squint shape.",
        "The Pokemon has four limbs, two wings, and a tail shaped like a swan."
    ]
}


Pidgey_4
{
  "Crestwing": [
    "This is a medium-sized bird with a brown head and a white belly.",
    "It has four limbs and two heads with two eyes each.",
    "The bird has a hawk-like eye shape and brown eyes.",
    "It has a slit-shaped mouth and a tail resembling that of a swan.",
    "The bird has a unique white crest on its head and a spherical ear shape."
  ],
  "Swaneye": [
    "This is a medium-sized bird with a brown head and a white belly.",
    "It has four limbs and two heads with two eyes each.",
    "The bird has a hawk-like eye shape and brown eyes.",
    "It has a slit-shaped mouth and a tail resembling that of a swan.",
    "The bird has a unique white crest on its head and a spherical ear shape."
  ],
  "Hawkbeak": [
    "This is a medium-sized bird with a brown head and a white belly.",
    "It has four limbs and two heads with two eyes each.",
    "The bird has a hawk-like eye shape and brown eyes.",
    "It has a slit-shaped mouth and a tail resembling that of a swan.",
    "The bird has a unique white crest on its head and a spherical ear shape."
  ]
}


Pidgey_5
{
    "Sylveon": [
        "A Sylveon is a medium-sized bird-like Pokemon with brown and white feathers.",
        "Its body is covered in brown feathers with a white head and a red beak.",
        "The Pokemon has two heads and two eyes, which are brown and shaped like a hawk.",
        "It has a spherical-shaped ear and a scaly skin texture.",
        "The Sylveon has a unique feature of a long neck and two wings."
    ],
    "Hawkwing": [
        "A Sylveon is a medium-sized bird-like Pokemon with brown and white feathers.",
        "Its body is covered in brown feathers with a white head and a red beak.",
        "The Pokemon has two heads and two eyes, which are brown and shaped like a hawk.",
        "It has a spherical-shaped ear and a scaly skin texture.",
        "The Sylveon has a unique feature of a long neck and two wings."
    ],
    "Swanbeak": [
        "A Sylveon is a medium-sized bird-like Pokemon with brown and white feathers.",
        "Its body is covered in brown feathers with a white head and a red beak.",
        "The Pokemon has two heads and two eyes, which are brown and shaped like a hawk.",
        "It has a spherical-shaped ear and a scaly skin texture.",
        "The Sylveon has a unique feature of a long neck and two wings."
    ]
}


Pidgeotto_6
{
    "Sylveon": [
        "This image features a Pokemon called Sylveon, which is a bird-like creature with a medium size.",
        "It has a tan body with a red head and wings, and it is characterized by its brown and pink coloration.",
        "Sylveon has a unique shape with a long neck, long tail, and a swan-like tail.",
        "It has four limbs and two heads with squinty pink eyes.",
        "The Pokemon has a slit mouth and a spherical ear shape."
    ],
    "Birdor": [
        "This image features a Pokemon called Birdor, which is a bird-like creature with a medium size.",
        "It has a tan body with a red head and wings, and it is characterized by its brown and pink coloration.",
        "Birdor has a unique shape with a long neck, long tail, and a swan-like tail.",
        "It has four limbs and two heads with squinty pink eyes.",
        "The Pokemon has a slit mouth and a spherical ear shape."
    ],
    "Swanwing": [
        "This image features a Pokemon called Swanwing, which is a bird-like creature with a medium size.",
        "It has a tan body with a red head and wings, and it is characterized by its brown and pink coloration.",
        "Swanwing has a unique shape with a long neck, long tail, and a swan-like tail.",
        "It has four limbs and two heads with squinty pink eyes.",
        "The Pokemon has a slit mouth and a spherical ear shape."
    ]
}


Pidgeotto_7
{
    "Sylveon": [
        "Sylveon is a medium-sized bird-like Pokémon with a pink and brown coloration. It has a brown body with a yellow head and wings.",
        "The Pokémon has four limbs, two heads, and two eyes with a hawk-like shape. Its eye color is brown, and its mouth has a slit shape.",
        "The tail resembles that of a swan. It has a special marking of a red and yellow crest on its head, along with a white ear shape similar to a swan.",
        "Sylveon's skin texture is smooth. It is in the evolutionary stage of being a Sandslash.",
        "It has two wings and legs shaped like a Squirtle. Its arms have a wing-like shape. The Pokémon has a smug facial expression and a unique feature of wings."
    ],
    "Sandslash": [
        "Sylveon is in the evolutionary stage of being a Sandslash. Its coloration is pink and brown, and its size is medium.",
        "It has a brown body with a yellow head and wings. The Pokémon has four limbs, two heads, and two eyes with a hawk-like shape.",
        "The eye color is brown, and the mouth has a slit shape. The tail resembles that of a swan.",
        "Sylveon has a special marking of a red and yellow crest on its head, along with a white ear shape similar to a swan. Its skin texture is smooth.",
        "It has two wings and legs shaped like a Squirtle. Its arms have a wing-like shape. The Pokémon has a smug facial expression and a unique feature of wings."
    ],
    "Swanslash": [
        "Sylveon resembles a bird, particularly a swan, with its medium size and pink and brown coloration.",
        "Its brown body has a yellow head and wings. The Pokémon has four limbs, two heads, and two eyes with a hawk-like shape.",
        "The eye color is brown, and the mouth has a slit shape. The tail is shaped like that of a swan.",
        "Sylveon has a special marking of a red and yellow crest on its head, along with a white ear shape similar to a swan. Its skin texture is smooth.",
        "It has two wings and legs shaped like a Squirtle. Its arms have a wing-like shape. The Pokémon has a smug facial expression and a unique feature of wings."
    ]
}


Pidgeotto_8
{
  "Squirtle": [
    "The image shows a pokemon resembling a squirtle with a brown body and a red head.",
    "It has a small size and a bird-like shape.",
    "The pokemon has hawk-shaped red eyes and a slit-shaped mouth.",
    "It has a swan-like tail and two heads, with two eyes on each head.",
    "The pokemon is associated with the bird element and has a special marking of a red hat with a white crest on its head."
  ],
  "Redhat": [
    "The image shows a pokemon resembling a squirtle with a brown body and a red head.",
    "It has a small size and a bird-like shape.",
    "The pokemon has hawk-shaped red eyes and a slit-shaped mouth.",
    "It has a swan-like tail and two heads, with two eyes on each head.",
    "The pokemon is associated with the bird element and has a special marking of a red hat with a white crest on its head."
  ],
  "Crestspike": [
    "The image shows a pokemon resembling a squirtle with a brown body and a red head.",
    "It has a small size and a bird-like shape.",
    "The pokemon has hawk-shaped red eyes and a slit-shaped mouth.",
    "It has a swan-like tail and two heads, with two eyes on each head.",
    "The pokemon is associated with the bird element and has a special marking of a red hat with a white crest on its head."
  ]
}


Charmeleon_9
{
    "Flamizard": [
        "The image shows a small red fire type pokemon with a red and white striped body, black belly, and a flame on its head.",
        "It has a sad expression with squint-shaped red eyes and a slit-shaped mouth.",
        "The pokemon has two heads, two eyes, and four limbs.",
        "It has a stubby tail with a curved tip and no presence of fins, horns, or crests.",
        "The unique features include slanted triangle-shaped ears, a red scaly skin, and a spike on its body."
    ],
    "Lizardflare": [
        "The image shows a small red fire type pokemon with a red and white striped body, black belly, and a flame on its head.",
        "It has a sad expression with squint-shaped red eyes and a slit-shaped mouth.",
        "The pokemon has two heads, two eyes, and four limbs.",
        "It has a stubby tail with a curved tip and no presence of fins, horns, or crests.",
        "The unique features include slanted triangle-shaped ears, a red scaly skin, and a spike on its body."
    ],
    "Ignisaur": [
        "The image shows a small red fire type pokemon with a red and white striped body, black belly, and a flame on its head.",
        "It has a sad expression with squint-shaped red eyes and a slit-shaped mouth.",
        "The pokemon has two heads, two eyes, and four limbs.",
        "It has a stubby tail with a curved tip and no presence of fins, horns, or crests.",
        "The unique features include slanted triangle-shaped ears, a red scaly skin, and a spike on its body."
    ]
}


Charmeleon_10
{
    "Squirtle": [
        "The pokemon in the image is a small, red-colored creature that resembles a lizard.",
        "It has a tiger-like pattern on its body and a red tummy with a white belly.",
        "With four limbs and two heads, it has squinted red eyes and a snout-like mouth.",
        "Its tail is slanted and resembles a tadpole.",
        "This pokemon is associated with the fire element and has the ability of a fire-type."
    ],
    "Charmander": [
        "The pokemon in the image is a small, red-colored creature that resembles a lizard.",
        "It has a tiger-like pattern on its body and a red tummy with a white belly.",
        "With four limbs and two heads, it has squinted red eyes and a snout-like mouth.",
        "Its tail is slanted and resembles a tadpole.",
        "This pokemon is associated with the fire element and has the ability of a fire-type."
    ],
    "Charizard": [
        "The pokemon in the image is a small, red-colored creature that resembles a lizard.",
        "It has a tiger-like pattern on its body and a red tummy with a white belly.",
        "With four limbs and two heads, it has squinted red eyes and a snout-like mouth.",
        "Its tail is slanted and resembles a tadpole.",
        "This pokemon is associated with the fire element and has the ability of a fire-type."
    ]
}


Charmeleon_11
{
    "Squirtle": [
        "A squirtle is a small, red and yellow pokemon with a red body, white belly, and white tail.",
        "It has four limbs, two heads, and two eyes that are squint and red in color.",
        "The pokemon has a slit mouth and a stubby tail with a curved tip.",
        "It is associated with the fire element and has special markings on its body.",
        "The squirtle has a triangular ear shape, smooth skin texture, and a smirk facial expression."
    ],
    "Charmeleon": [
        "A squirtle is a small, red and yellow pokemon with a red body, white belly, and white tail.",
        "It has four limbs, two heads, and two eyes that are squint and red in color.",
        "The pokemon has a slit mouth and a stubby tail with a curved tip.",
        "It is associated with the fire element and has special markings on its body.",
        "The squirtle has a triangular ear shape, smooth skin texture, and a smirk facial expression."
    ],
    "Charizard": [
        "A squirtle is a small, red and yellow pokemon with a red body, white belly, and white tail.",
        "It has four limbs, two heads, and two eyes that are squint and red in color.",
        "The pokemon has a slit mouth and a stubby tail with a curved tip.",
        "It is associated with the fire element and has special markings on its body.",
        "The squirtle has a triangular ear shape, smooth skin texture, and a smirk facial expression."
    ]
}


Squirtle_12
{
    "Squirtle": [
        "This is a small turtle-like pokemon called Squirtle.",
        "It has a blue body with a yellow head and a yellow tail.",
        "The pokemon has a sad expression with squinted blue eyes and a slit mouth.",
        "It has four limbs and two heads with two blue eyes.",
        "Squirtle is associated with the element of sand and has a smooth skin texture."
    ],
    "Wartortle": [
        "This is a small turtle-like pokemon called Wartortle.",
        "It has a blue body with a yellow head and a yellow tail.",
        "The pokemon has a sad expression with squinted blue eyes and a slit mouth.",
        "It has four limbs and two heads with two blue eyes.",
        "Wartortle is associated with the element of sand and has a smooth skin texture."
    ],
    "Blastoise": [
        "This is a small turtle-like pokemon called Blastoise.",
        "It has a blue body with a yellow head and a yellow tail.",
        "The pokemon has a sad expression with squinted blue eyes and a slit mouth.",
        "It has four limbs and two heads with two blue eyes.",
        "Blastoise is associated with the element of sand and has a smooth skin texture."
    ]
}


Squirtle_13
{
    "Squirtle": [
        "Squirtle is a small, blue turtle-like Pokémon with a smooth skin texture.",
        "It has a squint eye shape and blue eyes.",
        "The mouth is in the form of a snout.",
        "Squirtle has a unique body pattern that resembles a squirtle.",
        "It has four limbs, a tail, and two heads."
    ],
    "Wartortle": [
        "Wartortle evolves from Squirtle and is a larger, more powerful water-type Pokémon.",
        "It retains the same blue color and turtle-like shape.",
        "Wartortle has evolved to have a larger body size and more defined limbs.",
        "It still has a snout-shaped mouth and two squint eyes.",
        "The special markings on Wartortle include a darker blue tail and the presence of a spike on its back."
    ],
    "Blastoise": [
        "Blastoise is the final evolution stage of Squirtle, following Wartortle.",
        "It is a larger, more heavily built Pokémon with a dark blue color.",
        "Blastoise has a more pronounced turtle shape and a distinctive cannon-like structure on its back.",
        "It has two heads, a snout-shaped mouth, and blue eyes.",
        "The special markings of Blastoise include water cannons on its shell and a spike on its back."
    ]
}


Squirtle_14
{
    "Squirtle": [
        "This is a blue turtle with a small size and a smooth skin texture.",
        "It has a squint eye shape and blue eyes.",
        "The mouth shape is a slit and it has a turtle-shaped body with a tail.",
        "It has two heads and two limbs.",
        "The pokemon is a squirtle in its evolutionary stage."
    ],
    "Wartortle": [
        "This is a blue turtle with a small size and a smooth skin texture.",
        "It has a squint eye shape and blue eyes.",
        "The mouth shape is a slit and it has a turtle-shaped body with a tail.",
        "It has two heads and two limbs.",
        "The pokemon is a squirtle in its evolutionary stage."
    ],
    "Blastoise": [
        "This is a blue turtle with a small size and a smooth skin texture.",
        "It has a squint eye shape and blue eyes.",
        "The mouth shape is a slit and it has a turtle-shaped body with a tail.",
        "It has two heads and two limbs.",
        "The pokemon is a squirtle in its evolutionary stage."
    ]
}


Bulbasaur_15
{
    "Squirtle": [
        "A squirtle is a small and green pokemon with a red head and tail.",
        "It has four limbs and a squinty green eyes.",
        "The mouth is in a slit shape and the unique feature of this pokemon is its green body with red eyes.",
        "It has two heads and two eyes.",
        "The skin texture of the squirtle is smooth and it is at the evolutionary stage of being a squirtle."
    ],
    "Greened": [
        "A squirtle is a small and green pokemon with a red head and tail.",
        "It has four limbs and a squinty green eyes.",
        "The mouth is in a slit shape and the unique feature of this pokemon is its green body with red eyes.",
        "It has two heads and two eyes.",
        "The skin texture of the squirtle is smooth and it is at the evolutionary stage of being a squirtle."
    ],
    "Frogleaf": [
        "A squirtle is a small and green pokemon with a red head and tail.",
        "It has four limbs and a squinty green eyes.",
        "The mouth is in a slit shape and the unique feature of this pokemon is its green body with red eyes.",
        "It has two heads and two eyes.",
        "The skin texture of the squirtle is smooth and it is at the evolutionary stage of being a squirtle."
    ]
}


Bulbasaur_16
{
    "Squirtle": [
        "Squirtle is a small, green, leafy creature with a sad expression.",
        "It has a leaf on its back and is associated with the grass element.",
        "It has four limbs, two heads, and two eyes which are squinted and green in color.",
        "Squirtle has a smooth skin texture and its body shape resembles a squirtle.",
        "It does not have wings, fins, or horns, but it does have a spike on its back."
    ],
    "Greenleaf": [
        "Greenleaf is a small, green, leafy creature with a sad expression.",
        "It has a leaf on its back and is associated with the grass element.",
        "It has four limbs, two heads, and two eyes which are squinted and green in color.",
        "Greenleaf has a smooth skin texture and its body shape resembles a squirtle.",
        "It does not have wings, fins, or horns, but it does have a spike on its back."
    ],
    "Leafurtle": [
        "Leafurtle is a small, green, leafy creature with a sad expression.",
        "It has a leaf on its back and is associated with the grass element.",
        "It has four limbs, two heads, and two eyes which are squinted and green in color.",
        "Leafurtle has a smooth skin texture and its body shape resembles a squirtle.",
        "It does not have wings, fins, or horns, but it does have a spike on its back."
    ]
}


Bulbasaur_17
{
    "Squirtle": [
        "This image shows a small, green Pokemon called Squirtle.",
        "It has a spherical body with a rounded head and two squinty green eyes.",
        "The Pokemon has a sad facial expression and its mouth is in the shape of a slit.",
        "It has four limbs, each ending in a Squirtle-like shape.",
        "Squirtle has a unique feature, which is a backpack-like pouch on its back."
    ],
    "Squirtle-like creature": [
        "This image shows a small, green Pokemon called Squirtle-like creature.",
        "It has a spherical body with a rounded head and two squinty green eyes.",
        "The Pokemon has a sad facial expression and its mouth is in the shape of a slit.",
        "It has four limbs, each ending in a Squirtle-like shape.",
        "Squirtle-like creature has a unique feature, which is a backpack-like pouch on its back."
    ],
    "Green Pokemon": [
        "This image shows a small, green Pokemon called Green Pokemon.",
        "It has a spherical body with a rounded head and two squinty green eyes.",
        "The Pokemon has a sad facial expression and its mouth is in the shape of a slit.",
        "It has four limbs, each ending in a Squirtle-like shape.",
        "Green Pokemon has a unique feature, which is a backpack-like pouch on its back."
    ]
}


Raichu_18
{
    "Pikachu": [
        "This image shows a small, yellow pokemon called Pikachu.",
        "It has a Squirtle-like tail and a snout, and its body has special markings with a yellow color, a black tail, and a white t.",
        "Pikachu has a squint eye shape with yellow eyes and a smiley facial expression.",
        "It has two heads, two eyes, and four limbs, with a small and smooth skin texture.",
        "Pikachu is associated with the water element and has a unique feature of having a tail."
    ],
    "Pichu": [
        "This image shows a small, yellow pokemon called Pichu.",
        "It has a Squirtle-like tail and a snout, and its body has special markings with a yellow color, a black tail, and a white t.",
        "Pichu has a squint eye shape with yellow eyes and a smiley facial expression.",
        "It has two heads, two eyes, and four limbs, with a small and smooth skin texture.",
        "Pichu is associated with the water element and has a unique feature of having a tail."
    ],
    "Raichu": [
        "This image shows a small, yellow pokemon called Raichu.",
        "It has a Squirtle-like tail and a snout, and its body has special markings with a yellow color, a black tail, and a white t.",
        "Raichu has a squint eye shape with yellow eyes and a smiley facial expression.",
        "It has two heads, two eyes, and four limbs, with a small and smooth skin texture.",
        "Raichu is associated with the water element and has a unique feature of having a tail."
    ]
}


Raichu_19
{
    "PikaHorn": [
        "This image shows a small, brown pikachu with a snout-like shape and a pigtail tail.",
        "It has a squirtle-like pattern on its back.",
        "The pikachu has four limbs and two heads, with two squinty brown eyes and a slit mouth.",
        "It has a unique feature of a horn on its snout and a sad expression.",
        "The skin texture is smooth, and it is in the evolutionary stage of a pikachu."
    ],
    "Squirtchu": [
        "This image shows a small, brown pikachu with a snout-like shape and a pigtail tail.",
        "It has a squirtle-like pattern on its back.",
        "The pikachu has four limbs and two heads, with two squinty brown eyes and a slit mouth.",
        "It has a unique feature of a horn on its snout and a sad expression.",
        "The skin texture is smooth, and it is in the evolutionary stage of a pikachu."
    ],
    "Sadtail Pikachu": [
        "This image shows a small, brown pikachu with a snout-like shape and a pigtail tail.",
        "It has a squirtle-like pattern on its back.",
        "The pikachu has four limbs and two heads, with two squinty brown eyes and a slit mouth.",
        "It has a unique feature of a horn on its snout and a sad expression.",
        "The skin texture is smooth, and it is in the evolutionary stage of a pikachu."
    ]
}


Raichu_20
{
    "Pikachu": [
        "This is a small, orange and white Pokemon called Pikachu.",
        "It has a yellow body, a yellow head, and a yellow tail.",
        "It has two heads and two eyes, with a squint eye shape and yellow eye color.",
        "Pikachu has a small size and a smooth skin texture.",
        "It has a unique feature of a horn."
    ],
    "Pika": [
        "This is a small, orange and white Pokemon called Pikachu.",
        "It has a yellow body, a yellow head, and a yellow tail.",
        "It has two heads and two eyes, with a squint eye shape and yellow eye color.",
        "Pikachu has a small size and a smooth skin texture.",
        "It has a unique feature of a horn."
    ],
    "Sparkachu": [
        "This is a small, orange and white Pokemon called Pikachu.",
        "It has a yellow body, a yellow head, and a yellow tail.",
        "It has two heads and two eyes, with a squint eye shape and yellow eye color.",
        "Pikachu has a small size and a smooth skin texture.",
        "It has a unique feature of a horn."
    ]
}


Wartortle_21
{
  "Squirtle": [
    "A squirtle is a small-sized turtle-like Pokemon with a blue body and a white belly.",
    "It has a blue head with a squint-shaped blue eyes and a slit-like mouth.",
    "The Pokemon has two heads and four limbs.",
    "It is associated with the water element and has a tail shaped like a squirtle.",
    "It has smooth and shiny skin and a unique feature of having a shell."
  ],
  "Wartortle": [
    "A squirtle is a small-sized turtle-like Pokemon with a blue body and a white belly.",
    "It has a blue head with a squint-shaped blue eyes and a slit-like mouth.",
    "The Pokemon has two heads and four limbs.",
    "It is associated with the water element and has a tail shaped like a squirtle.",
    "It has smooth and shiny skin and a unique feature of having a shell."
  ],
  "Blastoise": [
    "A squirtle is a small-sized turtle-like Pokemon with a blue body and a white belly.",
    "It has a blue head with a squint-shaped blue eyes and a slit-like mouth.",
    "The Pokemon has two heads and four limbs.",
    "It is associated with the water element and has a tail shaped like a squirtle.",
    "It has smooth and shiny skin and a unique feature of having a shell."
  ]
}


Wartortle_22
{
   "Squirturtle": [
      "The pokemon in the image is a small, blue turtle-like creature with a squirtle pattern on its body.",
      "It has four limbs and two heads with squinted blue eyes and a slit-like mouth.",
      "The pokemon has a fairy element associated with it and special markings in the form of a squirtle on its back and a smooth skin texture.",
      "It is at an early evolutionary stage and does not have any wings, fins, or horns.",
      "Its unique feature is that it is a squirtle. The pokemon has a friendly facial expression with a smile."
   ],
   "Bluetail": [
      "The pokemon in the image is a small, blue turtle-like creature with a squirtle pattern on its body.",
      "It has four limbs and two heads with squinted blue eyes and a slit-like mouth.",
      "The pokemon has a fairy element associated with it and special markings in the form of a squirtle on its back and a smooth skin texture.",
      "It is at an early evolutionary stage and does not have any wings, fins, or horns.",
      "Its unique feature is that it is a squirtle. The pokemon has a friendly facial expression with a smile."
   ],
   "Fairesquirt": [
      "The pokemon in the image is a small, blue turtle-like creature with a squirtle pattern on its body.",
      "It has four limbs and two heads with squinted blue eyes and a slit-like mouth.",
      "The pokemon has a fairy element associated with it and special markings in the form of a squirtle on its back and a smooth skin texture.",
      "It is at an early evolutionary stage and does not have any wings, fins, or horns.",
      "Its unique feature is that it is a squirtle. The pokemon has a friendly facial expression with a smile."
   ]
}


Wartortle_23
{
    "Squirtle": [
        "This is a small, blue turtle-like pokemon with a white belly and head.",
        "It has four limbs that are shaped like a turtle's arms and a tail shaped like a squirtle.",
        "It has two heads and two blue squint-shaped eyes.",
        "The pokemon has a sad facial expression and a slit mouth.",
        "Its ears are in the shape of a 't' and it doesn't have any fins, horns, or crests/spikes."
    ],
    "Wartortle": [
        "This is a small, blue turtle-like pokemon with a white belly and head.",
        "It has four limbs that are shaped like a turtle's arms and a tail shaped like a squirtle.",
        "It has two heads and two blue squint-shaped eyes.",
        "The pokemon has a sad facial expression and a slit mouth.",
        "Its ears are in the shape of a 't' and it doesn't have any fins, horns, or crests/spikes."
    ],
    "Blastoise": [
        "This is a small, blue turtle-like pokemon with a white belly and head.",
        "It has four limbs that are shaped like a turtle's arms and a tail shaped like a squirtle.",
        "It has two heads and two blue squint-shaped eyes.",
        "The pokemon has a sad facial expression and a slit mouth.",
        "Its ears are in the shape of a 't' and it doesn't have any fins, horns, or crests/spikes."
    ]
}


Ivysaur_24
{
"Flower Squirtle": [
"A Squirtle with a flower on its head is a small, green Pokemon with a scaly texture.",
"It has a sad facial expression and squinted blue eyes.",
"The Pokemon has four limbs, two heads, and two eyes.",
"It has a slit mouth and a unique feature of a flower on its head.",
"The body pattern of this Squirtle includes a splotch of green on its back."
],
"Greenleaf Squirtle": [
"A Squirtle with a flower on its head is a small, green Pokemon with a scaly texture.",
"It has a sad facial expression and squinted blue eyes.",
"The Pokemon has four limbs, two heads, and two eyes.",
"It has a slit mouth and a unique feature of a flower on its head.",
"The body pattern of this Squirtle includes a splotch of green on its back."
],
"Sadpetal Squirtle": [
"A Squirtle with a flower on its head is a small, green Pokemon with a scaly texture.",
"It has a sad facial expression and squinted blue eyes.",
"The Pokemon has four limbs, two heads, and two eyes.",
"It has a slit mouth and a unique feature of a flower on its head.",
"The body pattern of this Squirtle includes a splotch of green on its back."
]
}


Ivysaur_25
{
    "Squirtle": [
        "This image shows a small blue Pokemon known as Squirtle.",
        "It has a leaf on its back and a body with a green head and a pink tail.",
        "Squirtle has four limbs, two heads, and two eyes.",
        "Its eyes are squinted and blue in color.",
        "The mouth is in the shape of a slit."
    ],
    "Wartortle": [
        "This image shows a small blue Pokemon known as Wartortle.",
        "It has a leaf on its back and a body with a green head and a pink tail.",
        "Wartortle has four limbs, two heads, and two eyes.",
        "Its eyes are squinted and blue in color.",
        "The mouth is in the shape of a slit."
    ],
    "Blastoise": [
        "This image shows a small blue Pokemon known as Blastoise.",
        "It has a leaf on its back and a body with a green head and a pink tail.",
        "Blastoise has four limbs, two heads, and two eyes.",
        "Its eyes are squinted and blue in color.",
        "The mouth is in the shape of a slit."
    ]
}


Ivysaur_26
{
    "Squirtle": [
        "This image is of a small, blue pokemon called Squirtle.",
        "It has a blue and green body pattern with a pink flower on its head.",
        "Squirtle has four limbs, two heads, and two squinty blue eyes.",
        "Its mouth has a slit shape and it has a tail specific to Squirtle.",
        "The pokemon is associated with a flower and has special markings in the form of a flower on its head."
    ],
    "Wartortle": [
        "This image is of a small, blue pokemon called Wartortle.",
        "It has a blue and green body pattern with a pink flower on its head.",
        "Wartortle has four limbs, two heads, and two squinty blue eyes.",
        "Its mouth has a slit shape and it has a tail specific to Wartortle.",
        "The pokemon is associated with a flower and has special markings in the form of a flower on its head."
    ],
    "Blastoise": [
        "This image is of a small, blue pokemon called Blastoise.",
        "It has a blue and green body pattern with a pink flower on its head.",
        "Blastoise has four limbs, two heads, and two squinty blue eyes.",
        "Its mouth has a slit shape and it has a tail specific to Blastoise.",
        "The pokemon is associated with a flower and has special markings in the form of a flower on its head."
    ]
}


Pikachu_27
{
  "Pikachu": [
    "Pikachu is a small, yellow Pokemon with a black nose and black eyes.",
    "It has a squinty eye shape and a slit mouth shape.",
    "The Pokemon has a stubby tail and two heads.",
    "It is associated with the element of electricity.",
    "Pikachu has a unique feature of a yellow head and a smooth skin texture."
  ],
  "Pichu": [
    "Pikachu is a small, yellow Pokemon with a black nose and black eyes.",
    "It has a squinty eye shape and a slit mouth shape.",
    "The Pokemon has a stubby tail and two heads.",
    "It is associated with the element of electricity.",
    "Pikachu has a unique feature of a yellow head and a smooth skin texture."
  ],
  "Raichu": [
    "Pikachu is a small, yellow Pokemon with a black nose and black eyes.",
    "It has a squinty eye shape and a slit mouth shape.",
    "The Pokemon has a stubby tail and two heads.",
    "It is associated with the element of electricity.",
    "Pikachu has a unique feature of a yellow head and a smooth skin texture."
  ]
}


Pikachu_28
{
"pikachu": [
"Summary: Pikachu is a small, yellow Pokémon with a body shape of a small yellow ball.",
"It has a yellow squinty eyes, a slit mouth, and a stubby tail.",
"It has two heads with two eyes each.",
"Pikachu has a smooth and shiny skin texture.",
"It is a unique Pokémon belonging to the evolutionary stage of Pikachu."
],
"Pika": [
"Summary: Pikachu is a small, yellow Pokémon with a body shape of a small yellow ball.",
"It has a yellow squinty eyes, a slit mouth, and a stubby tail.",
"It has two heads with two eyes each.",
"Pikachu has a smooth and shiny skin texture.",
"It is a unique Pokémon belonging to the evolutionary stage of Pikachu."
],
"Electricball": [
"Summary: Pikachu is a small, yellow Pokémon with a body shape of a small yellow ball.",
"It has a yellow squinty eyes, a slit mouth, and a stubby tail.",
"It has two heads with two eyes each.",
"Pikachu has a smooth and shiny skin texture.",
"It is a unique Pokémon belonging to the evolutionary stage of Pikachu."
]
}


Pikachu_29
{
    "Pikachu": [
        "The pokemon in the image is a yellow Pikachu, small in size with a yellow body, black head, and a black tail.",
        "It has four limbs and a squint eye shape with yellow eyes.",
        "The mouth has a slit shape.",
        "The Pikachu has a unique feature of a tail and it is at the evolutionary stage of a Pikachu.",
        "There are no fins, horns, or crests present. The pokemon has a sad facial expression and associated with the element of lightning."
    ],
    "Pichu": [
        "The pokemon in the image is a yellow Pichu, small in size with a yellow body, black head, and a black tail.",
        "It has four limbs and a squint eye shape with yellow eyes.",
        "The mouth has a slit shape.",
        "The Pichu has a unique feature of a tail and it is at an early evolutionary stage.",
        "There are no fins, horns, or crests present. The pokemon has a sad facial expression and associated with the element of lightning."
    ],
    "Raichu": [
        "The pokemon in the image is a yellow Raichu, small in size with a yellow body, black head, and a black tail.",
        "It has four limbs and a squint eye shape with yellow eyes.",
        "The mouth has a slit shape.",
        "The Raichu has a unique feature of a tail and it is at an advanced evolutionary stage.",
        "There are no fins, horns, or crests present. The pokemon has a sad facial expression and associated with the element of lightning."
    ]
}


==============================
		 Finished Post-processing
==============================
		 ---> total discovered names = 47
['Crestspike', 'Sadtail Pikachu', 'Hawkbeak', 'Hawkwing', 'Squirturtle', 'Leafurtle', 'Pidgeot', 'Sylveon', 'Charmeleon', 'Fairesquirt', 'Pichu', 'Pikachu', 'Frogleaf', 'Wartortle', 'Redhat', 'Electricball', 'Flower Squirtle', 'Greened', 'Swanslash', 'Pika', 'pikachu', 'Charizard', 'Greenleaf', 'PikaHorn', 'Raichu', 'Cyndaquil', 'Squirtle-like creature', 'Bluetail', 'Sadpetal Squirtle', 'Lizardflare', 'Sandslash', 'Sparkachu', 'Green Pokemon', 'Swanwing', 'Swellow', 'Crestwing', 'Squirtle', 'Swanbeak', 'Blastoise', 'Charmander', 'Staraptor', 'Greenleaf Squirtle', 'Ignisaur', 'Squirtchu', 'Swaneye', 'Flamizard', 'Birdor']

		 ---> total discovered names = 47
		 ---> number of failure entries = 0
END==============================

Namespace(config_file_env='./configs/env_machine.yml', config_file_expt='./configs/expts/pokemon_all.yml', alpha=0.7, N_tta=10, num_per_category='3', num_runs=10)
Number of GPUs: 1
Device ID: 0 Device Name: NVIDIA RTX A6000
['Crestspike', 'Sadtail Pikachu', 'Hawkbeak', 'Hawkwing', 'Squirturtle', 'Leafurtle', 'Pidgeot', 'Sylveon', 'Charmeleon', 'Fairesquirt', 'Pichu', 'Pikachu', 'Frogleaf', 'Wartortle', 'Redhat', 'Electricball', 'Flower Squirtle', 'Greened', 'Swanslash', 'Pika', 'pikachu', 'Charizard', 'Greenleaf', 'PikaHorn', 'Raichu', 'Cyndaquil', 'Squirtle-like creature', 'Bluetail', 'Sadpetal Squirtle', 'Lizardflare', 'Sandslash', 'Sparkachu', 'Green Pokemon', 'Swanwing', 'Swellow', 'Crestwing', 'Squirtle', 'Swanbeak', 'Blastoise', 'Charmander', 'Staraptor', 'Greenleaf Squirtle', 'Ignisaur', 'Squirtchu', 'Swaneye', 'Flamizard', 'Birdor']
0it [00:00, ?it/s]1it [00:00,  5.54it/s]4it [00:00,  9.60it/s]6it [00:00, 11.10it/s]8it [00:00, 11.98it/s]10it [00:00, 12.89it/s]12it [00:00, 14.18it/s]14it [00:01, 13.42it/s]16it [00:01, 13.87it/s]18it [00:01, 15.18it/s]20it [00:01, 15.52it/s]23it [00:01, 16.21it/s]25it [00:01, 16.49it/s]27it [00:01, 16.74it/s]30it [00:02, 18.47it/s]30it [00:02, 14.71it/s]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:01<00:00,  1.68s/it]100%|██████████| 1/1 [00:01<00:00,  1.77s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:01<00:00,  1.60s/it]100%|██████████| 1/1 [00:01<00:00,  1.69s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.789372444152832


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 71.53846153846153
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 81.95026331016642
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 65.98797952066484


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 78.93724060058594
=========================          END          =========================
0it [00:00, ?it/s]2it [00:00, 19.50it/s]4it [00:00, 10.14it/s]6it [00:00, 12.01it/s]8it [00:00, 13.80it/s]10it [00:00, 12.18it/s]12it [00:00, 12.15it/s]14it [00:01, 11.92it/s]16it [00:01, 13.66it/s]18it [00:01, 12.76it/s]20it [00:01, 13.90it/s]22it [00:01, 14.56it/s]24it [00:01, 14.84it/s]26it [00:01, 13.19it/s]28it [00:02, 14.00it/s]30it [00:02, 13.71it/s]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.36s/it]100%|██████████| 1/1 [00:02<00:00,  2.55s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.35s/it]100%|██████████| 1/1 [00:02<00:00,  2.48s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.7823934555053711


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 72.3076923076923
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 82.44214092823508
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 66.1134328358209


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 78.23934936523438
=========================          END          =========================
0it [00:00, ?it/s]2it [00:00, 15.16it/s]4it [00:00, 12.04it/s]6it [00:00, 13.29it/s]8it [00:00, 14.01it/s]10it [00:00, 12.96it/s]12it [00:00, 12.47it/s]14it [00:01, 12.63it/s]16it [00:01, 12.86it/s]18it [00:01, 13.15it/s]21it [00:01, 14.96it/s]23it [00:01, 15.18it/s]25it [00:01, 14.84it/s]27it [00:01, 15.17it/s]29it [00:02, 15.42it/s]30it [00:02, 14.25it/s]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.49s/it]100%|██████████| 1/1 [00:02<00:00,  2.62s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.35s/it]100%|██████████| 1/1 [00:02<00:00,  2.51s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.7877997756004333


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 70.0
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 81.37838283145075
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 65.03859442769976


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 78.77997589111328
=========================          END          =========================
0it [00:00, ?it/s]2it [00:00, 13.81it/s]4it [00:00, 12.50it/s]6it [00:00, 14.20it/s]8it [00:00, 14.33it/s]10it [00:00, 15.06it/s]13it [00:00, 16.53it/s]15it [00:00, 15.59it/s]17it [00:01, 15.45it/s]19it [00:01, 13.31it/s]22it [00:01, 15.91it/s]25it [00:01, 17.93it/s]27it [00:01, 15.95it/s]30it [00:01, 17.62it/s]30it [00:01, 15.86it/s]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.40s/it]100%|██████████| 1/1 [00:02<00:00,  2.53s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.39s/it]100%|██████████| 1/1 [00:02<00:00,  2.52s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.7855166792869568


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 71.53846153846153
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 82.47900596167906
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 66.20196864746629


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 78.55166625976562
=========================          END          =========================
0it [00:00, ?it/s]2it [00:00, 18.09it/s]4it [00:00, 12.96it/s]6it [00:00, 14.59it/s]8it [00:00, 14.94it/s]10it [00:00, 13.79it/s]12it [00:00, 13.55it/s]14it [00:01, 12.99it/s]16it [00:01, 14.53it/s]19it [00:01, 16.72it/s]21it [00:01, 17.10it/s]23it [00:01, 17.82it/s]25it [00:01, 16.71it/s]27it [00:01, 15.94it/s]30it [00:01, 15.86it/s]30it [00:01, 15.41it/s]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.32s/it]100%|██████████| 1/1 [00:02<00:00,  2.45s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.32s/it]100%|██████████| 1/1 [00:02<00:00,  2.44s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.786565363407135


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 72.3076923076923
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 82.28536165665598
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 66.24465102552752


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 78.65653991699219
=========================          END          =========================
0it [00:00, ?it/s]2it [00:00, 14.92it/s]4it [00:00, 12.66it/s]6it [00:00, 12.99it/s]8it [00:00, 13.62it/s]10it [00:00, 14.89it/s]12it [00:00, 15.08it/s]14it [00:00, 14.05it/s]16it [00:01, 13.40it/s]18it [00:01, 14.23it/s]20it [00:01, 15.09it/s]22it [00:01, 15.02it/s]24it [00:01, 15.30it/s]26it [00:01, 16.41it/s]28it [00:01, 15.75it/s]30it [00:02, 16.40it/s]30it [00:02, 14.94it/s]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.00s/it]100%|██████████| 1/1 [00:02<00:00,  2.11s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:01<00:00,  1.95s/it]100%|██████████| 1/1 [00:02<00:00,  2.05s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.7819525599479675


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 71.53846153846153
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 81.33159445485518
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 65.07581921739774


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 78.19525909423828
=========================          END          =========================
0it [00:00, ?it/s]2it [00:00, 15.31it/s]4it [00:00, 10.47it/s]6it [00:00, 12.67it/s]8it [00:00, 14.41it/s]10it [00:00, 14.13it/s]13it [00:00, 16.44it/s]15it [00:01, 15.74it/s]17it [00:01, 14.46it/s]19it [00:01, 14.78it/s]21it [00:01, 14.52it/s]23it [00:01, 15.44it/s]26it [00:01, 16.16it/s]29it [00:01, 16.86it/s]30it [00:01, 15.33it/s]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.28s/it]100%|██████████| 1/1 [00:02<00:00,  2.41s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.21s/it]100%|██████████| 1/1 [00:02<00:00,  2.33s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.7775742411613464


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 70.0
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 80.91855288838559
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 64.16666666666667


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 77.7574234008789
=========================          END          =========================
0it [00:00, ?it/s]2it [00:00, 18.23it/s]4it [00:00, 11.59it/s]7it [00:00, 15.09it/s]9it [00:00, 16.10it/s]11it [00:00, 16.71it/s]14it [00:00, 15.33it/s]16it [00:01, 14.18it/s]18it [00:01, 15.10it/s]20it [00:01, 16.15it/s]22it [00:01, 17.06it/s]24it [00:01, 16.77it/s]26it [00:01, 16.04it/s]29it [00:01, 18.10it/s]30it [00:01, 15.85it/s]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.29s/it]100%|██████████| 1/1 [00:02<00:00,  2.42s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.38s/it]100%|██████████| 1/1 [00:02<00:00,  2.53s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.7731141448020935


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 69.23076923076923
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 80.29294895083979
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 63.167142543378


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 77.31141662597656
=========================          END          =========================
0it [00:00, ?it/s]2it [00:00, 19.36it/s]4it [00:00, 12.76it/s]6it [00:00, 14.90it/s]8it [00:00, 14.68it/s]10it [00:00, 15.26it/s]13it [00:00, 17.28it/s]15it [00:00, 15.69it/s]17it [00:01, 15.41it/s]19it [00:01, 15.86it/s]22it [00:01, 17.88it/s]24it [00:01, 17.81it/s]26it [00:01, 17.15it/s]29it [00:01, 18.84it/s]30it [00:01, 16.76it/s]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.30s/it]100%|██████████| 1/1 [00:02<00:00,  2.44s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.11s/it]100%|██████████| 1/1 [00:02<00:00,  2.29s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.7787977457046509


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 69.23076923076923
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 79.52636310365648
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 62.59755734286565


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 77.87977600097656
=========================          END          =========================
0it [00:00, ?it/s]2it [00:00, 17.13it/s]4it [00:00, 12.66it/s]6it [00:00, 15.06it/s]8it [00:00, 16.51it/s]10it [00:00, 16.35it/s]13it [00:00, 17.39it/s]15it [00:00, 15.53it/s]17it [00:01, 11.53it/s]19it [00:01, 12.69it/s]21it [00:01, 13.92it/s]23it [00:01, 14.90it/s]25it [00:01, 14.54it/s]27it [00:01, 13.82it/s]29it [00:01, 15.11it/s]30it [00:02, 14.77it/s]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.34s/it]100%|██████████| 1/1 [00:02<00:00,  2.47s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.38s/it]100%|██████████| 1/1 [00:02<00:00,  2.51s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.7864943742752075


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 71.53846153846153
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 82.1136700515549
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 66.36097275124524


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 78.6494369506836
=========================          END          =========================


========================= ViLang Final Results of 10 runs, w/ 3 imgs per class=========================


[Clustering]
Clustering ACC: 70.92307692307693
Semantic ACC:   78.29580688476562
=========================          END          =========================
Namespace(mode='describe', config_file_env='./configs/env_machine.yml', config_file_expt='./configs/expts/pokemon_all.yml', num_per_category='3')
{'setup': 'ours', 'experiment': 5.0, 'dataset_name': 'pokemon', 'num_classes': 10, 'num_base': 5, 'num_novel': 5, 'seed': 1, 'batch_size': 256, 'clustering_method': 'multi_clip_voting', 'model_size': 'ViT-B/16', 'model_size_vqa': 'FlanT5-XXL', 'model_type_llm': 'gpt-3.5-turbo', 'image_size': 224, 'verbose': False, 'host': 'chaos', 'num_workers': 16, 'device': 'cuda', 'device_count': '1', 'device_id': '0', 'data_dir': './datasets/pokemon', 'expt_dir': './experiments/pokemon', 'expt_dir_describe': './experiments/pokemon/describe', 'path_vqa_questions': './experiments/pokemon/describe/pokemon_vqa_questions', 'path_vqa_answers': './experiments/pokemon/describe/pokemon_attributes_pairs', 'path_llm_prompts': './experiments/pokemon/describe/pokemon_llm_prompts', 'expt_dir_guess': './experiments/pokemon/guess', 'path_llm_replies_raw': './experiments/pokemon/guess/pokemon_llm_replies_raw', 'path_llm_replies_jsoned': './experiments/pokemon/guess/pokemon_llm_replies_jsoned', 'path_llm_gussed_names': './experiments/pokemon/guess/pokemon_llm_gussed_names', 'expt_dir_grouping': './experiments/pokemon/grouping'}
Loading checkpoint shards:   0%|          | 0/5 [00:00<?, ?it/s]Loading checkpoint shards:  20%|██        | 1/5 [00:02<00:08,  2.12s/it]Loading checkpoint shards:  40%|████      | 2/5 [00:04<00:06,  2.13s/it]Loading checkpoint shards:  60%|██████    | 3/5 [00:06<00:04,  2.19s/it]Loading checkpoint shards:  80%|████████  | 4/5 [00:08<00:02,  2.19s/it]Loading checkpoint shards: 100%|██████████| 5/5 [00:10<00:00,  2.13s/it]Loading checkpoint shards: 100%|██████████| 5/5 [00:10<00:00,  2.14s/it]
0it [00:00, ?it/s]1it [00:06,  6.32s/it]2it [00:12,  6.07s/it]0: label=2
==============================
Charmander_0 with label 2
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a small orange pokemon'''
        Attributes List:
        - '''color''': '''orange'''
        - '''size''': '''small'''
        - '''shape''': '''a small, orange, squirtle-like creature'''
        - '''body pattern''': '''a small, orange, scaly, lizard-like creature with'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''orange'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a stubby tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''fire'''
        - '''special markings''': '''the pokemon has a snout with a horn on it'''
        - '''ear shape''': '''a frog'''
        - '''skin texture''': '''smooth and shiny'''
        - '''evolutionary stage''': '''a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a t-shaped arm'''
        - '''facial expression''': '''a sad expression'''
        - '''unique feature''': '''it has a fire-type'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

1: label=2
==============================
Charmander_1 with label 2
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a small orange pokemon'''
        Attributes List:
        - '''color''': '''orange'''
        - '''size''': '''it is small'''
        - '''shape''': '''a small, orange, and yellow lizard'''
        - '''body pattern''': '''a scaly, squarish, snout-like'''
        - '''number of limbs''': '''four limbs'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''orange'''
        - '''mouth shape''': '''a snout'''
        - '''tail shape''': '''a slanted snout'''
        - '''number of heads''': '''two heads'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''fire'''
        - '''special markings''': '''the pokemon has a red nose and a yellow tummy'''
        - '''ear shape''': '''a frog'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a t-shaped arm'''
        - '''facial expression''': '''a smile'''
        - '''unique feature''': '''it has a tail'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

2: label=2
==============================
Charmander_2 with label 2
==============================

3it [00:18,  6.10s/it]4it [00:24,  6.14s/it]5it [00:29,  5.81s/it]
        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''brown'''
        - '''size''': '''it is small'''
        - '''shape''': '''it is a small, round, and stubby'''
        - '''body pattern''': '''it has a spherical head, a spherical body'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''the eyes are a squint'''
        - '''eye color''': '''blue'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a stubby tail with a rounded tip'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''fire'''
        - '''special markings''': '''the pokemon has a white belly and a blue tail'''
        - '''ear shape''': '''a spherical shape'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a t'''
        - '''arm shape''': '''the arms are a t shape'''
        - '''facial expression''': '''a smile'''
        - '''unique feature''': '''it has a flame on its head'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

3: label=9
==============================
Pidgeotto_3 with label 9
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a sylveon'''
        Attributes List:
        - '''color''': '''brown and pink'''
        - '''size''': '''it is a medium size'''
        - '''shape''': '''a bird with a long neck and a long tail'''
        - '''body pattern''': '''a tan body with a red head and wings'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''pink'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a swan-like tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a bird'''
        - '''special markings''': '''the pokemon has a red crest on its head'''
        - '''ear shape''': '''a spherical shape'''
        - '''skin texture''': '''a scaly texture'''
        - '''evolutionary stage''': '''a sylveon'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a slanted wing'''
        - '''arm shape''': '''a wing shape'''
        - '''facial expression''': '''a smirk'''
        - '''unique feature''': '''a bird with a long beak'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

4: label=9
==============================
Pidgeotto_4 with label 9
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a sylveon'''
        Attributes List:
        - '''color''': '''pink and brown'''
        - '''size''': '''it is a medium size'''
        - '''shape''': '''a bird'''
        - '''body pattern''': '''a bird with a long neck and a long tail'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a hawk's eye'''
        - '''eye color''': '''brown'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a swan'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a bird'''
        - '''special markings''': '''the pokemon has a red and yellow head, a white body, and a'''
        - '''ear shape''': '''a swan'''
        - '''skin texture''': '''a scaly texture'''
        - '''evolutionary stage''': '''a sylveon'''
        - '''number of wings''': '''two wings'''
        - '''leg shape''': '''a swan-like leg shape'''
        - '''arm shape''': '''a wing shape'''
        - '''facial expression''': '''a smirk'''
        - '''unique feature''': '''it has wings'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

5: label=9
==============================6it [00:34,  5.57s/it]7it [00:40,  5.75s/it]
Pidgeotto_5 with label 9
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''brown and red'''
        - '''size''': '''it is small'''
        - '''shape''': '''a bird'''
        - '''body pattern''': '''a brown body with a red head'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a hawk'''
        - '''eye color''': '''red'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a swan-like tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a bird'''
        - '''special markings''': '''a red hat and a white crest on its head'''
        - '''ear shape''': '''a spherical shape'''
        - '''skin texture''': '''smooth and shiny'''
        - '''evolutionary stage''': '''a snorlax'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle pokemon'''
        - '''arm shape''': '''a wing shape'''
        - '''facial expression''': '''a smug look'''
        - '''unique feature''': '''it has a red hat'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''yes'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

6: label=3
==============================
Charmeleon_6 with label 3
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''red'''
        - '''size''': '''it is small'''
        - '''shape''': '''it is a red and yellow pokemon'''
        - '''body pattern''': '''it has a red body with a white belly and a white tail'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''the eyes are a squint'''
        - '''eye color''': '''red'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''it is a stubby tail with a curved tip'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''fire'''
        - '''special markings''': '''the pokemon has a red body with a white belly and a white tail'''
        - '''ear shape''': '''the ear shape is a triangle'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a thigh and a shin'''
        - '''arm shape''': '''the arms are shaped like a t'''
        - '''facial expression''': '''a smirk'''
        - '''unique feature''': '''it has a tail that is on fire'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

7: label=3
==============================
Charmeleon_7 with label 3
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a red tawny tawny'''
        Attributes List:
        - '''color''': '''red'''
        - '''size''': '''it is small'''
        - '''shape''': '''a red and yellow lizard'''
        - '''body pattern''': '''a red and yellow tiger-like pattern'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''red'''
        - '''mouth shape''': '''a snout'''
        - '''tail shape''': '''a slanted tadpole tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''fire'''
        - '''special markings''': '''the pokemon has a red tummy and a white belly'''
        - '''ear shape''': '''a frog'''
        - '''skin texture''': '''a red lizard'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a t-shaped arm'''
        - '''facial expression''': '''a smirk'''
        - '''unique feature''': '''it has a fire-type'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

8it [00:46,  5.70s/it]9it [00:52,  5.74s/it]10it [00:58,  5.72s/it]END==============================

8: label=3
==============================
Charmeleon_8 with label 3
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a red pokemon with fire on its back'''
        Attributes List:
        - '''color''': '''red'''
        - '''size''': '''it is small'''
        - '''shape''': '''a red and yellow lizard'''
        - '''body pattern''': '''a red and white striped body with a black belly'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''red'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a stubby tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''fire'''
        - '''special markings''': '''the pokemon has a red body with a white belly and a white tail'''
        - '''ear shape''': '''a slanted triangle'''
        - '''skin texture''': '''a red lizard'''
        - '''evolutionary stage''': '''a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a t-shaped arm'''
        - '''facial expression''': '''angry'''
        - '''unique feature''': '''it has a flame on its head'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

9: label=1
==============================
Ivysaur_9 with label 1
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''blue'''
        - '''size''': '''it is small'''
        - '''shape''': '''a squirtle'''
        - '''body pattern''': '''a blue and green squirtle with a pink flower on its head'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''blue'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a flower'''
        - '''special markings''': '''the pokemon has a flower on its head'''
        - '''ear shape''': '''a squirtle'''
        - '''skin texture''': '''a scaly texture'''
        - '''evolutionary stage''': '''a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a squirtle'''
        - '''facial expression''': '''a sad expression'''
        - '''unique feature''': '''it has a flower on its head'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

10: label=1
==============================
Ivysaur_10 with label 1
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''green'''
        - '''size''': '''it is small'''
        - '''shape''': '''a squirtle'''
        - '''body pattern''': '''a squirtle with a flower on its head'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''green'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''grass'''
        - '''special markings''': '''the pokemon has a snout with a horn and a tail'''
        - '''ear shape''': '''a squirtle'''
        - '''skin texture''': '''a scaly texture'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a twig'''
        - '''facial expression''': '''a sad expression'''
        - '''unique feature''': '''it has a flower on its head'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

11it [01:03,  5.65s/it]12it [01:10,  5.92s/it]13it [01:15,  5.79s/it]END==============================

11: label=1
==============================
Ivysaur_11 with label 1
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''blue'''
        - '''size''': '''it is small'''
        - '''shape''': '''it is a small blue pokemon with a leaf on its back'''
        - '''body pattern''': '''it has a blue body with a green head and a pink tail'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''the eyes are a squint'''
        - '''eye color''': '''blue'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''the pokemon is a squirtle'''
        - '''special markings''': '''the pokemon has a green head, a blue body, and a pink tail'''
        - '''ear shape''': '''a squirtle'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a thigh and a thigh'''
        - '''arm shape''': '''the pokemon has a squirtle arm shape'''
        - '''facial expression''': '''a sad expression'''
        - '''unique feature''': '''it has a flower on its head'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

12: label=6
==============================
Pikachu_12 with label 6
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''pikachu'''
        Attributes List:
        - '''color''': '''yellow'''
        - '''size''': '''it is small'''
        - '''shape''': '''a small yellow pokemon'''
        - '''body pattern''': '''it has a yellow body with a black head and a black tail'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''yellow'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a slanted squirt tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''grass'''
        - '''special markings''': '''the pokemon has a yellow body with a black stripe on the side of its'''
        - '''ear shape''': '''a ear shape of a t'''
        - '''skin texture''': '''smooth'''
        - '''evolutionary stage''': '''it is a pikachu'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a t-shape'''
        - '''facial expression''': '''a sad expression'''
        - '''unique feature''': '''it has a tail'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

13: label=6
==============================
Pikachu_13 with label 6
==============================

14it [01:20,  5.61s/it]15it [01:26,  5.58s/it]16it [01:31,  5.45s/it]
        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''pikachu'''
        Attributes List:
        - '''color''': '''yellow'''
        - '''size''': '''it is small'''
        - '''shape''': '''a yellow pokemon with a black nose'''
        - '''body pattern''': '''a yellow body with black eyes and a black nose'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''yellow'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a stubby tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a pokemon'''
        - '''special markings''': '''the pokemon has a black stripe on its forehead'''
        - '''ear shape''': '''a squished triangle'''
        - '''skin texture''': '''smooth'''
        - '''evolutionary stage''': '''pikachu'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a slanted triangle'''
        - '''facial expression''': '''a pikachu with a smile on his face'''
        - '''unique feature''': '''it has a yellow head'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

14: label=6
==============================
Pikachu_14 with label 6
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''pikachu'''
        Attributes List:
        - '''color''': '''yellow'''
        - '''size''': '''it is small'''
        - '''shape''': '''it is a small yellow ball'''
        - '''body pattern''': '''it has a yellow body with a black head and a black tail'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''yellow'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a stubby tail'''
        - '''number of heads''': '''two heads'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a ball'''
        - '''special markings''': '''the pokemon has a white belly and a black tail'''
        - '''ear shape''': '''a ear shape of a squirtle'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a pikachu'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a t'''
        - '''arm shape''': '''it is a squirtle'''
        - '''facial expression''': '''a smile'''
        - '''unique feature''': '''it is a pikachu'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

15: label=4
==============================
Squirtle_15 with label 4
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a small turtle'''
        Attributes List:
        - '''color''': '''blue and yellow'''
        - '''size''': '''small'''
        - '''shape''': '''a turtle'''
        - '''body pattern''': '''a turtle with a blue head and a yellow belly'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''blue'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''sand'''
        - '''special markings''': '''the pokemon has a blue and yellow shell'''
        - '''ear shape''': '''a teddy bear'''
        - '''skin texture''': '''smooth'''
        - '''evolutionary stage''': '''a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a t-shape'''
        - '''facial expression''': '''a sad expression'''
        - '''unique feature''': '''it is a turtle'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

16: label=4
==============================
Squirtle_16 with label 4
17it [01:36,  5.46s/it]18it [01:42,  5.61s/it]==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''blue'''
        - '''size''': '''it is small'''
        - '''shape''': '''a turtle'''
        - '''body pattern''': '''it is a squirtle'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''blue'''
        - '''mouth shape''': '''a snout'''
        - '''tail shape''': '''a squirtle'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''water'''
        - '''special markings''': '''the pokemon has a blue head, a blue body, and a blue tail'''
        - '''ear shape''': '''a squirtle'''
        - '''skin texture''': '''it is smooth and shiny'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''it is a squirtle'''
        - '''facial expression''': '''a smile'''
        - '''unique feature''': '''it is a squirtle'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

17: label=4
==============================
Squirtle_17 with label 4
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a turtle'''
        Attributes List:
        - '''color''': '''blue'''
        - '''size''': '''it is a small turtle'''
        - '''shape''': '''it is a turtle'''
        - '''body pattern''': '''it is a turtle pokemon'''
        - '''number of limbs''': '''four limbs'''
        - '''eye shape''': '''the eye shape is a squint'''
        - '''eye color''': '''blue'''
        - '''mouth shape''': '''the mouth shape of the pokemon in this image is a snout'''
        - '''tail shape''': '''it is a turtle'''
        - '''number of heads''': '''two heads'''
        - '''number of eyes''': '''two eyes'''
        - '''associated element''': '''a turtle'''
        - '''special markings''': '''the pokemon has a blue shell with a brown head and a brown body with'''
        - '''ear shape''': '''the ear shape is a t'''
        - '''skin texture''': '''the skin texture is smooth and shiny'''
        - '''evolutionary stage''': '''the pokemon in this image is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a t'''
        - '''arm shape''': '''the arm shape is a t'''
        - '''facial expression''': '''a turtle pokemon'''
        - '''unique feature''': '''it is a turtle'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

18: label=5
==============================
Wartortle_18 with label 5
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''blue'''
        - '''size''': '''it is small'''
        - '''shape''': '''a turtle'''
        - '''body pattern''': '''it has a spherical body with a spherical head'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''blue'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''water'''
        - '''special markings''': '''the pokemon has a blue body with a white belly and a blue head'''
        - '''ear shape''': '''a squirtle'''
        - '''skin texture''': '''it is smooth and shiny'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''it is a squirtle'''
        - '''facial expression''': '''a smirk'''
        - '''unique feature''': '''it has a shell'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''yes'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

19it [01:49,  5.79s/it]20it [01:54,  5.81s/it]21it [02:01,  6.08s/it]END==============================

19: label=5
==============================
Wartortle_19 with label 5
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a pokemon that is a turtle'''
        Attributes List:
        - '''color''': '''blue'''
        - '''size''': '''it is a small turtle'''
        - '''shape''': '''it is a turtle'''
        - '''body pattern''': '''it has a blue body with a white belly and a white head'''
        - '''number of limbs''': '''four limbs'''
        - '''eye shape''': '''the eye shape is a squint'''
        - '''eye color''': '''blue'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''it is a squirtle'''
        - '''number of heads''': '''two heads'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a turtle'''
        - '''special markings''': '''the pokemon has a blue body with a white belly and a white head with'''
        - '''ear shape''': '''the ear shape is a t'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a t'''
        - '''arm shape''': '''the arm shape is a t'''
        - '''facial expression''': '''a turtle pokemon'''
        - '''unique feature''': '''it has a shell'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

20: label=5
==============================
Wartortle_20 with label 5
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''person, person, person, person, person, person, person, person, person, person'''
        Attributes List:
        - '''color''': '''blue'''
        - '''size''': '''it is a small pokemon'''
        - '''shape''': '''a turtle'''
        - '''body pattern''': '''a squirtle with a squirtle on its'''
        - '''number of limbs''': '''four limbs'''
        - '''eye shape''': '''a person'''
        - '''eye color''': '''blue'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a twig'''
        - '''special markings''': '''the pokemon has a squirtle on its back, and a'''
        - '''ear shape''': '''a squirtle'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''person, person, person, person, person, person, person, person, person, person'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a thigh and a thigh'''
        - '''arm shape''': '''a teddy bear'''
        - '''facial expression''': '''a smile'''
        - '''unique feature''': '''it is a squirtle'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

21: label=8
==============================
Pidgey_21 with label 8
==============================

22it [02:07,  6.06s/it]23it [02:13,  5.87s/it]
        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a bird pokemon'''
        Attributes List:
        - '''color''': '''brown and white'''
        - '''size''': '''it is a small bird'''
        - '''shape''': '''it is a bird'''
        - '''body pattern''': '''it is a bird with a brown body and white head'''
        - '''number of limbs''': '''four limbs'''
        - '''eye shape''': '''the eyes are a squint'''
        - '''eye color''': '''brown eyes'''
        - '''mouth shape''': '''the mouth shape is a slit'''
        - '''tail shape''': '''it is a swan'''
        - '''number of heads''': '''two heads'''
        - '''number of eyes''': '''two eyes'''
        - '''associated element''': '''bird'''
        - '''special markings''': '''the bird has a white crest on its head, and a white wing patch'''
        - '''ear shape''': '''the ear shape is a triangle'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''the pokemon in this image is a snorlax'''
        - '''number of wings''': '''two wings'''
        - '''leg shape''': '''the leg shape is a squirtle'''
        - '''arm shape''': '''the arm shape is a wing'''
        - '''facial expression''': '''a bird pokemon'''
        - '''unique feature''': '''it has a beak'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

22: label=8
==============================
Pidgey_22 with label 8
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a sylveon'''
        Attributes List:
        - '''color''': '''brown and white'''
        - '''size''': '''it is a medium size'''
        - '''shape''': '''a bird'''
        - '''body pattern''': '''it is a bird with a brown body and a white head'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a hawk'''
        - '''eye color''': '''brown'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a swan'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a bird'''
        - '''special markings''': '''the pokemon has a brown body with a white head and a brown tail'''
        - '''ear shape''': '''a spherical shape'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''a sylveon'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a squirtle'''
        - '''arm shape''': '''it is a swan'''
        - '''facial expression''': '''a hawk'''
        - '''unique feature''': '''it has a long neck'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

23: label=8
==============================
Pidgey_23 with label 8
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a bird'''
        Attributes List:
        - '''color''': '''brown and white'''
        - '''size''': '''it is a medium size'''
        - '''shape''': '''a bird'''
        - '''body pattern''': '''it is a bird'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a hawk'''
        - '''eye color''': '''brown'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a swan'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a bird'''
        - '''special markings''': '''the bird has a white crest on its head'''
        - '''ear shape''': '''a spherical shape'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''a sylveon'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a squirtle'''
        - '''arm shape''': '''it is a swan'''
        - '''facial expression''': '''a bird with a smirk'''
        - '''unique feature''': '''it is a bird'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

24it [02:18,  5.68s/it]25it [02:23,  5.65s/it]26it [02:29,  5.49s/it]END==============================

24: label=0
==============================
Bulbasaur_24 with label 0
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''green'''
        - '''size''': '''it is small'''
        - '''shape''': '''it is a green and red pokemon'''
        - '''body pattern''': '''a green body with a red head and a red tail'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''green'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a pokemon'''
        - '''special markings''': '''the pokemon has a green body with a red nose and eyes'''
        - '''ear shape''': '''a frog'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a thigh shape'''
        - '''arm shape''': '''the arms are shaped like a t'''
        - '''facial expression''': '''a smile'''
        - '''unique feature''': '''it has a green body and red eyes'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

25: label=0
==============================
Bulbasaur_25 with label 0
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''blue'''
        - '''size''': '''it is small'''
        - '''shape''': '''a small, green, leafy creature'''
        - '''body pattern''': '''a spherical body with a tail'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''green'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''leaf'''
        - '''special markings''': '''the pokemon has a green leaf on its back'''
        - '''ear shape''': '''a squirtle'''
        - '''skin texture''': '''smooth'''
        - '''evolutionary stage''': '''a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a squirtle'''
        - '''facial expression''': '''a sad expression'''
        - '''unique feature''': '''it has a leaf on its back'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

26: label=0
==============================
Bulbasaur_26 with label 0
==============================

27it [02:34,  5.63s/it]28it [02:40,  5.65s/it]
        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''green'''
        - '''size''': '''it is small'''
        - '''shape''': '''a small, green, squirtle-like creature'''
        - '''body pattern''': '''a spherical body with a rounded head and a s'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''green'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''grass'''
        - '''special markings''': '''the pokemon has a large green pouch on its back'''
        - '''ear shape''': '''a squirtle'''
        - '''skin texture''': '''a scaly texture'''
        - '''evolutionary stage''': '''a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a squirtle'''
        - '''facial expression''': '''a sad expression'''
        - '''unique feature''': '''it has a backpack'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

27: label=7
==============================
Raichu_27 with label 7
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''pikachu'''
        Attributes List:
        - '''color''': '''yellow'''
        - '''size''': '''it is small'''
        - '''shape''': '''it is a small, yellow, and brown pokemon'''
        - '''body pattern''': '''it has a squirtle tail and a squirt'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''yellow'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a pokemon that is a squirtle'''
        - '''special markings''': '''the pokemon has a yellow body with a black tail and a white t'''
        - '''ear shape''': '''a squiggly tail'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a pikachu'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a t'''
        - '''arm shape''': '''the arm shape is a t'''
        - '''facial expression''': '''a smile'''
        - '''unique feature''': '''it has a tail'''
        - '''body posturetail presence''': '''yes'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

28: label=7
==============================
Raichu_28 with label 7
==============================

29it [02:46,  5.67s/it]30it [02:52,  5.80s/it]30it [02:52,  5.75s/it]

        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''pikachu, person, person, person, person, person, person, person, person'''
        Attributes List:
        - '''color''': '''orange and white'''
        - '''size''': '''it is small'''
        - '''shape''': '''it is a small, yellow, and brown pokemon'''
        - '''body pattern''': '''it is a squirtle'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''yellow'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a pig tail'''
        - '''number of heads''': '''two heads'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a pokemon'''
        - '''special markings''': '''the pokemon has a yellow head, a yellow body, and a yellow tail'''
        - '''ear shape''': '''a squished ear shape'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a pikachu'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a t'''
        - '''arm shape''': '''it is a teddy bear'''
        - '''facial expression''': '''sad'''
        - '''unique feature''': '''it has a horn on its head'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

29: label=7
==============================
Raichu_29 with label 7
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a pikachu'''
        Attributes List:
        - '''color''': '''brown'''
        - '''size''': '''it is small'''
        - '''shape''': '''a small, stubby, snoutlike creature with a long'''
        - '''body pattern''': '''it has a squirtle like pattern on its back'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''brown'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a pig tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a pokemon'''
        - '''special markings''': '''the pokemon has a snout with a horn on it, and'''
        - '''ear shape''': '''a squished ear'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a pikachu'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a thigh and a thigh'''
        - '''arm shape''': '''the arm shape is a t'''
        - '''facial expression''': '''a smirk'''
        - '''unique feature''': '''it has a tail'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''yes'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

Succ. dumped attribute values to ./experiments/pokemon/describe/pokemon_attributes_pairs_3
Succ. dumped LLM prompts  to ./experiments/pokemon/describe/pokemon_llm_prompts_3
Namespace(mode='guess', config_file_env='./configs/env_machine.yml', config_file_expt='./configs/expts/pokemon_all.yml', num_per_category='3')
{'setup': 'ours', 'experiment': 5.0, 'dataset_name': 'pokemon', 'num_classes': 10, 'num_base': 5, 'num_novel': 5, 'seed': 1, 'batch_size': 256, 'clustering_method': 'multi_clip_voting', 'model_size': 'ViT-B/16', 'model_size_vqa': 'FlanT5-XXL', 'model_type_llm': 'gpt-3.5-turbo', 'image_size': 224, 'verbose': False, 'host': 'chaos', 'num_workers': 16, 'device': 'cuda', 'device_count': '1', 'device_id': '0', 'data_dir': './datasets/pokemon', 'expt_dir': './experiments/pokemon', 'expt_dir_describe': './experiments/pokemon/describe', 'path_vqa_questions': './experiments/pokemon/describe/pokemon_vqa_questions', 'path_vqa_answers': './experiments/pokemon/describe/pokemon_attributes_pairs', 'path_llm_prompts': './experiments/pokemon/describe/pokemon_llm_prompts', 'expt_dir_guess': './experiments/pokemon/guess', 'path_llm_replies_raw': './experiments/pokemon/guess/pokemon_llm_replies_raw', 'path_llm_replies_jsoned': './experiments/pokemon/guess/pokemon_llm_replies_jsoned', 'path_llm_gussed_names': './experiments/pokemon/guess/pokemon_llm_gussed_names', 'expt_dir_grouping': './experiments/pokemon/grouping'}
0it [00:00, ?it/s]0it [00:17, ?it/s]
╭───────────────────── Traceback (most recent call last) ──────────────────────╮
│ /home/hdl/miniconda3/envs/finer/lib/python3.9/site-packages/tenacity/__init_ │
│ _.py:382 in __call__                                                         │
│                                                                              │
│   379 │   │   │   do = self.iter(retry_state=retry_state)                    │
│   380 │   │   │   if isinstance(do, DoAttempt):                              │
│   381 │   │   │   │   try:                                                   │
│ ❱ 382 │   │   │   │   │   result = fn(*args, **kwargs)                       │
│   383 │   │   │   │   except BaseException:  # noqa: B902                    │
│   384 │   │   │   │   │   retry_state.set_exception(sys.exc_info())  # type: │
│   385 │   │   │   │   else:                                                  │
│                                                                              │
│ /home/hdl/project/FineR/FineR_0/agents/llm_bot.py:57 in call_gpts            │
│                                                                              │
│    54 │   │   │   max_tokens=max_tokens                                      │
│    55 │   │   )                                                              │
│    56 │   else:                                                              │
│ ❱  57 │   │   response = client.chat.completions.create(                     │
│    58 │   │   │   model=model,                                               │
│    59 │   │   │   messages=chatgpt_messages,                                 │
│    60 │   │   │   temperature=temperature                                    │
│                                                                              │
│ /home/hdl/miniconda3/envs/finer/lib/python3.9/site-packages/openai/_utils/_u │
│ tils.py:287 in wrapper                                                       │
│                                                                              │
│   284 │   │   │   │   │   else:                                              │
│   285 │   │   │   │   │   │   msg = f"Missing required argument: {quote(miss │
│   286 │   │   │   │   raise TypeError(msg)                                   │
│ ❱ 287 │   │   │   return func(*args, **kwargs)                               │
│   288 │   │                                                                  │
│   289 │   │   return wrapper  # type: ignore                                 │
│   290                                                                        │
│                                                                              │
│ /home/hdl/miniconda3/envs/finer/lib/python3.9/site-packages/openai/resources │
│ /chat/completions/completions.py:1147 in create                              │
│                                                                              │
│   1144 │   │   timeout: float | httpx.Timeout | None | NotGiven = NOT_GIVEN, │
│   1145 │   ) -> ChatCompletion | Stream[ChatCompletionChunk]:                │
│   1146 │   │   validate_response_format(response_format)                     │
│ ❱ 1147 │   │   return self._post(                                            │
│   1148 │   │   │   "/chat/completions",                                      │
│   1149 │   │   │   body=maybe_transform(                                     │
│   1150 │   │   │   │   {                                                     │
│                                                                              │
│ /home/hdl/miniconda3/envs/finer/lib/python3.9/site-packages/openai/_base_cli │
│ ent.py:1259 in post                                                          │
│                                                                              │
│   1256 │   │   opts = FinalRequestOptions.construct(                         │
│   1257 │   │   │   method="post", url=path, json_data=body, files=to_httpx_f │
│   1258 │   │   )                                                             │
│ ❱ 1259 │   │   return cast(ResponseT, self.request(cast_to, opts, stream=str │
│   1260 │                                                                     │
│   1261 │   def patch(                                                        │
│   1262 │   │   self,                                                         │
│                                                                              │
│ /home/hdl/miniconda3/envs/finer/lib/python3.9/site-packages/openai/_base_cli │
│ ent.py:1047 in request                                                       │
│                                                                              │
│   1044 │   │   │   │   │   err.response.read()                               │
│   1045 │   │   │   │                                                         │
│   1046 │   │   │   │   log.debug("Re-raising status error")                  │
│ ❱ 1047 │   │   │   │   raise self._make_status_error_from_response(err.respo │
│   1048 │   │   │                                                             │
│   1049 │   │   │   break                                                     │
│   1050                                                                       │
╰──────────────────────────────────────────────────────────────────────────────╯
AuthenticationError: Error code: 401 - {'error': {'message': '无效的sk 
token，请检查token是否正确', 'type': 'error'}}

The above exception was the direct cause of the following exception:

╭───────────────────── Traceback (most recent call last) ──────────────────────╮
│ /home/hdl/project/FineR/FineR_0/discovering.py:394 in <module>               │
│                                                                              │
│   391 │   │   llm_bot = LLMBot(model=cfg['model_type_llm'])                  │
│   392 │   │                                                                  │
│   393 │   │   # run the main program                                         │
│ ❱ 394 │   │   raw_replies, jsoned_replies = main_guess(cfg, llm_bot, reasoni │
│   395 │   │                                                                  │
│   396 │   │   # save LLM replis                                              │
│   397 │   │   dump_json(cfg['path_llm_replies_raw'] + expt_id_suffix, raw_re │
│                                                                              │
│ /home/hdl/project/FineR/FineR_0/discovering.py:170 in main_guess             │
│                                                                              │
│   167 │                                                                      │
│   168 │   # LLM inferring                                                    │
│   169 │   for i, (key, prompt) in tqdm(enumerate(prompt_list.items())):      │
│ ❱ 170 │   │   raw_reply = bot.infer(prompt, temperature=0.9)  # use a high t │
│   171 │   │   used_tokens = bot.get_used_tokens()                            │
│   172 │   │                                                                  │
│   173 │   │   replies_raw[key] = raw_reply                                   │
│                                                                              │
│ /home/hdl/project/FineR/FineR_0/agents/llm_bot.py:119 in infer               │
│                                                                              │
│   116 │   │   return reply, total_prompt, n_tokens                           │
│   117 │                                                                      │
│   118 │   def infer(self, prompt, temperature=0.9):                          │
│ ❱ 119 │   │   reply, _, n_tokens = self.__query(prompt, temperature, max_tok │
│   120 │   │   self.total_tokens += n_tokens                                  │
│   121 │   │   return reply.strip()                                           │
│   122                                                                        │
│                                                                              │
│ /home/hdl/project/FineR/FineR_0/agents/llm_bot.py:109 in __query             │
│                                                                              │
│   106 │                                                                      │
│   107 │   def __query(self, prompt, temperature, max_token):                 │
│   108 │   │   total_prompt = prepare_chatgpt_message(prompt)                 │
│ ❱ 109 │   │   reply, n_tokens = call_gpts(                                   │
│   110 │   │   │   client=self.client,                                        │
│   111 │   │   │   chatgpt_messages=total_prompt,                             │
│   112 │   │   │   temperature=temperature,                                   │
│                                                                              │
│ /home/hdl/miniconda3/envs/finer/lib/python3.9/site-packages/tenacity/__init_ │
│ _.py:289 in wrapped_f                                                        │
│                                                                              │
│   286 │   │                                                                  │
│   287 │   │   @functools.wraps(f)                                            │
│   288 │   │   def wrapped_f(*args: t.Any, **kw: t.Any) -> t.Any:             │
│ ❱ 289 │   │   │   return self(f, *args, **kw)                                │
│   290 │   │                                                                  │
│   291 │   │   def retry_with(*args: t.Any, **kwargs: t.Any) -> WrappedFn:    │
│   292 │   │   │   return self.copy(*args, **kwargs).wraps(f)                 │
│                                                                              │
│ /home/hdl/miniconda3/envs/finer/lib/python3.9/site-packages/tenacity/__init_ │
│ _.py:379 in __call__                                                         │
│                                                                              │
│   376 │   │                                                                  │
│   377 │   │   retry_state = RetryCallState(retry_object=self, fn=fn, args=ar │
│   378 │   │   while True:                                                    │
│ ❱ 379 │   │   │   do = self.iter(retry_state=retry_state)                    │
│   380 │   │   │   if isinstance(do, DoAttempt):                              │
│   381 │   │   │   │   try:                                                   │
│   382 │   │   │   │   │   result = fn(*args, **kwargs)                       │
│                                                                              │
│ /home/hdl/miniconda3/envs/finer/lib/python3.9/site-packages/tenacity/__init_ │
│ _.py:326 in iter                                                             │
│                                                                              │
│   323 │   │   │   retry_exc = self.retry_error_cls(fut)                      │
│   324 │   │   │   if self.reraise:                                           │
│   325 │   │   │   │   raise retry_exc.reraise()                              │
│ ❱ 326 │   │   │   raise retry_exc from fut.exception()                       │
│   327 │   │                                                                  │
│   328 │   │   if self.wait:                                                  │
│   329 │   │   │   sleep = self.wait(retry_state)                             │
╰──────────────────────────────────────────────────────────────────────────────╯
RetryError: RetryError[<Future at 0x78b1c9fd2820 state=finished raised 
AuthenticationError>]
Namespace(mode='postprocess', config_file_env='./configs/env_machine.yml', config_file_expt='./configs/expts/pokemon_all.yml', num_per_category='3')
{'setup': 'ours', 'experiment': 5.0, 'dataset_name': 'pokemon', 'num_classes': 10, 'num_base': 5, 'num_novel': 5, 'seed': 1, 'batch_size': 256, 'clustering_method': 'multi_clip_voting', 'model_size': 'ViT-B/16', 'model_size_vqa': 'FlanT5-XXL', 'model_type_llm': 'gpt-3.5-turbo', 'image_size': 224, 'verbose': False, 'host': 'chaos', 'num_workers': 16, 'device': 'cuda', 'device_count': '1', 'device_id': '0', 'data_dir': './datasets/pokemon', 'expt_dir': './experiments/pokemon', 'expt_dir_describe': './experiments/pokemon/describe', 'path_vqa_questions': './experiments/pokemon/describe/pokemon_vqa_questions', 'path_vqa_answers': './experiments/pokemon/describe/pokemon_attributes_pairs', 'path_llm_prompts': './experiments/pokemon/describe/pokemon_llm_prompts', 'expt_dir_guess': './experiments/pokemon/guess', 'path_llm_replies_raw': './experiments/pokemon/guess/pokemon_llm_replies_raw', 'path_llm_replies_jsoned': './experiments/pokemon/guess/pokemon_llm_replies_jsoned', 'path_llm_gussed_names': './experiments/pokemon/guess/pokemon_llm_gussed_names', 'expt_dir_grouping': './experiments/pokemon/grouping'}
Charmander_0
{
    "Squirtle": [
        "Squirtle is a small, orange Pokemon with a stubby, snout-like creature.",
        "It has a spherical body with a spherical head and four limbs.",
        "The Pokemon has a squint eye shape and orange eyes.",
        "Its mouth shape is a slit and it has a stubby tail.",
        "Squirtle has two heads and two eyes."
    ],
    "Charmander": [
        "Squirtle is a small, orange Pokemon with a stubby, snout-like creature.",
        "It has a spherical body with a spherical head and four limbs.",
        "The Pokemon has a squint eye shape and orange eyes.",
        "Its mouth shape is a slit and it has a stubby tail.",
        "Squirtle has two heads and two eyes."
    ],
    "Cyndaquil": [
        "Squirtle is a small, orange Pokemon with a stubby, snout-like creature.",
        "It has a spherical body with a spherical head and four limbs.",
        "The Pokemon has a squint eye shape and orange eyes.",
        "Its mouth shape is a slit and it has a stubby tail.",
        "Squirtle has two heads and two eyes."
    ]
}


Charmander_1
{
    "Squirtle": [
        "This pokemon is a small orange creature with a scaly, stubby, snout-like head, two heads, and two squinty orange eyes.",
        "It has a small, lizard-like body with a tail, four limbs, and smooth skin texture.",
        "The special markings of this pokemon are a bright red nose and a yellow tummy.",
        "Its mouth is in the shape of a snout and its ears resemble those of a frog.",
        "It is associated with the fire element and has a smile as its facial expression."
    ],
    "Charmander": [
        "This pokemon is a small orange creature with a scaly, stubby, snout-like head, two heads, and two squinty orange eyes.",
        "It has a small, lizard-like body with a tail, four limbs, and smooth skin texture.",
        "The special markings of this pokemon are a bright red nose and a yellow tummy.",
        "Its mouth is in the shape of a snout and its ears resemble those of a frog.",
        "It is associated with the fire element and has a smile as its facial expression."
    ],
    "Charmeleon": [
        "This pokemon is a small orange creature with a scaly, stubby, snout-like head, two heads, and two squinty orange eyes.",
        "It has a small, lizard-like body with a tail, four limbs, and smooth skin texture.",
        "The special markings of this pokemon are a bright red nose and a yellow tummy.",
        "Its mouth is in the shape of a snout and its ears resemble those of a frog.",
        "It is associated with the fire element and has a smile as its facial expression."
    ]
}


Charmander_2
{
  "Squirtle": [
    "A squirtle is a small, round, and stubby pokemon with a brown color.",
    "It has a spherical head and body with a white belly and blue tummy.",
    "This pokemon has four limbs in a T shape and two heads with squinty blue eyes and a slit mouth.",
    "It also has a stubby tail and a spherical shape ear.",
    "The skin is smooth and it has a flame on its head."
  ],
  "Wartortle": [
    "A squirtle is a small, round, and stubby pokemon with a brown color.",
    "It has a spherical head and body with a white belly and blue tummy.",
    "This pokemon has four limbs in a T shape and two heads with squinty blue eyes and a slit mouth.",
    "It also has a stubby tail and a spherical shape ear.",
    "The skin is smooth and it has a flame on its head."
  ],
  "Blastoise": [
    "A squirtle is a small, round, and stubby pokemon with a brown color.",
    "It has a spherical head and body with a white belly and blue tummy.",
    "This pokemon has four limbs in a T shape and two heads with squinty blue eyes and a slit mouth.",
    "It also has a stubby tail and a spherical shape ear.",
    "The skin is smooth and it has a flame on its head."
  ]
}


Pidgey_3
{
    "Swellow": [
        "The Pokemon in the image is a bird with a brown and white body pattern.",
        "It is small in size and has a beak.",
        "It has a white crest on its head and a white wing patch.",
        "It has two heads and two eyes with a squint shape.",
        "The Pokemon has four limbs, two wings, and a tail shaped like a swan."
    ],
    "Pidgeot": [
        "The Pokemon in the image is a bird with a brown and white body pattern.",
        "It is small in size and has a beak.",
        "It has a white crest on its head and a white wing patch.",
        "It has two heads and two eyes with a squint shape.",
        "The Pokemon has four limbs, two wings, and a tail shaped like a swan."
    ],
    "Staraptor": [
        "The Pokemon in the image is a bird with a brown and white body pattern.",
        "It is small in size and has a beak.",
        "It has a white crest on its head and a white wing patch.",
        "It has two heads and two eyes with a squint shape.",
        "The Pokemon has four limbs, two wings, and a tail shaped like a swan."
    ]
}


Pidgey_4
{
  "Crestwing": [
    "This is a medium-sized bird with a brown head and a white belly.",
    "It has four limbs and two heads with two eyes each.",
    "The bird has a hawk-like eye shape and brown eyes.",
    "It has a slit-shaped mouth and a tail resembling that of a swan.",
    "The bird has a unique white crest on its head and a spherical ear shape."
  ],
  "Swaneye": [
    "This is a medium-sized bird with a brown head and a white belly.",
    "It has four limbs and two heads with two eyes each.",
    "The bird has a hawk-like eye shape and brown eyes.",
    "It has a slit-shaped mouth and a tail resembling that of a swan.",
    "The bird has a unique white crest on its head and a spherical ear shape."
  ],
  "Hawkbeak": [
    "This is a medium-sized bird with a brown head and a white belly.",
    "It has four limbs and two heads with two eyes each.",
    "The bird has a hawk-like eye shape and brown eyes.",
    "It has a slit-shaped mouth and a tail resembling that of a swan.",
    "The bird has a unique white crest on its head and a spherical ear shape."
  ]
}


Pidgey_5
{
    "Sylveon": [
        "A Sylveon is a medium-sized bird-like Pokemon with brown and white feathers.",
        "Its body is covered in brown feathers with a white head and a red beak.",
        "The Pokemon has two heads and two eyes, which are brown and shaped like a hawk.",
        "It has a spherical-shaped ear and a scaly skin texture.",
        "The Sylveon has a unique feature of a long neck and two wings."
    ],
    "Hawkwing": [
        "A Sylveon is a medium-sized bird-like Pokemon with brown and white feathers.",
        "Its body is covered in brown feathers with a white head and a red beak.",
        "The Pokemon has two heads and two eyes, which are brown and shaped like a hawk.",
        "It has a spherical-shaped ear and a scaly skin texture.",
        "The Sylveon has a unique feature of a long neck and two wings."
    ],
    "Swanbeak": [
        "A Sylveon is a medium-sized bird-like Pokemon with brown and white feathers.",
        "Its body is covered in brown feathers with a white head and a red beak.",
        "The Pokemon has two heads and two eyes, which are brown and shaped like a hawk.",
        "It has a spherical-shaped ear and a scaly skin texture.",
        "The Sylveon has a unique feature of a long neck and two wings."
    ]
}


Pidgeotto_6
{
    "Sylveon": [
        "This image features a Pokemon called Sylveon, which is a bird-like creature with a medium size.",
        "It has a tan body with a red head and wings, and it is characterized by its brown and pink coloration.",
        "Sylveon has a unique shape with a long neck, long tail, and a swan-like tail.",
        "It has four limbs and two heads with squinty pink eyes.",
        "The Pokemon has a slit mouth and a spherical ear shape."
    ],
    "Birdor": [
        "This image features a Pokemon called Birdor, which is a bird-like creature with a medium size.",
        "It has a tan body with a red head and wings, and it is characterized by its brown and pink coloration.",
        "Birdor has a unique shape with a long neck, long tail, and a swan-like tail.",
        "It has four limbs and two heads with squinty pink eyes.",
        "The Pokemon has a slit mouth and a spherical ear shape."
    ],
    "Swanwing": [
        "This image features a Pokemon called Swanwing, which is a bird-like creature with a medium size.",
        "It has a tan body with a red head and wings, and it is characterized by its brown and pink coloration.",
        "Swanwing has a unique shape with a long neck, long tail, and a swan-like tail.",
        "It has four limbs and two heads with squinty pink eyes.",
        "The Pokemon has a slit mouth and a spherical ear shape."
    ]
}


Pidgeotto_7
{
    "Sylveon": [
        "Sylveon is a medium-sized bird-like Pokémon with a pink and brown coloration. It has a brown body with a yellow head and wings.",
        "The Pokémon has four limbs, two heads, and two eyes with a hawk-like shape. Its eye color is brown, and its mouth has a slit shape.",
        "The tail resembles that of a swan. It has a special marking of a red and yellow crest on its head, along with a white ear shape similar to a swan.",
        "Sylveon's skin texture is smooth. It is in the evolutionary stage of being a Sandslash.",
        "It has two wings and legs shaped like a Squirtle. Its arms have a wing-like shape. The Pokémon has a smug facial expression and a unique feature of wings."
    ],
    "Sandslash": [
        "Sylveon is in the evolutionary stage of being a Sandslash. Its coloration is pink and brown, and its size is medium.",
        "It has a brown body with a yellow head and wings. The Pokémon has four limbs, two heads, and two eyes with a hawk-like shape.",
        "The eye color is brown, and the mouth has a slit shape. The tail resembles that of a swan.",
        "Sylveon has a special marking of a red and yellow crest on its head, along with a white ear shape similar to a swan. Its skin texture is smooth.",
        "It has two wings and legs shaped like a Squirtle. Its arms have a wing-like shape. The Pokémon has a smug facial expression and a unique feature of wings."
    ],
    "Swanslash": [
        "Sylveon resembles a bird, particularly a swan, with its medium size and pink and brown coloration.",
        "Its brown body has a yellow head and wings. The Pokémon has four limbs, two heads, and two eyes with a hawk-like shape.",
        "The eye color is brown, and the mouth has a slit shape. The tail is shaped like that of a swan.",
        "Sylveon has a special marking of a red and yellow crest on its head, along with a white ear shape similar to a swan. Its skin texture is smooth.",
        "It has two wings and legs shaped like a Squirtle. Its arms have a wing-like shape. The Pokémon has a smug facial expression and a unique feature of wings."
    ]
}


Pidgeotto_8
{
  "Squirtle": [
    "The image shows a pokemon resembling a squirtle with a brown body and a red head.",
    "It has a small size and a bird-like shape.",
    "The pokemon has hawk-shaped red eyes and a slit-shaped mouth.",
    "It has a swan-like tail and two heads, with two eyes on each head.",
    "The pokemon is associated with the bird element and has a special marking of a red hat with a white crest on its head."
  ],
  "Redhat": [
    "The image shows a pokemon resembling a squirtle with a brown body and a red head.",
    "It has a small size and a bird-like shape.",
    "The pokemon has hawk-shaped red eyes and a slit-shaped mouth.",
    "It has a swan-like tail and two heads, with two eyes on each head.",
    "The pokemon is associated with the bird element and has a special marking of a red hat with a white crest on its head."
  ],
  "Crestspike": [
    "The image shows a pokemon resembling a squirtle with a brown body and a red head.",
    "It has a small size and a bird-like shape.",
    "The pokemon has hawk-shaped red eyes and a slit-shaped mouth.",
    "It has a swan-like tail and two heads, with two eyes on each head.",
    "The pokemon is associated with the bird element and has a special marking of a red hat with a white crest on its head."
  ]
}


Charmeleon_9
{
    "Flamizard": [
        "The image shows a small red fire type pokemon with a red and white striped body, black belly, and a flame on its head.",
        "It has a sad expression with squint-shaped red eyes and a slit-shaped mouth.",
        "The pokemon has two heads, two eyes, and four limbs.",
        "It has a stubby tail with a curved tip and no presence of fins, horns, or crests.",
        "The unique features include slanted triangle-shaped ears, a red scaly skin, and a spike on its body."
    ],
    "Lizardflare": [
        "The image shows a small red fire type pokemon with a red and white striped body, black belly, and a flame on its head.",
        "It has a sad expression with squint-shaped red eyes and a slit-shaped mouth.",
        "The pokemon has two heads, two eyes, and four limbs.",
        "It has a stubby tail with a curved tip and no presence of fins, horns, or crests.",
        "The unique features include slanted triangle-shaped ears, a red scaly skin, and a spike on its body."
    ],
    "Ignisaur": [
        "The image shows a small red fire type pokemon with a red and white striped body, black belly, and a flame on its head.",
        "It has a sad expression with squint-shaped red eyes and a slit-shaped mouth.",
        "The pokemon has two heads, two eyes, and four limbs.",
        "It has a stubby tail with a curved tip and no presence of fins, horns, or crests.",
        "The unique features include slanted triangle-shaped ears, a red scaly skin, and a spike on its body."
    ]
}


Charmeleon_10
{
    "Squirtle": [
        "The pokemon in the image is a small, red-colored creature that resembles a lizard.",
        "It has a tiger-like pattern on its body and a red tummy with a white belly.",
        "With four limbs and two heads, it has squinted red eyes and a snout-like mouth.",
        "Its tail is slanted and resembles a tadpole.",
        "This pokemon is associated with the fire element and has the ability of a fire-type."
    ],
    "Charmander": [
        "The pokemon in the image is a small, red-colored creature that resembles a lizard.",
        "It has a tiger-like pattern on its body and a red tummy with a white belly.",
        "With four limbs and two heads, it has squinted red eyes and a snout-like mouth.",
        "Its tail is slanted and resembles a tadpole.",
        "This pokemon is associated with the fire element and has the ability of a fire-type."
    ],
    "Charizard": [
        "The pokemon in the image is a small, red-colored creature that resembles a lizard.",
        "It has a tiger-like pattern on its body and a red tummy with a white belly.",
        "With four limbs and two heads, it has squinted red eyes and a snout-like mouth.",
        "Its tail is slanted and resembles a tadpole.",
        "This pokemon is associated with the fire element and has the ability of a fire-type."
    ]
}


Charmeleon_11
{
    "Squirtle": [
        "A squirtle is a small, red and yellow pokemon with a red body, white belly, and white tail.",
        "It has four limbs, two heads, and two eyes that are squint and red in color.",
        "The pokemon has a slit mouth and a stubby tail with a curved tip.",
        "It is associated with the fire element and has special markings on its body.",
        "The squirtle has a triangular ear shape, smooth skin texture, and a smirk facial expression."
    ],
    "Charmeleon": [
        "A squirtle is a small, red and yellow pokemon with a red body, white belly, and white tail.",
        "It has four limbs, two heads, and two eyes that are squint and red in color.",
        "The pokemon has a slit mouth and a stubby tail with a curved tip.",
        "It is associated with the fire element and has special markings on its body.",
        "The squirtle has a triangular ear shape, smooth skin texture, and a smirk facial expression."
    ],
    "Charizard": [
        "A squirtle is a small, red and yellow pokemon with a red body, white belly, and white tail.",
        "It has four limbs, two heads, and two eyes that are squint and red in color.",
        "The pokemon has a slit mouth and a stubby tail with a curved tip.",
        "It is associated with the fire element and has special markings on its body.",
        "The squirtle has a triangular ear shape, smooth skin texture, and a smirk facial expression."
    ]
}


Squirtle_12
{
    "Squirtle": [
        "This is a small turtle-like pokemon called Squirtle.",
        "It has a blue body with a yellow head and a yellow tail.",
        "The pokemon has a sad expression with squinted blue eyes and a slit mouth.",
        "It has four limbs and two heads with two blue eyes.",
        "Squirtle is associated with the element of sand and has a smooth skin texture."
    ],
    "Wartortle": [
        "This is a small turtle-like pokemon called Wartortle.",
        "It has a blue body with a yellow head and a yellow tail.",
        "The pokemon has a sad expression with squinted blue eyes and a slit mouth.",
        "It has four limbs and two heads with two blue eyes.",
        "Wartortle is associated with the element of sand and has a smooth skin texture."
    ],
    "Blastoise": [
        "This is a small turtle-like pokemon called Blastoise.",
        "It has a blue body with a yellow head and a yellow tail.",
        "The pokemon has a sad expression with squinted blue eyes and a slit mouth.",
        "It has four limbs and two heads with two blue eyes.",
        "Blastoise is associated with the element of sand and has a smooth skin texture."
    ]
}


Squirtle_13
{
    "Squirtle": [
        "Squirtle is a small, blue turtle-like Pokémon with a smooth skin texture.",
        "It has a squint eye shape and blue eyes.",
        "The mouth is in the form of a snout.",
        "Squirtle has a unique body pattern that resembles a squirtle.",
        "It has four limbs, a tail, and two heads."
    ],
    "Wartortle": [
        "Wartortle evolves from Squirtle and is a larger, more powerful water-type Pokémon.",
        "It retains the same blue color and turtle-like shape.",
        "Wartortle has evolved to have a larger body size and more defined limbs.",
        "It still has a snout-shaped mouth and two squint eyes.",
        "The special markings on Wartortle include a darker blue tail and the presence of a spike on its back."
    ],
    "Blastoise": [
        "Blastoise is the final evolution stage of Squirtle, following Wartortle.",
        "It is a larger, more heavily built Pokémon with a dark blue color.",
        "Blastoise has a more pronounced turtle shape and a distinctive cannon-like structure on its back.",
        "It has two heads, a snout-shaped mouth, and blue eyes.",
        "The special markings of Blastoise include water cannons on its shell and a spike on its back."
    ]
}


Squirtle_14
{
    "Squirtle": [
        "This is a blue turtle with a small size and a smooth skin texture.",
        "It has a squint eye shape and blue eyes.",
        "The mouth shape is a slit and it has a turtle-shaped body with a tail.",
        "It has two heads and two limbs.",
        "The pokemon is a squirtle in its evolutionary stage."
    ],
    "Wartortle": [
        "This is a blue turtle with a small size and a smooth skin texture.",
        "It has a squint eye shape and blue eyes.",
        "The mouth shape is a slit and it has a turtle-shaped body with a tail.",
        "It has two heads and two limbs.",
        "The pokemon is a squirtle in its evolutionary stage."
    ],
    "Blastoise": [
        "This is a blue turtle with a small size and a smooth skin texture.",
        "It has a squint eye shape and blue eyes.",
        "The mouth shape is a slit and it has a turtle-shaped body with a tail.",
        "It has two heads and two limbs.",
        "The pokemon is a squirtle in its evolutionary stage."
    ]
}


Bulbasaur_15
{
    "Squirtle": [
        "A squirtle is a small and green pokemon with a red head and tail.",
        "It has four limbs and a squinty green eyes.",
        "The mouth is in a slit shape and the unique feature of this pokemon is its green body with red eyes.",
        "It has two heads and two eyes.",
        "The skin texture of the squirtle is smooth and it is at the evolutionary stage of being a squirtle."
    ],
    "Greened": [
        "A squirtle is a small and green pokemon with a red head and tail.",
        "It has four limbs and a squinty green eyes.",
        "The mouth is in a slit shape and the unique feature of this pokemon is its green body with red eyes.",
        "It has two heads and two eyes.",
        "The skin texture of the squirtle is smooth and it is at the evolutionary stage of being a squirtle."
    ],
    "Frogleaf": [
        "A squirtle is a small and green pokemon with a red head and tail.",
        "It has four limbs and a squinty green eyes.",
        "The mouth is in a slit shape and the unique feature of this pokemon is its green body with red eyes.",
        "It has two heads and two eyes.",
        "The skin texture of the squirtle is smooth and it is at the evolutionary stage of being a squirtle."
    ]
}


Bulbasaur_16
{
    "Squirtle": [
        "Squirtle is a small, green, leafy creature with a sad expression.",
        "It has a leaf on its back and is associated with the grass element.",
        "It has four limbs, two heads, and two eyes which are squinted and green in color.",
        "Squirtle has a smooth skin texture and its body shape resembles a squirtle.",
        "It does not have wings, fins, or horns, but it does have a spike on its back."
    ],
    "Greenleaf": [
        "Greenleaf is a small, green, leafy creature with a sad expression.",
        "It has a leaf on its back and is associated with the grass element.",
        "It has four limbs, two heads, and two eyes which are squinted and green in color.",
        "Greenleaf has a smooth skin texture and its body shape resembles a squirtle.",
        "It does not have wings, fins, or horns, but it does have a spike on its back."
    ],
    "Leafurtle": [
        "Leafurtle is a small, green, leafy creature with a sad expression.",
        "It has a leaf on its back and is associated with the grass element.",
        "It has four limbs, two heads, and two eyes which are squinted and green in color.",
        "Leafurtle has a smooth skin texture and its body shape resembles a squirtle.",
        "It does not have wings, fins, or horns, but it does have a spike on its back."
    ]
}


Bulbasaur_17
{
    "Squirtle": [
        "This image shows a small, green Pokemon called Squirtle.",
        "It has a spherical body with a rounded head and two squinty green eyes.",
        "The Pokemon has a sad facial expression and its mouth is in the shape of a slit.",
        "It has four limbs, each ending in a Squirtle-like shape.",
        "Squirtle has a unique feature, which is a backpack-like pouch on its back."
    ],
    "Squirtle-like creature": [
        "This image shows a small, green Pokemon called Squirtle-like creature.",
        "It has a spherical body with a rounded head and two squinty green eyes.",
        "The Pokemon has a sad facial expression and its mouth is in the shape of a slit.",
        "It has four limbs, each ending in a Squirtle-like shape.",
        "Squirtle-like creature has a unique feature, which is a backpack-like pouch on its back."
    ],
    "Green Pokemon": [
        "This image shows a small, green Pokemon called Green Pokemon.",
        "It has a spherical body with a rounded head and two squinty green eyes.",
        "The Pokemon has a sad facial expression and its mouth is in the shape of a slit.",
        "It has four limbs, each ending in a Squirtle-like shape.",
        "Green Pokemon has a unique feature, which is a backpack-like pouch on its back."
    ]
}


Raichu_18
{
    "Pikachu": [
        "This image shows a small, yellow pokemon called Pikachu.",
        "It has a Squirtle-like tail and a snout, and its body has special markings with a yellow color, a black tail, and a white t.",
        "Pikachu has a squint eye shape with yellow eyes and a smiley facial expression.",
        "It has two heads, two eyes, and four limbs, with a small and smooth skin texture.",
        "Pikachu is associated with the water element and has a unique feature of having a tail."
    ],
    "Pichu": [
        "This image shows a small, yellow pokemon called Pichu.",
        "It has a Squirtle-like tail and a snout, and its body has special markings with a yellow color, a black tail, and a white t.",
        "Pichu has a squint eye shape with yellow eyes and a smiley facial expression.",
        "It has two heads, two eyes, and four limbs, with a small and smooth skin texture.",
        "Pichu is associated with the water element and has a unique feature of having a tail."
    ],
    "Raichu": [
        "This image shows a small, yellow pokemon called Raichu.",
        "It has a Squirtle-like tail and a snout, and its body has special markings with a yellow color, a black tail, and a white t.",
        "Raichu has a squint eye shape with yellow eyes and a smiley facial expression.",
        "It has two heads, two eyes, and four limbs, with a small and smooth skin texture.",
        "Raichu is associated with the water element and has a unique feature of having a tail."
    ]
}


Raichu_19
{
    "PikaHorn": [
        "This image shows a small, brown pikachu with a snout-like shape and a pigtail tail.",
        "It has a squirtle-like pattern on its back.",
        "The pikachu has four limbs and two heads, with two squinty brown eyes and a slit mouth.",
        "It has a unique feature of a horn on its snout and a sad expression.",
        "The skin texture is smooth, and it is in the evolutionary stage of a pikachu."
    ],
    "Squirtchu": [
        "This image shows a small, brown pikachu with a snout-like shape and a pigtail tail.",
        "It has a squirtle-like pattern on its back.",
        "The pikachu has four limbs and two heads, with two squinty brown eyes and a slit mouth.",
        "It has a unique feature of a horn on its snout and a sad expression.",
        "The skin texture is smooth, and it is in the evolutionary stage of a pikachu."
    ],
    "Sadtail Pikachu": [
        "This image shows a small, brown pikachu with a snout-like shape and a pigtail tail.",
        "It has a squirtle-like pattern on its back.",
        "The pikachu has four limbs and two heads, with two squinty brown eyes and a slit mouth.",
        "It has a unique feature of a horn on its snout and a sad expression.",
        "The skin texture is smooth, and it is in the evolutionary stage of a pikachu."
    ]
}


Raichu_20
{
    "Pikachu": [
        "This is a small, orange and white Pokemon called Pikachu.",
        "It has a yellow body, a yellow head, and a yellow tail.",
        "It has two heads and two eyes, with a squint eye shape and yellow eye color.",
        "Pikachu has a small size and a smooth skin texture.",
        "It has a unique feature of a horn."
    ],
    "Pika": [
        "This is a small, orange and white Pokemon called Pikachu.",
        "It has a yellow body, a yellow head, and a yellow tail.",
        "It has two heads and two eyes, with a squint eye shape and yellow eye color.",
        "Pikachu has a small size and a smooth skin texture.",
        "It has a unique feature of a horn."
    ],
    "Sparkachu": [
        "This is a small, orange and white Pokemon called Pikachu.",
        "It has a yellow body, a yellow head, and a yellow tail.",
        "It has two heads and two eyes, with a squint eye shape and yellow eye color.",
        "Pikachu has a small size and a smooth skin texture.",
        "It has a unique feature of a horn."
    ]
}


Wartortle_21
{
  "Squirtle": [
    "A squirtle is a small-sized turtle-like Pokemon with a blue body and a white belly.",
    "It has a blue head with a squint-shaped blue eyes and a slit-like mouth.",
    "The Pokemon has two heads and four limbs.",
    "It is associated with the water element and has a tail shaped like a squirtle.",
    "It has smooth and shiny skin and a unique feature of having a shell."
  ],
  "Wartortle": [
    "A squirtle is a small-sized turtle-like Pokemon with a blue body and a white belly.",
    "It has a blue head with a squint-shaped blue eyes and a slit-like mouth.",
    "The Pokemon has two heads and four limbs.",
    "It is associated with the water element and has a tail shaped like a squirtle.",
    "It has smooth and shiny skin and a unique feature of having a shell."
  ],
  "Blastoise": [
    "A squirtle is a small-sized turtle-like Pokemon with a blue body and a white belly.",
    "It has a blue head with a squint-shaped blue eyes and a slit-like mouth.",
    "The Pokemon has two heads and four limbs.",
    "It is associated with the water element and has a tail shaped like a squirtle.",
    "It has smooth and shiny skin and a unique feature of having a shell."
  ]
}


Wartortle_22
{
   "Squirturtle": [
      "The pokemon in the image is a small, blue turtle-like creature with a squirtle pattern on its body.",
      "It has four limbs and two heads with squinted blue eyes and a slit-like mouth.",
      "The pokemon has a fairy element associated with it and special markings in the form of a squirtle on its back and a smooth skin texture.",
      "It is at an early evolutionary stage and does not have any wings, fins, or horns.",
      "Its unique feature is that it is a squirtle. The pokemon has a friendly facial expression with a smile."
   ],
   "Bluetail": [
      "The pokemon in the image is a small, blue turtle-like creature with a squirtle pattern on its body.",
      "It has four limbs and two heads with squinted blue eyes and a slit-like mouth.",
      "The pokemon has a fairy element associated with it and special markings in the form of a squirtle on its back and a smooth skin texture.",
      "It is at an early evolutionary stage and does not have any wings, fins, or horns.",
      "Its unique feature is that it is a squirtle. The pokemon has a friendly facial expression with a smile."
   ],
   "Fairesquirt": [
      "The pokemon in the image is a small, blue turtle-like creature with a squirtle pattern on its body.",
      "It has four limbs and two heads with squinted blue eyes and a slit-like mouth.",
      "The pokemon has a fairy element associated with it and special markings in the form of a squirtle on its back and a smooth skin texture.",
      "It is at an early evolutionary stage and does not have any wings, fins, or horns.",
      "Its unique feature is that it is a squirtle. The pokemon has a friendly facial expression with a smile."
   ]
}


Wartortle_23
{
    "Squirtle": [
        "This is a small, blue turtle-like pokemon with a white belly and head.",
        "It has four limbs that are shaped like a turtle's arms and a tail shaped like a squirtle.",
        "It has two heads and two blue squint-shaped eyes.",
        "The pokemon has a sad facial expression and a slit mouth.",
        "Its ears are in the shape of a 't' and it doesn't have any fins, horns, or crests/spikes."
    ],
    "Wartortle": [
        "This is a small, blue turtle-like pokemon with a white belly and head.",
        "It has four limbs that are shaped like a turtle's arms and a tail shaped like a squirtle.",
        "It has two heads and two blue squint-shaped eyes.",
        "The pokemon has a sad facial expression and a slit mouth.",
        "Its ears are in the shape of a 't' and it doesn't have any fins, horns, or crests/spikes."
    ],
    "Blastoise": [
        "This is a small, blue turtle-like pokemon with a white belly and head.",
        "It has four limbs that are shaped like a turtle's arms and a tail shaped like a squirtle.",
        "It has two heads and two blue squint-shaped eyes.",
        "The pokemon has a sad facial expression and a slit mouth.",
        "Its ears are in the shape of a 't' and it doesn't have any fins, horns, or crests/spikes."
    ]
}


Ivysaur_24
{
"Flower Squirtle": [
"A Squirtle with a flower on its head is a small, green Pokemon with a scaly texture.",
"It has a sad facial expression and squinted blue eyes.",
"The Pokemon has four limbs, two heads, and two eyes.",
"It has a slit mouth and a unique feature of a flower on its head.",
"The body pattern of this Squirtle includes a splotch of green on its back."
],
"Greenleaf Squirtle": [
"A Squirtle with a flower on its head is a small, green Pokemon with a scaly texture.",
"It has a sad facial expression and squinted blue eyes.",
"The Pokemon has four limbs, two heads, and two eyes.",
"It has a slit mouth and a unique feature of a flower on its head.",
"The body pattern of this Squirtle includes a splotch of green on its back."
],
"Sadpetal Squirtle": [
"A Squirtle with a flower on its head is a small, green Pokemon with a scaly texture.",
"It has a sad facial expression and squinted blue eyes.",
"The Pokemon has four limbs, two heads, and two eyes.",
"It has a slit mouth and a unique feature of a flower on its head.",
"The body pattern of this Squirtle includes a splotch of green on its back."
]
}


Ivysaur_25
{
    "Squirtle": [
        "This image shows a small blue Pokemon known as Squirtle.",
        "It has a leaf on its back and a body with a green head and a pink tail.",
        "Squirtle has four limbs, two heads, and two eyes.",
        "Its eyes are squinted and blue in color.",
        "The mouth is in the shape of a slit."
    ],
    "Wartortle": [
        "This image shows a small blue Pokemon known as Wartortle.",
        "It has a leaf on its back and a body with a green head and a pink tail.",
        "Wartortle has four limbs, two heads, and two eyes.",
        "Its eyes are squinted and blue in color.",
        "The mouth is in the shape of a slit."
    ],
    "Blastoise": [
        "This image shows a small blue Pokemon known as Blastoise.",
        "It has a leaf on its back and a body with a green head and a pink tail.",
        "Blastoise has four limbs, two heads, and two eyes.",
        "Its eyes are squinted and blue in color.",
        "The mouth is in the shape of a slit."
    ]
}


Ivysaur_26
{
    "Squirtle": [
        "This image is of a small, blue pokemon called Squirtle.",
        "It has a blue and green body pattern with a pink flower on its head.",
        "Squirtle has four limbs, two heads, and two squinty blue eyes.",
        "Its mouth has a slit shape and it has a tail specific to Squirtle.",
        "The pokemon is associated with a flower and has special markings in the form of a flower on its head."
    ],
    "Wartortle": [
        "This image is of a small, blue pokemon called Wartortle.",
        "It has a blue and green body pattern with a pink flower on its head.",
        "Wartortle has four limbs, two heads, and two squinty blue eyes.",
        "Its mouth has a slit shape and it has a tail specific to Wartortle.",
        "The pokemon is associated with a flower and has special markings in the form of a flower on its head."
    ],
    "Blastoise": [
        "This image is of a small, blue pokemon called Blastoise.",
        "It has a blue and green body pattern with a pink flower on its head.",
        "Blastoise has four limbs, two heads, and two squinty blue eyes.",
        "Its mouth has a slit shape and it has a tail specific to Blastoise.",
        "The pokemon is associated with a flower and has special markings in the form of a flower on its head."
    ]
}


Pikachu_27
{
  "Pikachu": [
    "Pikachu is a small, yellow Pokemon with a black nose and black eyes.",
    "It has a squinty eye shape and a slit mouth shape.",
    "The Pokemon has a stubby tail and two heads.",
    "It is associated with the element of electricity.",
    "Pikachu has a unique feature of a yellow head and a smooth skin texture."
  ],
  "Pichu": [
    "Pikachu is a small, yellow Pokemon with a black nose and black eyes.",
    "It has a squinty eye shape and a slit mouth shape.",
    "The Pokemon has a stubby tail and two heads.",
    "It is associated with the element of electricity.",
    "Pikachu has a unique feature of a yellow head and a smooth skin texture."
  ],
  "Raichu": [
    "Pikachu is a small, yellow Pokemon with a black nose and black eyes.",
    "It has a squinty eye shape and a slit mouth shape.",
    "The Pokemon has a stubby tail and two heads.",
    "It is associated with the element of electricity.",
    "Pikachu has a unique feature of a yellow head and a smooth skin texture."
  ]
}


Pikachu_28
{
"pikachu": [
"Summary: Pikachu is a small, yellow Pokémon with a body shape of a small yellow ball.",
"It has a yellow squinty eyes, a slit mouth, and a stubby tail.",
"It has two heads with two eyes each.",
"Pikachu has a smooth and shiny skin texture.",
"It is a unique Pokémon belonging to the evolutionary stage of Pikachu."
],
"Pika": [
"Summary: Pikachu is a small, yellow Pokémon with a body shape of a small yellow ball.",
"It has a yellow squinty eyes, a slit mouth, and a stubby tail.",
"It has two heads with two eyes each.",
"Pikachu has a smooth and shiny skin texture.",
"It is a unique Pokémon belonging to the evolutionary stage of Pikachu."
],
"Electricball": [
"Summary: Pikachu is a small, yellow Pokémon with a body shape of a small yellow ball.",
"It has a yellow squinty eyes, a slit mouth, and a stubby tail.",
"It has two heads with two eyes each.",
"Pikachu has a smooth and shiny skin texture.",
"It is a unique Pokémon belonging to the evolutionary stage of Pikachu."
]
}


Pikachu_29
{
    "Pikachu": [
        "The pokemon in the image is a yellow Pikachu, small in size with a yellow body, black head, and a black tail.",
        "It has four limbs and a squint eye shape with yellow eyes.",
        "The mouth has a slit shape.",
        "The Pikachu has a unique feature of a tail and it is at the evolutionary stage of a Pikachu.",
        "There are no fins, horns, or crests present. The pokemon has a sad facial expression and associated with the element of lightning."
    ],
    "Pichu": [
        "The pokemon in the image is a yellow Pichu, small in size with a yellow body, black head, and a black tail.",
        "It has four limbs and a squint eye shape with yellow eyes.",
        "The mouth has a slit shape.",
        "The Pichu has a unique feature of a tail and it is at an early evolutionary stage.",
        "There are no fins, horns, or crests present. The pokemon has a sad facial expression and associated with the element of lightning."
    ],
    "Raichu": [
        "The pokemon in the image is a yellow Raichu, small in size with a yellow body, black head, and a black tail.",
        "It has four limbs and a squint eye shape with yellow eyes.",
        "The mouth has a slit shape.",
        "The Raichu has a unique feature of a tail and it is at an advanced evolutionary stage.",
        "There are no fins, horns, or crests present. The pokemon has a sad facial expression and associated with the element of lightning."
    ]
}


==============================
		 Finished Post-processing
==============================
		 ---> total discovered names = 47
['Swellow', 'Redhat', 'Sadtail Pikachu', 'Birdor', 'Pidgeot', 'Raichu', 'Swaneye', 'Squirtchu', 'Leafurtle', 'Cyndaquil', 'Greenleaf', 'Squirtle', 'Staraptor', 'Hawkbeak', 'Sandslash', 'Pichu', 'Pika', 'Greenleaf Squirtle', 'Hawkwing', 'Sylveon', 'pikachu', 'Sparkachu', 'Flower Squirtle', 'Bluetail', 'Lizardflare', 'Fairesquirt', 'Green Pokemon', 'Flamizard', 'Swanwing', 'Greened', 'Swanslash', 'Pikachu', 'Charmander', 'Squirtle-like creature', 'Crestwing', 'Ignisaur', 'Wartortle', 'Sadpetal Squirtle', 'Blastoise', 'PikaHorn', 'Electricball', 'Swanbeak', 'Frogleaf', 'Squirturtle', 'Charizard', 'Charmeleon', 'Crestspike']

		 ---> total discovered names = 47
		 ---> number of failure entries = 0
END==============================

Namespace(config_file_env='./configs/env_machine.yml', config_file_expt='./configs/expts/pokemon_all.yml', alpha=0.7, N_tta=10, num_per_category='3', num_runs=10)
Number of GPUs: 1
Device ID: 0 Device Name: NVIDIA RTX A6000
['Swellow', 'Redhat', 'Sadtail Pikachu', 'Birdor', 'Pidgeot', 'Raichu', 'Swaneye', 'Squirtchu', 'Leafurtle', 'Cyndaquil', 'Greenleaf', 'Squirtle', 'Staraptor', 'Hawkbeak', 'Sandslash', 'Pichu', 'Pika', 'Greenleaf Squirtle', 'Hawkwing', 'Sylveon', 'pikachu', 'Sparkachu', 'Flower Squirtle', 'Bluetail', 'Lizardflare', 'Fairesquirt', 'Green Pokemon', 'Flamizard', 'Swanwing', 'Greened', 'Swanslash', 'Pikachu', 'Charmander', 'Squirtle-like creature', 'Crestwing', 'Ignisaur', 'Wartortle', 'Sadpetal Squirtle', 'Blastoise', 'PikaHorn', 'Electricball', 'Swanbeak', 'Frogleaf', 'Squirturtle', 'Charizard', 'Charmeleon', 'Crestspike']
0it [00:00, ?it/s]1it [00:00,  4.68it/s]4it [00:00,  8.83it/s]7it [00:00, 13.22it/s]9it [00:00, 13.05it/s]11it [00:00, 13.99it/s]13it [00:01, 13.71it/s]15it [00:01, 11.03it/s]17it [00:01, 10.81it/s]19it [00:01, 11.04it/s]21it [00:01, 12.39it/s]23it [00:01, 11.53it/s]25it [00:02, 11.09it/s]27it [00:02,  7.09it/s]28it [00:02,  7.30it/s]29it [00:03,  6.15it/s]30it [00:03,  5.66it/s]30it [00:03,  9.07it/s]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:02<00:00,  2.13s/it]100%|██████████| 1/1 [00:02<00:00,  2.22s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:01<00:00,  1.87s/it]100%|██████████| 1/1 [00:01<00:00,  1.95s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.789372444152832


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 71.53846153846153
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 81.95026331016642
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 65.98797952066484


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 78.93724060058594
=========================          END          =========================
0it [00:00, ?it/s]2it [00:00, 14.58it/s]4it [00:00, 10.00it/s]6it [00:00, 12.10it/s]8it [00:00, 13.65it/s]10it [00:00, 13.72it/s]12it [00:00, 14.73it/s]14it [00:01, 14.87it/s]16it [00:01, 15.32it/s]18it [00:01, 15.22it/s]20it [00:01, 15.42it/s]22it [00:01, 15.72it/s]24it [00:01, 14.90it/s]26it [00:01, 15.51it/s]28it [00:01, 15.74it/s]30it [00:02, 16.08it/s]30it [00:02, 14.80it/s]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.23s/it]100%|██████████| 1/1 [00:02<00:00,  2.35s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.16s/it]100%|██████████| 1/1 [00:02<00:00,  2.27s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.7823934555053711


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 72.3076923076923
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 82.44214092823508
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 66.1134328358209


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 78.23934936523438
=========================          END          =========================
0it [00:00, ?it/s]2it [00:00, 12.91it/s]4it [00:00, 11.76it/s]6it [00:00, 13.31it/s]8it [00:00, 14.74it/s]10it [00:00, 12.60it/s]12it [00:00, 13.58it/s]14it [00:01, 13.68it/s]16it [00:01, 13.78it/s]19it [00:01, 14.43it/s]22it [00:01, 16.24it/s]24it [00:01, 16.23it/s]26it [00:01, 16.75it/s]28it [00:01, 16.02it/s]30it [00:02, 16.28it/s]30it [00:02, 14.89it/s]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.36s/it]100%|██████████| 1/1 [00:02<00:00,  2.49s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.36s/it]100%|██████████| 1/1 [00:02<00:00,  2.49s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.7877997756004333


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 70.0
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 81.37838283145075
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 65.03859442769976


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 78.77997589111328
=========================          END          =========================
0it [00:00, ?it/s]2it [00:00, 13.85it/s]4it [00:00, 11.31it/s]6it [00:00, 13.13it/s]8it [00:00, 13.95it/s]10it [00:00, 15.33it/s]12it [00:00, 16.60it/s]14it [00:00, 15.99it/s]16it [00:01, 13.41it/s]18it [00:01, 14.56it/s]21it [00:01, 16.74it/s]23it [00:01, 15.30it/s]25it [00:01, 15.38it/s]28it [00:01, 16.68it/s]30it [00:01, 15.59it/s]30it [00:01, 15.10it/s]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:01<00:00,  1.89s/it]100%|██████████| 1/1 [00:01<00:00,  1.99s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:01<00:00,  1.93s/it]100%|██████████| 1/1 [00:02<00:00,  2.03s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.7855166792869568


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 71.53846153846153
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 82.47900596167906
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 66.20196864746629


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 78.55166625976562
=========================          END          =========================
0it [00:00, ?it/s]2it [00:00, 14.17it/s]4it [00:00, 10.82it/s]6it [00:00, 12.15it/s]8it [00:00, 12.59it/s]10it [00:00, 12.68it/s]12it [00:00, 14.08it/s]14it [00:01, 13.25it/s]16it [00:01, 14.10it/s]18it [00:01, 14.41it/s]20it [00:01, 14.77it/s]23it [00:01, 16.10it/s]25it [00:01, 16.02it/s]27it [00:01, 15.44it/s]29it [00:01, 16.39it/s]30it [00:02, 14.67it/s]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.28s/it]100%|██████████| 1/1 [00:02<00:00,  2.40s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.25s/it]100%|██████████| 1/1 [00:02<00:00,  2.37s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.786565363407135


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 72.3076923076923
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 82.28536165665598
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 66.24465102552752


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 78.65653991699219
=========================          END          =========================
0it [00:00, ?it/s]2it [00:00, 13.97it/s]4it [00:00, 10.89it/s]6it [00:00, 13.27it/s]8it [00:00, 14.66it/s]10it [00:00, 15.22it/s]12it [00:00, 16.44it/s]14it [00:00, 14.93it/s]16it [00:01, 14.21it/s]18it [00:01, 13.43it/s]20it [00:01, 12.63it/s]22it [00:01, 13.56it/s]24it [00:01, 14.04it/s]26it [00:01, 14.19it/s]28it [00:02, 13.15it/s]30it [00:02, 13.86it/s]30it [00:02, 13.87it/s]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.31s/it]100%|██████████| 1/1 [00:02<00:00,  2.43s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.28s/it]100%|██████████| 1/1 [00:02<00:00,  2.45s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.7819525599479675


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 71.53846153846153
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 81.33159445485518
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 65.07581921739774


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 78.19525909423828
=========================          END          =========================
0it [00:00, ?it/s]2it [00:00, 17.34it/s]4it [00:00, 12.25it/s]6it [00:00, 13.07it/s]8it [00:00, 13.73it/s]11it [00:00, 15.64it/s]13it [00:00, 16.62it/s]15it [00:01, 14.55it/s]17it [00:01, 13.70it/s]19it [00:01, 14.42it/s]21it [00:01, 14.75it/s]23it [00:01, 14.89it/s]26it [00:01, 16.65it/s]28it [00:01, 16.64it/s]30it [00:02, 15.04it/s]30it [00:02, 14.94it/s]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.42s/it]100%|██████████| 1/1 [00:02<00:00,  2.55s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.35s/it]100%|██████████| 1/1 [00:02<00:00,  2.49s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.7775742411613464


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 70.0
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 80.91855288838559
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 64.16666666666667


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 77.7574234008789
=========================          END          =========================
0it [00:00, ?it/s]2it [00:00, 14.55it/s]4it [00:00, 11.90it/s]6it [00:00, 13.42it/s]8it [00:00, 13.93it/s]10it [00:00, 14.29it/s]12it [00:00, 14.16it/s]14it [00:01, 13.37it/s]16it [00:01, 13.38it/s]18it [00:01, 14.70it/s]20it [00:01, 14.24it/s]22it [00:01, 15.32it/s]24it [00:01, 14.85it/s]26it [00:01, 14.78it/s]28it [00:01, 14.97it/s]30it [00:02, 13.78it/s]30it [00:02, 14.09it/s]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.53s/it]100%|██████████| 1/1 [00:02<00:00,  2.72s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.36s/it]100%|██████████| 1/1 [00:02<00:00,  2.48s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.7731141448020935


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 69.23076923076923
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 80.29294895083979
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 63.167142543378


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 77.31141662597656
=========================          END          =========================
0it [00:00, ?it/s]2it [00:00, 14.92it/s]4it [00:00,  9.72it/s]6it [00:00, 11.90it/s]8it [00:00, 12.57it/s]10it [00:00, 13.03it/s]12it [00:00, 13.01it/s]14it [00:01, 10.95it/s]17it [00:01, 12.82it/s]19it [00:01, 12.53it/s]21it [00:01, 14.02it/s]23it [00:01, 14.72it/s]25it [00:01, 15.59it/s]28it [00:01, 18.08it/s]30it [00:02, 16.96it/s]30it [00:02, 14.05it/s]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.48s/it]100%|██████████| 1/1 [00:02<00:00,  2.63s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.32s/it]100%|██████████| 1/1 [00:02<00:00,  2.46s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.7787977457046509


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 69.23076923076923
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 79.52636310365648
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 62.59755734286565


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 77.87977600097656
=========================          END          =========================
0it [00:00, ?it/s]3it [00:00, 22.28it/s]6it [00:00, 14.65it/s]8it [00:00, 15.03it/s]10it [00:00, 15.34it/s]12it [00:00, 15.84it/s]14it [00:00, 14.58it/s]16it [00:01, 10.09it/s]19it [00:01, 12.49it/s]22it [00:01, 13.86it/s]24it [00:01, 14.74it/s]26it [00:01, 15.45it/s]29it [00:01, 17.95it/s]30it [00:01, 15.24it/s]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:01<00:00,  1.99s/it]100%|██████████| 1/1 [00:02<00:00,  2.10s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:01<00:00,  1.66s/it]100%|██████████| 1/1 [00:01<00:00,  1.74s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.7864943742752075


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 71.53846153846153
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 82.1136700515549
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 66.36097275124524


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 78.6494369506836
=========================          END          =========================


========================= ViLang Final Results of 10 runs, w/ 3 imgs per class=========================


[Clustering]
Clustering ACC: 70.92307692307693
Semantic ACC:   78.29580688476562
=========================          END          =========================
Namespace(mode='describe', config_file_env='./configs/env_machine.yml', config_file_expt='./configs/expts/pokemon_all.yml', num_per_category='3')
{'setup': 'ours', 'experiment': 5.0, 'dataset_name': 'pokemon', 'num_classes': 10, 'num_base': 5, 'num_novel': 5, 'seed': 1, 'batch_size': 256, 'clustering_method': 'multi_clip_voting', 'model_size': 'ViT-B/16', 'model_size_vqa': 'FlanT5-XXL', 'model_type_llm': 'gpt-3.5-turbo', 'image_size': 224, 'verbose': False, 'host': 'chaos', 'num_workers': 16, 'device': 'cuda', 'device_count': '1', 'device_id': '0', 'data_dir': './datasets/pokemon', 'expt_dir': './experiments/pokemon', 'expt_dir_describe': './experiments/pokemon/describe', 'path_vqa_questions': './experiments/pokemon/describe/pokemon_vqa_questions', 'path_vqa_answers': './experiments/pokemon/describe/pokemon_attributes_pairs', 'path_llm_prompts': './experiments/pokemon/describe/pokemon_llm_prompts', 'expt_dir_guess': './experiments/pokemon/guess', 'path_llm_replies_raw': './experiments/pokemon/guess/pokemon_llm_replies_raw', 'path_llm_replies_jsoned': './experiments/pokemon/guess/pokemon_llm_replies_jsoned', 'path_llm_gussed_names': './experiments/pokemon/guess/pokemon_llm_gussed_names', 'expt_dir_grouping': './experiments/pokemon/grouping'}
Loading checkpoint shards:   0%|          | 0/5 [00:00<?, ?it/s]Loading checkpoint shards:  20%|██        | 1/5 [00:02<00:08,  2.21s/it]Loading checkpoint shards:  40%|████      | 2/5 [00:04<00:06,  2.11s/it]Loading checkpoint shards:  60%|██████    | 3/5 [00:06<00:04,  2.09s/it]Loading checkpoint shards:  80%|████████  | 4/5 [00:08<00:02,  2.07s/it]Loading checkpoint shards: 100%|██████████| 5/5 [00:10<00:00,  1.96s/it]Loading checkpoint shards: 100%|██████████| 5/5 [00:10<00:00,  2.02s/it]
0it [00:00, ?it/s]1it [00:05,  5.97s/it]2it [00:11,  5.93s/it]0: label=2
==============================
Charmander_0 with label 2
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a small orange pokemon'''
        Attributes List:
        - '''color''': '''orange'''
        - '''size''': '''small'''
        - '''shape''': '''a small, orange, squirtle-like creature'''
        - '''body pattern''': '''a small, orange, scaly, lizard-like creature with'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''orange'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a stubby tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''fire'''
        - '''special markings''': '''the pokemon has a snout with a horn on it'''
        - '''ear shape''': '''a frog'''
        - '''skin texture''': '''smooth and shiny'''
        - '''evolutionary stage''': '''a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a t-shaped arm'''
        - '''facial expression''': '''a sad expression'''
        - '''unique feature''': '''it has a fire-type'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

1: label=2
==============================
Charmander_1 with label 2
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a small orange pokemon'''
        Attributes List:
        - '''color''': '''orange'''
        - '''size''': '''it is small'''
        - '''shape''': '''a small, orange, and yellow lizard'''
        - '''body pattern''': '''a scaly, squarish, snout-like'''
        - '''number of limbs''': '''four limbs'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''orange'''
        - '''mouth shape''': '''a snout'''
        - '''tail shape''': '''a slanted snout'''
        - '''number of heads''': '''two heads'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''fire'''
        - '''special markings''': '''the pokemon has a red nose and a yellow tummy'''
        - '''ear shape''': '''a frog'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a t-shaped arm'''
        - '''facial expression''': '''a smile'''
        - '''unique feature''': '''it has a tail'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

2: label=2
==============================
Charmander_2 with label 2
==============================

3it [00:18,  6.31s/it]4it [00:25,  6.43s/it]5it [00:31,  6.23s/it]
        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''brown'''
        - '''size''': '''it is small'''
        - '''shape''': '''it is a small, round, and stubby'''
        - '''body pattern''': '''it has a spherical head, a spherical body'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''the eyes are a squint'''
        - '''eye color''': '''blue'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a stubby tail with a rounded tip'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''fire'''
        - '''special markings''': '''the pokemon has a white belly and a blue tail'''
        - '''ear shape''': '''a spherical shape'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a t'''
        - '''arm shape''': '''the arms are a t shape'''
        - '''facial expression''': '''a smile'''
        - '''unique feature''': '''it has a flame on its head'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

3: label=9
==============================
Pidgeotto_3 with label 9
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a sylveon'''
        Attributes List:
        - '''color''': '''brown and pink'''
        - '''size''': '''it is a medium size'''
        - '''shape''': '''a bird with a long neck and a long tail'''
        - '''body pattern''': '''a tan body with a red head and wings'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''pink'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a swan-like tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a bird'''
        - '''special markings''': '''the pokemon has a red crest on its head'''
        - '''ear shape''': '''a spherical shape'''
        - '''skin texture''': '''a scaly texture'''
        - '''evolutionary stage''': '''a sylveon'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a slanted wing'''
        - '''arm shape''': '''a wing shape'''
        - '''facial expression''': '''a smirk'''
        - '''unique feature''': '''a bird with a long beak'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

4: label=9
==============================
Pidgeotto_4 with label 9
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a sylveon'''
        Attributes List:
        - '''color''': '''pink and brown'''
        - '''size''': '''it is a medium size'''
        - '''shape''': '''a bird'''
        - '''body pattern''': '''a bird with a long neck and a long tail'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a hawk's eye'''
        - '''eye color''': '''brown'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a swan'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a bird'''
        - '''special markings''': '''the pokemon has a red and yellow head, a white body, and a'''
        - '''ear shape''': '''a swan'''
        - '''skin texture''': '''a scaly texture'''
        - '''evolutionary stage''': '''a sylveon'''
        - '''number of wings''': '''two wings'''
        - '''leg shape''': '''a swan-like leg shape'''
        - '''arm shape''': '''a wing shape'''
        - '''facial expression''': '''a smirk'''
        - '''unique feature''': '''it has wings'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

5: label=9
==============================6it [00:37,  6.14s/it]7it [00:43,  6.31s/it]
Pidgeotto_5 with label 9
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''brown and red'''
        - '''size''': '''it is small'''
        - '''shape''': '''a bird'''
        - '''body pattern''': '''a brown body with a red head'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a hawk'''
        - '''eye color''': '''red'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a swan-like tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a bird'''
        - '''special markings''': '''a red hat and a white crest on its head'''
        - '''ear shape''': '''a spherical shape'''
        - '''skin texture''': '''smooth and shiny'''
        - '''evolutionary stage''': '''a snorlax'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle pokemon'''
        - '''arm shape''': '''a wing shape'''
        - '''facial expression''': '''a smug look'''
        - '''unique feature''': '''it has a red hat'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''yes'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

6: label=3
==============================
Charmeleon_6 with label 3
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''red'''
        - '''size''': '''it is small'''
        - '''shape''': '''it is a red and yellow pokemon'''
        - '''body pattern''': '''it has a red body with a white belly and a white tail'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''the eyes are a squint'''
        - '''eye color''': '''red'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''it is a stubby tail with a curved tip'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''fire'''
        - '''special markings''': '''the pokemon has a red body with a white belly and a white tail'''
        - '''ear shape''': '''the ear shape is a triangle'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a thigh and a shin'''
        - '''arm shape''': '''the arms are shaped like a t'''
        - '''facial expression''': '''a smirk'''
        - '''unique feature''': '''it has a tail that is on fire'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

7: label=3
==============================
Charmeleon_7 with label 3
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a red tawny tawny'''
        Attributes List:
        - '''color''': '''red'''
        - '''size''': '''it is small'''
        - '''shape''': '''a red and yellow lizard'''
        - '''body pattern''': '''a red and yellow tiger-like pattern'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''red'''
        - '''mouth shape''': '''a snout'''
        - '''tail shape''': '''a slanted tadpole tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''fire'''
        - '''special markings''': '''the pokemon has a red tummy and a white belly'''
        - '''ear shape''': '''a frog'''
        - '''skin texture''': '''a red lizard'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a t-shaped arm'''
        - '''facial expression''': '''a smirk'''
        - '''unique feature''': '''it has a fire-type'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

8it [00:49,  6.17s/it]9it [00:55,  5.95s/it]10it [01:01,  5.94s/it]END==============================

8: label=3
==============================
Charmeleon_8 with label 3
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a red pokemon with fire on its back'''
        Attributes List:
        - '''color''': '''red'''
        - '''size''': '''it is small'''
        - '''shape''': '''a red and yellow lizard'''
        - '''body pattern''': '''a red and white striped body with a black belly'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''red'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a stubby tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''fire'''
        - '''special markings''': '''the pokemon has a red body with a white belly and a white tail'''
        - '''ear shape''': '''a slanted triangle'''
        - '''skin texture''': '''a red lizard'''
        - '''evolutionary stage''': '''a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a t-shaped arm'''
        - '''facial expression''': '''angry'''
        - '''unique feature''': '''it has a flame on its head'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

9: label=1
==============================
Ivysaur_9 with label 1
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''blue'''
        - '''size''': '''it is small'''
        - '''shape''': '''a squirtle'''
        - '''body pattern''': '''a blue and green squirtle with a pink flower on its head'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''blue'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a flower'''
        - '''special markings''': '''the pokemon has a flower on its head'''
        - '''ear shape''': '''a squirtle'''
        - '''skin texture''': '''a scaly texture'''
        - '''evolutionary stage''': '''a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a squirtle'''
        - '''facial expression''': '''a sad expression'''
        - '''unique feature''': '''it has a flower on its head'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

10: label=1
==============================
Ivysaur_10 with label 1
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''green'''
        - '''size''': '''it is small'''
        - '''shape''': '''a squirtle'''
        - '''body pattern''': '''a squirtle with a flower on its head'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''green'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''grass'''
        - '''special markings''': '''the pokemon has a snout with a horn and a tail'''
        - '''ear shape''': '''a squirtle'''
        - '''skin texture''': '''a scaly texture'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a twig'''
        - '''facial expression''': '''a sad expression'''
        - '''unique feature''': '''it has a flower on its head'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

11it [01:06,  5.86s/it]12it [01:13,  6.19s/it]13it [01:18,  5.94s/it]END==============================

11: label=1
==============================
Ivysaur_11 with label 1
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''blue'''
        - '''size''': '''it is small'''
        - '''shape''': '''it is a small blue pokemon with a leaf on its back'''
        - '''body pattern''': '''it has a blue body with a green head and a pink tail'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''the eyes are a squint'''
        - '''eye color''': '''blue'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''the pokemon is a squirtle'''
        - '''special markings''': '''the pokemon has a green head, a blue body, and a pink tail'''
        - '''ear shape''': '''a squirtle'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a thigh and a thigh'''
        - '''arm shape''': '''the pokemon has a squirtle arm shape'''
        - '''facial expression''': '''a sad expression'''
        - '''unique feature''': '''it has a flower on its head'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

12: label=6
==============================
Pikachu_12 with label 6
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''pikachu'''
        Attributes List:
        - '''color''': '''yellow'''
        - '''size''': '''it is small'''
        - '''shape''': '''a small yellow pokemon'''
        - '''body pattern''': '''it has a yellow body with a black head and a black tail'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''yellow'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a slanted squirt tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''grass'''
        - '''special markings''': '''the pokemon has a yellow body with a black stripe on the side of its'''
        - '''ear shape''': '''a ear shape of a t'''
        - '''skin texture''': '''smooth'''
        - '''evolutionary stage''': '''it is a pikachu'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a t-shape'''
        - '''facial expression''': '''a sad expression'''
        - '''unique feature''': '''it has a tail'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

13: label=6
==============================
Pikachu_13 with label 6
==============================

14it [01:24,  5.77s/it]15it [01:30,  5.86s/it]16it [01:36,  5.79s/it]
        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''pikachu'''
        Attributes List:
        - '''color''': '''yellow'''
        - '''size''': '''it is small'''
        - '''shape''': '''a yellow pokemon with a black nose'''
        - '''body pattern''': '''a yellow body with black eyes and a black nose'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''yellow'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a stubby tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a pokemon'''
        - '''special markings''': '''the pokemon has a black stripe on its forehead'''
        - '''ear shape''': '''a squished triangle'''
        - '''skin texture''': '''smooth'''
        - '''evolutionary stage''': '''pikachu'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a slanted triangle'''
        - '''facial expression''': '''a pikachu with a smile on his face'''
        - '''unique feature''': '''it has a yellow head'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

14: label=6
==============================
Pikachu_14 with label 6
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''pikachu'''
        Attributes List:
        - '''color''': '''yellow'''
        - '''size''': '''it is small'''
        - '''shape''': '''it is a small yellow ball'''
        - '''body pattern''': '''it has a yellow body with a black head and a black tail'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''yellow'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a stubby tail'''
        - '''number of heads''': '''two heads'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a ball'''
        - '''special markings''': '''the pokemon has a white belly and a black tail'''
        - '''ear shape''': '''a ear shape of a squirtle'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a pikachu'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a t'''
        - '''arm shape''': '''it is a squirtle'''
        - '''facial expression''': '''a smile'''
        - '''unique feature''': '''it is a pikachu'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

15: label=4
==============================
Squirtle_15 with label 4
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a small turtle'''
        Attributes List:
        - '''color''': '''blue and yellow'''
        - '''size''': '''small'''
        - '''shape''': '''a turtle'''
        - '''body pattern''': '''a turtle with a blue head and a yellow belly'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''blue'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''sand'''
        - '''special markings''': '''the pokemon has a blue and yellow shell'''
        - '''ear shape''': '''a teddy bear'''
        - '''skin texture''': '''smooth'''
        - '''evolutionary stage''': '''a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a t-shape'''
        - '''facial expression''': '''a sad expression'''
        - '''unique feature''': '''it is a turtle'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

16: label=4
==============================
Squirtle_16 with label 4
17it [01:42,  5.88s/it]18it [01:48,  6.13s/it]==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''blue'''
        - '''size''': '''it is small'''
        - '''shape''': '''a turtle'''
        - '''body pattern''': '''it is a squirtle'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''blue'''
        - '''mouth shape''': '''a snout'''
        - '''tail shape''': '''a squirtle'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''water'''
        - '''special markings''': '''the pokemon has a blue head, a blue body, and a blue tail'''
        - '''ear shape''': '''a squirtle'''
        - '''skin texture''': '''it is smooth and shiny'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''it is a squirtle'''
        - '''facial expression''': '''a smile'''
        - '''unique feature''': '''it is a squirtle'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

17: label=4
==============================
Squirtle_17 with label 4
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a turtle'''
        Attributes List:
        - '''color''': '''blue'''
        - '''size''': '''it is a small turtle'''
        - '''shape''': '''it is a turtle'''
        - '''body pattern''': '''it is a turtle pokemon'''
        - '''number of limbs''': '''four limbs'''
        - '''eye shape''': '''the eye shape is a squint'''
        - '''eye color''': '''blue'''
        - '''mouth shape''': '''the mouth shape of the pokemon in this image is a snout'''
        - '''tail shape''': '''it is a turtle'''
        - '''number of heads''': '''two heads'''
        - '''number of eyes''': '''two eyes'''
        - '''associated element''': '''a turtle'''
        - '''special markings''': '''the pokemon has a blue shell with a brown head and a brown body with'''
        - '''ear shape''': '''the ear shape is a t'''
        - '''skin texture''': '''the skin texture is smooth and shiny'''
        - '''evolutionary stage''': '''the pokemon in this image is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a t'''
        - '''arm shape''': '''the arm shape is a t'''
        - '''facial expression''': '''a turtle pokemon'''
        - '''unique feature''': '''it is a turtle'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

18: label=5
==============================
Wartortle_18 with label 5
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''blue'''
        - '''size''': '''it is small'''
        - '''shape''': '''a turtle'''
        - '''body pattern''': '''it has a spherical body with a spherical head'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''blue'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''water'''
        - '''special markings''': '''the pokemon has a blue body with a white belly and a blue head'''
        - '''ear shape''': '''a squirtle'''
        - '''skin texture''': '''it is smooth and shiny'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''it is a squirtle'''
        - '''facial expression''': '''a smirk'''
        - '''unique feature''': '''it has a shell'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''yes'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

19it [01:54,  6.04s/it]20it [02:00,  6.07s/it]21it [02:07,  6.22s/it]END==============================

19: label=5
==============================
Wartortle_19 with label 5
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a pokemon that is a turtle'''
        Attributes List:
        - '''color''': '''blue'''
        - '''size''': '''it is a small turtle'''
        - '''shape''': '''it is a turtle'''
        - '''body pattern''': '''it has a blue body with a white belly and a white head'''
        - '''number of limbs''': '''four limbs'''
        - '''eye shape''': '''the eye shape is a squint'''
        - '''eye color''': '''blue'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''it is a squirtle'''
        - '''number of heads''': '''two heads'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a turtle'''
        - '''special markings''': '''the pokemon has a blue body with a white belly and a white head with'''
        - '''ear shape''': '''the ear shape is a t'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a t'''
        - '''arm shape''': '''the arm shape is a t'''
        - '''facial expression''': '''a turtle pokemon'''
        - '''unique feature''': '''it has a shell'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

20: label=5
==============================
Wartortle_20 with label 5
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''person, person, person, person, person, person, person, person, person, person'''
        Attributes List:
        - '''color''': '''blue'''
        - '''size''': '''it is a small pokemon'''
        - '''shape''': '''a turtle'''
        - '''body pattern''': '''a squirtle with a squirtle on its'''
        - '''number of limbs''': '''four limbs'''
        - '''eye shape''': '''a person'''
        - '''eye color''': '''blue'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a twig'''
        - '''special markings''': '''the pokemon has a squirtle on its back, and a'''
        - '''ear shape''': '''a squirtle'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''person, person, person, person, person, person, person, person, person, person'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a thigh and a thigh'''
        - '''arm shape''': '''a teddy bear'''
        - '''facial expression''': '''a smile'''
        - '''unique feature''': '''it is a squirtle'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

21: label=8
==============================
Pidgey_21 with label 8
==============================

22it [02:13,  6.26s/it]23it [02:19,  6.07s/it]
        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a bird pokemon'''
        Attributes List:
        - '''color''': '''brown and white'''
        - '''size''': '''it is a small bird'''
        - '''shape''': '''it is a bird'''
        - '''body pattern''': '''it is a bird with a brown body and white head'''
        - '''number of limbs''': '''four limbs'''
        - '''eye shape''': '''the eyes are a squint'''
        - '''eye color''': '''brown eyes'''
        - '''mouth shape''': '''the mouth shape is a slit'''
        - '''tail shape''': '''it is a swan'''
        - '''number of heads''': '''two heads'''
        - '''number of eyes''': '''two eyes'''
        - '''associated element''': '''bird'''
        - '''special markings''': '''the bird has a white crest on its head, and a white wing patch'''
        - '''ear shape''': '''the ear shape is a triangle'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''the pokemon in this image is a snorlax'''
        - '''number of wings''': '''two wings'''
        - '''leg shape''': '''the leg shape is a squirtle'''
        - '''arm shape''': '''the arm shape is a wing'''
        - '''facial expression''': '''a bird pokemon'''
        - '''unique feature''': '''it has a beak'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

22: label=8
==============================
Pidgey_22 with label 8
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a sylveon'''
        Attributes List:
        - '''color''': '''brown and white'''
        - '''size''': '''it is a medium size'''
        - '''shape''': '''a bird'''
        - '''body pattern''': '''it is a bird with a brown body and a white head'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a hawk'''
        - '''eye color''': '''brown'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a swan'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a bird'''
        - '''special markings''': '''the pokemon has a brown body with a white head and a brown tail'''
        - '''ear shape''': '''a spherical shape'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''a sylveon'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a squirtle'''
        - '''arm shape''': '''it is a swan'''
        - '''facial expression''': '''a hawk'''
        - '''unique feature''': '''it has a long neck'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

23: label=8
==============================
Pidgey_23 with label 8
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a bird'''
        Attributes List:
        - '''color''': '''brown and white'''
        - '''size''': '''it is a medium size'''
        - '''shape''': '''a bird'''
        - '''body pattern''': '''it is a bird'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a hawk'''
        - '''eye color''': '''brown'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a swan'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a bird'''
        - '''special markings''': '''the bird has a white crest on its head'''
        - '''ear shape''': '''a spherical shape'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''a sylveon'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a squirtle'''
        - '''arm shape''': '''it is a swan'''
        - '''facial expression''': '''a bird with a smirk'''
        - '''unique feature''': '''it is a bird'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

24it [02:24,  5.79s/it]25it [02:30,  5.76s/it]26it [02:36,  5.83s/it]END==============================

24: label=0
==============================
Bulbasaur_24 with label 0
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''green'''
        - '''size''': '''it is small'''
        - '''shape''': '''it is a green and red pokemon'''
        - '''body pattern''': '''a green body with a red head and a red tail'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''green'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a pokemon'''
        - '''special markings''': '''the pokemon has a green body with a red nose and eyes'''
        - '''ear shape''': '''a frog'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a thigh shape'''
        - '''arm shape''': '''the arms are shaped like a t'''
        - '''facial expression''': '''a smile'''
        - '''unique feature''': '''it has a green body and red eyes'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

25: label=0
==============================
Bulbasaur_25 with label 0
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''blue'''
        - '''size''': '''it is small'''
        - '''shape''': '''a small, green, leafy creature'''
        - '''body pattern''': '''a spherical body with a tail'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''green'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''leaf'''
        - '''special markings''': '''the pokemon has a green leaf on its back'''
        - '''ear shape''': '''a squirtle'''
        - '''skin texture''': '''smooth'''
        - '''evolutionary stage''': '''a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a squirtle'''
        - '''facial expression''': '''a sad expression'''
        - '''unique feature''': '''it has a leaf on its back'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

26: label=0
==============================
Bulbasaur_26 with label 0
==============================

27it [02:42,  5.88s/it]28it [02:48,  5.98s/it]
        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''green'''
        - '''size''': '''it is small'''
        - '''shape''': '''a small, green, squirtle-like creature'''
        - '''body pattern''': '''a spherical body with a rounded head and a s'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''green'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''grass'''
        - '''special markings''': '''the pokemon has a large green pouch on its back'''
        - '''ear shape''': '''a squirtle'''
        - '''skin texture''': '''a scaly texture'''
        - '''evolutionary stage''': '''a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a squirtle'''
        - '''facial expression''': '''a sad expression'''
        - '''unique feature''': '''it has a backpack'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

27: label=7
==============================
Raichu_27 with label 7
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''pikachu'''
        Attributes List:
        - '''color''': '''yellow'''
        - '''size''': '''it is small'''
        - '''shape''': '''it is a small, yellow, and brown pokemon'''
        - '''body pattern''': '''it has a squirtle tail and a squirt'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''yellow'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a pokemon that is a squirtle'''
        - '''special markings''': '''the pokemon has a yellow body with a black tail and a white t'''
        - '''ear shape''': '''a squiggly tail'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a pikachu'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a t'''
        - '''arm shape''': '''the arm shape is a t'''
        - '''facial expression''': '''a smile'''
        - '''unique feature''': '''it has a tail'''
        - '''body posturetail presence''': '''yes'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

28: label=7
==============================
Raichu_28 with label 7
==============================

29it [02:54,  6.08s/it]30it [03:00,  6.09s/it]30it [03:00,  6.03s/it]

        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''pikachu, person, person, person, person, person, person, person, person'''
        Attributes List:
        - '''color''': '''orange and white'''
        - '''size''': '''it is small'''
        - '''shape''': '''it is a small, yellow, and brown pokemon'''
        - '''body pattern''': '''it is a squirtle'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''yellow'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a pig tail'''
        - '''number of heads''': '''two heads'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a pokemon'''
        - '''special markings''': '''the pokemon has a yellow head, a yellow body, and a yellow tail'''
        - '''ear shape''': '''a squished ear shape'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a pikachu'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a t'''
        - '''arm shape''': '''it is a teddy bear'''
        - '''facial expression''': '''sad'''
        - '''unique feature''': '''it has a horn on its head'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

29: label=7
==============================
Raichu_29 with label 7
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a pikachu'''
        Attributes List:
        - '''color''': '''brown'''
        - '''size''': '''it is small'''
        - '''shape''': '''a small, stubby, snoutlike creature with a long'''
        - '''body pattern''': '''it has a squirtle like pattern on its back'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''brown'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a pig tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a pokemon'''
        - '''special markings''': '''the pokemon has a snout with a horn on it, and'''
        - '''ear shape''': '''a squished ear'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a pikachu'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a thigh and a thigh'''
        - '''arm shape''': '''the arm shape is a t'''
        - '''facial expression''': '''a smirk'''
        - '''unique feature''': '''it has a tail'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''yes'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

Succ. dumped attribute values to ./experiments/pokemon/describe/pokemon_attributes_pairs_3
Succ. dumped LLM prompts  to ./experiments/pokemon/describe/pokemon_llm_prompts_3
Namespace(mode='guess', config_file_env='./configs/env_machine.yml', config_file_expt='./configs/expts/pokemon_all.yml', num_per_category='3')
{'setup': 'ours', 'experiment': 5.0, 'dataset_name': 'pokemon', 'num_classes': 10, 'num_base': 5, 'num_novel': 5, 'seed': 1, 'batch_size': 256, 'clustering_method': 'multi_clip_voting', 'model_size': 'ViT-B/16', 'model_size_vqa': 'FlanT5-XXL', 'model_type_llm': 'gpt-3.5-turbo', 'image_size': 224, 'verbose': False, 'host': 'chaos', 'num_workers': 16, 'device': 'cuda', 'device_count': '1', 'device_id': '0', 'data_dir': './datasets/pokemon', 'expt_dir': './experiments/pokemon', 'expt_dir_describe': './experiments/pokemon/describe', 'path_vqa_questions': './experiments/pokemon/describe/pokemon_vqa_questions', 'path_vqa_answers': './experiments/pokemon/describe/pokemon_attributes_pairs', 'path_llm_prompts': './experiments/pokemon/describe/pokemon_llm_prompts', 'expt_dir_guess': './experiments/pokemon/guess', 'path_llm_replies_raw': './experiments/pokemon/guess/pokemon_llm_replies_raw', 'path_llm_replies_jsoned': './experiments/pokemon/guess/pokemon_llm_replies_jsoned', 'path_llm_gussed_names': './experiments/pokemon/guess/pokemon_llm_gussed_names', 'expt_dir_grouping': './experiments/pokemon/grouping'}
0it [00:00, ?it/s]0it [00:17, ?it/s]
╭───────────────────── Traceback (most recent call last) ──────────────────────╮
│ /home/hdl/miniconda3/envs/finer/lib/python3.9/site-packages/tenacity/__init_ │
│ _.py:382 in __call__                                                         │
│                                                                              │
│   379 │   │   │   do = self.iter(retry_state=retry_state)                    │
│   380 │   │   │   if isinstance(do, DoAttempt):                              │
│   381 │   │   │   │   try:                                                   │
│ ❱ 382 │   │   │   │   │   result = fn(*args, **kwargs)                       │
│   383 │   │   │   │   except BaseException:  # noqa: B902                    │
│   384 │   │   │   │   │   retry_state.set_exception(sys.exc_info())  # type: │
│   385 │   │   │   │   else:                                                  │
│                                                                              │
│ /home/hdl/project/FineR/FineR_0/agents/llm_bot.py:57 in call_gpts            │
│                                                                              │
│    54 │   │   │   max_tokens=max_tokens                                      │
│    55 │   │   )                                                              │
│    56 │   else:                                                              │
│ ❱  57 │   │   response = client.chat.completions.create(                     │
│    58 │   │   │   model=model,                                               │
│    59 │   │   │   messages=chatgpt_messages,                                 │
│    60 │   │   │   temperature=temperature                                    │
│                                                                              │
│ /home/hdl/miniconda3/envs/finer/lib/python3.9/site-packages/openai/_utils/_u │
│ tils.py:287 in wrapper                                                       │
│                                                                              │
│   284 │   │   │   │   │   else:                                              │
│   285 │   │   │   │   │   │   msg = f"Missing required argument: {quote(miss │
│   286 │   │   │   │   raise TypeError(msg)                                   │
│ ❱ 287 │   │   │   return func(*args, **kwargs)                               │
│   288 │   │                                                                  │
│   289 │   │   return wrapper  # type: ignore                                 │
│   290                                                                        │
│                                                                              │
│ /home/hdl/miniconda3/envs/finer/lib/python3.9/site-packages/openai/resources │
│ /chat/completions/completions.py:1147 in create                              │
│                                                                              │
│   1144 │   │   timeout: float | httpx.Timeout | None | NotGiven = NOT_GIVEN, │
│   1145 │   ) -> ChatCompletion | Stream[ChatCompletionChunk]:                │
│   1146 │   │   validate_response_format(response_format)                     │
│ ❱ 1147 │   │   return self._post(                                            │
│   1148 │   │   │   "/chat/completions",                                      │
│   1149 │   │   │   body=maybe_transform(                                     │
│   1150 │   │   │   │   {                                                     │
│                                                                              │
│ /home/hdl/miniconda3/envs/finer/lib/python3.9/site-packages/openai/_base_cli │
│ ent.py:1259 in post                                                          │
│                                                                              │
│   1256 │   │   opts = FinalRequestOptions.construct(                         │
│   1257 │   │   │   method="post", url=path, json_data=body, files=to_httpx_f │
│   1258 │   │   )                                                             │
│ ❱ 1259 │   │   return cast(ResponseT, self.request(cast_to, opts, stream=str │
│   1260 │                                                                     │
│   1261 │   def patch(                                                        │
│   1262 │   │   self,                                                         │
│                                                                              │
│ /home/hdl/miniconda3/envs/finer/lib/python3.9/site-packages/openai/_base_cli │
│ ent.py:1047 in request                                                       │
│                                                                              │
│   1044 │   │   │   │   │   err.response.read()                               │
│   1045 │   │   │   │                                                         │
│   1046 │   │   │   │   log.debug("Re-raising status error")                  │
│ ❱ 1047 │   │   │   │   raise self._make_status_error_from_response(err.respo │
│   1048 │   │   │                                                             │
│   1049 │   │   │   break                                                     │
│   1050                                                                       │
╰──────────────────────────────────────────────────────────────────────────────╯
AuthenticationError: Error code: 401 - {'error': {'message': '无效的sk 
token，请检查token是否正确', 'type': 'error'}}

The above exception was the direct cause of the following exception:

╭───────────────────── Traceback (most recent call last) ──────────────────────╮
│ /home/hdl/project/FineR/FineR_0/discovering.py:394 in <module>               │
│                                                                              │
│   391 │   │   llm_bot = LLMBot(model=cfg['model_type_llm'])                  │
│   392 │   │                                                                  │
│   393 │   │   # run the main program                                         │
│ ❱ 394 │   │   raw_replies, jsoned_replies = main_guess(cfg, llm_bot, reasoni │
│   395 │   │                                                                  │
│   396 │   │   # save LLM replis                                              │
│   397 │   │   dump_json(cfg['path_llm_replies_raw'] + expt_id_suffix, raw_re │
│                                                                              │
│ /home/hdl/project/FineR/FineR_0/discovering.py:170 in main_guess             │
│                                                                              │
│   167 │                                                                      │
│   168 │   # LLM inferring                                                    │
│   169 │   for i, (key, prompt) in tqdm(enumerate(prompt_list.items())):      │
│ ❱ 170 │   │   raw_reply = bot.infer(prompt, temperature=0.9)  # use a high t │
│   171 │   │   used_tokens = bot.get_used_tokens()                            │
│   172 │   │                                                                  │
│   173 │   │   replies_raw[key] = raw_reply                                   │
│                                                                              │
│ /home/hdl/project/FineR/FineR_0/agents/llm_bot.py:119 in infer               │
│                                                                              │
│   116 │   │   return reply, total_prompt, n_tokens                           │
│   117 │                                                                      │
│   118 │   def infer(self, prompt, temperature=0.9):                          │
│ ❱ 119 │   │   reply, _, n_tokens = self.__query(prompt, temperature, max_tok │
│   120 │   │   self.total_tokens += n_tokens                                  │
│   121 │   │   return reply.strip()                                           │
│   122                                                                        │
│                                                                              │
│ /home/hdl/project/FineR/FineR_0/agents/llm_bot.py:109 in __query             │
│                                                                              │
│   106 │                                                                      │
│   107 │   def __query(self, prompt, temperature, max_token):                 │
│   108 │   │   total_prompt = prepare_chatgpt_message(prompt)                 │
│ ❱ 109 │   │   reply, n_tokens = call_gpts(                                   │
│   110 │   │   │   client=self.client,                                        │
│   111 │   │   │   chatgpt_messages=total_prompt,                             │
│   112 │   │   │   temperature=temperature,                                   │
│                                                                              │
│ /home/hdl/miniconda3/envs/finer/lib/python3.9/site-packages/tenacity/__init_ │
│ _.py:289 in wrapped_f                                                        │
│                                                                              │
│   286 │   │                                                                  │
│   287 │   │   @functools.wraps(f)                                            │
│   288 │   │   def wrapped_f(*args: t.Any, **kw: t.Any) -> t.Any:             │
│ ❱ 289 │   │   │   return self(f, *args, **kw)                                │
│   290 │   │                                                                  │
│   291 │   │   def retry_with(*args: t.Any, **kwargs: t.Any) -> WrappedFn:    │
│   292 │   │   │   return self.copy(*args, **kwargs).wraps(f)                 │
│                                                                              │
│ /home/hdl/miniconda3/envs/finer/lib/python3.9/site-packages/tenacity/__init_ │
│ _.py:379 in __call__                                                         │
│                                                                              │
│   376 │   │                                                                  │
│   377 │   │   retry_state = RetryCallState(retry_object=self, fn=fn, args=ar │
│   378 │   │   while True:                                                    │
│ ❱ 379 │   │   │   do = self.iter(retry_state=retry_state)                    │
│   380 │   │   │   if isinstance(do, DoAttempt):                              │
│   381 │   │   │   │   try:                                                   │
│   382 │   │   │   │   │   result = fn(*args, **kwargs)                       │
│                                                                              │
│ /home/hdl/miniconda3/envs/finer/lib/python3.9/site-packages/tenacity/__init_ │
│ _.py:326 in iter                                                             │
│                                                                              │
│   323 │   │   │   retry_exc = self.retry_error_cls(fut)                      │
│   324 │   │   │   if self.reraise:                                           │
│   325 │   │   │   │   raise retry_exc.reraise()                              │
│ ❱ 326 │   │   │   raise retry_exc from fut.exception()                       │
│   327 │   │                                                                  │
│   328 │   │   if self.wait:                                                  │
│   329 │   │   │   sleep = self.wait(retry_state)                             │
╰──────────────────────────────────────────────────────────────────────────────╯
RetryError: RetryError[<Future at 0x7afc0afd48b0 state=finished raised 
AuthenticationError>]
Namespace(mode='postprocess', config_file_env='./configs/env_machine.yml', config_file_expt='./configs/expts/pokemon_all.yml', num_per_category='3')
{'setup': 'ours', 'experiment': 5.0, 'dataset_name': 'pokemon', 'num_classes': 10, 'num_base': 5, 'num_novel': 5, 'seed': 1, 'batch_size': 256, 'clustering_method': 'multi_clip_voting', 'model_size': 'ViT-B/16', 'model_size_vqa': 'FlanT5-XXL', 'model_type_llm': 'gpt-3.5-turbo', 'image_size': 224, 'verbose': False, 'host': 'chaos', 'num_workers': 16, 'device': 'cuda', 'device_count': '1', 'device_id': '0', 'data_dir': './datasets/pokemon', 'expt_dir': './experiments/pokemon', 'expt_dir_describe': './experiments/pokemon/describe', 'path_vqa_questions': './experiments/pokemon/describe/pokemon_vqa_questions', 'path_vqa_answers': './experiments/pokemon/describe/pokemon_attributes_pairs', 'path_llm_prompts': './experiments/pokemon/describe/pokemon_llm_prompts', 'expt_dir_guess': './experiments/pokemon/guess', 'path_llm_replies_raw': './experiments/pokemon/guess/pokemon_llm_replies_raw', 'path_llm_replies_jsoned': './experiments/pokemon/guess/pokemon_llm_replies_jsoned', 'path_llm_gussed_names': './experiments/pokemon/guess/pokemon_llm_gussed_names', 'expt_dir_grouping': './experiments/pokemon/grouping'}
Charmander_0
{
    "Squirtle": [
        "Squirtle is a small, orange Pokemon with a stubby, snout-like creature.",
        "It has a spherical body with a spherical head and four limbs.",
        "The Pokemon has a squint eye shape and orange eyes.",
        "Its mouth shape is a slit and it has a stubby tail.",
        "Squirtle has two heads and two eyes."
    ],
    "Charmander": [
        "Squirtle is a small, orange Pokemon with a stubby, snout-like creature.",
        "It has a spherical body with a spherical head and four limbs.",
        "The Pokemon has a squint eye shape and orange eyes.",
        "Its mouth shape is a slit and it has a stubby tail.",
        "Squirtle has two heads and two eyes."
    ],
    "Cyndaquil": [
        "Squirtle is a small, orange Pokemon with a stubby, snout-like creature.",
        "It has a spherical body with a spherical head and four limbs.",
        "The Pokemon has a squint eye shape and orange eyes.",
        "Its mouth shape is a slit and it has a stubby tail.",
        "Squirtle has two heads and two eyes."
    ]
}


Charmander_1
{
    "Squirtle": [
        "This pokemon is a small orange creature with a scaly, stubby, snout-like head, two heads, and two squinty orange eyes.",
        "It has a small, lizard-like body with a tail, four limbs, and smooth skin texture.",
        "The special markings of this pokemon are a bright red nose and a yellow tummy.",
        "Its mouth is in the shape of a snout and its ears resemble those of a frog.",
        "It is associated with the fire element and has a smile as its facial expression."
    ],
    "Charmander": [
        "This pokemon is a small orange creature with a scaly, stubby, snout-like head, two heads, and two squinty orange eyes.",
        "It has a small, lizard-like body with a tail, four limbs, and smooth skin texture.",
        "The special markings of this pokemon are a bright red nose and a yellow tummy.",
        "Its mouth is in the shape of a snout and its ears resemble those of a frog.",
        "It is associated with the fire element and has a smile as its facial expression."
    ],
    "Charmeleon": [
        "This pokemon is a small orange creature with a scaly, stubby, snout-like head, two heads, and two squinty orange eyes.",
        "It has a small, lizard-like body with a tail, four limbs, and smooth skin texture.",
        "The special markings of this pokemon are a bright red nose and a yellow tummy.",
        "Its mouth is in the shape of a snout and its ears resemble those of a frog.",
        "It is associated with the fire element and has a smile as its facial expression."
    ]
}


Charmander_2
{
  "Squirtle": [
    "A squirtle is a small, round, and stubby pokemon with a brown color.",
    "It has a spherical head and body with a white belly and blue tummy.",
    "This pokemon has four limbs in a T shape and two heads with squinty blue eyes and a slit mouth.",
    "It also has a stubby tail and a spherical shape ear.",
    "The skin is smooth and it has a flame on its head."
  ],
  "Wartortle": [
    "A squirtle is a small, round, and stubby pokemon with a brown color.",
    "It has a spherical head and body with a white belly and blue tummy.",
    "This pokemon has four limbs in a T shape and two heads with squinty blue eyes and a slit mouth.",
    "It also has a stubby tail and a spherical shape ear.",
    "The skin is smooth and it has a flame on its head."
  ],
  "Blastoise": [
    "A squirtle is a small, round, and stubby pokemon with a brown color.",
    "It has a spherical head and body with a white belly and blue tummy.",
    "This pokemon has four limbs in a T shape and two heads with squinty blue eyes and a slit mouth.",
    "It also has a stubby tail and a spherical shape ear.",
    "The skin is smooth and it has a flame on its head."
  ]
}


Pidgey_3
{
    "Swellow": [
        "The Pokemon in the image is a bird with a brown and white body pattern.",
        "It is small in size and has a beak.",
        "It has a white crest on its head and a white wing patch.",
        "It has two heads and two eyes with a squint shape.",
        "The Pokemon has four limbs, two wings, and a tail shaped like a swan."
    ],
    "Pidgeot": [
        "The Pokemon in the image is a bird with a brown and white body pattern.",
        "It is small in size and has a beak.",
        "It has a white crest on its head and a white wing patch.",
        "It has two heads and two eyes with a squint shape.",
        "The Pokemon has four limbs, two wings, and a tail shaped like a swan."
    ],
    "Staraptor": [
        "The Pokemon in the image is a bird with a brown and white body pattern.",
        "It is small in size and has a beak.",
        "It has a white crest on its head and a white wing patch.",
        "It has two heads and two eyes with a squint shape.",
        "The Pokemon has four limbs, two wings, and a tail shaped like a swan."
    ]
}


Pidgey_4
{
  "Crestwing": [
    "This is a medium-sized bird with a brown head and a white belly.",
    "It has four limbs and two heads with two eyes each.",
    "The bird has a hawk-like eye shape and brown eyes.",
    "It has a slit-shaped mouth and a tail resembling that of a swan.",
    "The bird has a unique white crest on its head and a spherical ear shape."
  ],
  "Swaneye": [
    "This is a medium-sized bird with a brown head and a white belly.",
    "It has four limbs and two heads with two eyes each.",
    "The bird has a hawk-like eye shape and brown eyes.",
    "It has a slit-shaped mouth and a tail resembling that of a swan.",
    "The bird has a unique white crest on its head and a spherical ear shape."
  ],
  "Hawkbeak": [
    "This is a medium-sized bird with a brown head and a white belly.",
    "It has four limbs and two heads with two eyes each.",
    "The bird has a hawk-like eye shape and brown eyes.",
    "It has a slit-shaped mouth and a tail resembling that of a swan.",
    "The bird has a unique white crest on its head and a spherical ear shape."
  ]
}


Pidgey_5
{
    "Sylveon": [
        "A Sylveon is a medium-sized bird-like Pokemon with brown and white feathers.",
        "Its body is covered in brown feathers with a white head and a red beak.",
        "The Pokemon has two heads and two eyes, which are brown and shaped like a hawk.",
        "It has a spherical-shaped ear and a scaly skin texture.",
        "The Sylveon has a unique feature of a long neck and two wings."
    ],
    "Hawkwing": [
        "A Sylveon is a medium-sized bird-like Pokemon with brown and white feathers.",
        "Its body is covered in brown feathers with a white head and a red beak.",
        "The Pokemon has two heads and two eyes, which are brown and shaped like a hawk.",
        "It has a spherical-shaped ear and a scaly skin texture.",
        "The Sylveon has a unique feature of a long neck and two wings."
    ],
    "Swanbeak": [
        "A Sylveon is a medium-sized bird-like Pokemon with brown and white feathers.",
        "Its body is covered in brown feathers with a white head and a red beak.",
        "The Pokemon has two heads and two eyes, which are brown and shaped like a hawk.",
        "It has a spherical-shaped ear and a scaly skin texture.",
        "The Sylveon has a unique feature of a long neck and two wings."
    ]
}


Pidgeotto_6
{
    "Sylveon": [
        "This image features a Pokemon called Sylveon, which is a bird-like creature with a medium size.",
        "It has a tan body with a red head and wings, and it is characterized by its brown and pink coloration.",
        "Sylveon has a unique shape with a long neck, long tail, and a swan-like tail.",
        "It has four limbs and two heads with squinty pink eyes.",
        "The Pokemon has a slit mouth and a spherical ear shape."
    ],
    "Birdor": [
        "This image features a Pokemon called Birdor, which is a bird-like creature with a medium size.",
        "It has a tan body with a red head and wings, and it is characterized by its brown and pink coloration.",
        "Birdor has a unique shape with a long neck, long tail, and a swan-like tail.",
        "It has four limbs and two heads with squinty pink eyes.",
        "The Pokemon has a slit mouth and a spherical ear shape."
    ],
    "Swanwing": [
        "This image features a Pokemon called Swanwing, which is a bird-like creature with a medium size.",
        "It has a tan body with a red head and wings, and it is characterized by its brown and pink coloration.",
        "Swanwing has a unique shape with a long neck, long tail, and a swan-like tail.",
        "It has four limbs and two heads with squinty pink eyes.",
        "The Pokemon has a slit mouth and a spherical ear shape."
    ]
}


Pidgeotto_7
{
    "Sylveon": [
        "Sylveon is a medium-sized bird-like Pokémon with a pink and brown coloration. It has a brown body with a yellow head and wings.",
        "The Pokémon has four limbs, two heads, and two eyes with a hawk-like shape. Its eye color is brown, and its mouth has a slit shape.",
        "The tail resembles that of a swan. It has a special marking of a red and yellow crest on its head, along with a white ear shape similar to a swan.",
        "Sylveon's skin texture is smooth. It is in the evolutionary stage of being a Sandslash.",
        "It has two wings and legs shaped like a Squirtle. Its arms have a wing-like shape. The Pokémon has a smug facial expression and a unique feature of wings."
    ],
    "Sandslash": [
        "Sylveon is in the evolutionary stage of being a Sandslash. Its coloration is pink and brown, and its size is medium.",
        "It has a brown body with a yellow head and wings. The Pokémon has four limbs, two heads, and two eyes with a hawk-like shape.",
        "The eye color is brown, and the mouth has a slit shape. The tail resembles that of a swan.",
        "Sylveon has a special marking of a red and yellow crest on its head, along with a white ear shape similar to a swan. Its skin texture is smooth.",
        "It has two wings and legs shaped like a Squirtle. Its arms have a wing-like shape. The Pokémon has a smug facial expression and a unique feature of wings."
    ],
    "Swanslash": [
        "Sylveon resembles a bird, particularly a swan, with its medium size and pink and brown coloration.",
        "Its brown body has a yellow head and wings. The Pokémon has four limbs, two heads, and two eyes with a hawk-like shape.",
        "The eye color is brown, and the mouth has a slit shape. The tail is shaped like that of a swan.",
        "Sylveon has a special marking of a red and yellow crest on its head, along with a white ear shape similar to a swan. Its skin texture is smooth.",
        "It has two wings and legs shaped like a Squirtle. Its arms have a wing-like shape. The Pokémon has a smug facial expression and a unique feature of wings."
    ]
}


Pidgeotto_8
{
  "Squirtle": [
    "The image shows a pokemon resembling a squirtle with a brown body and a red head.",
    "It has a small size and a bird-like shape.",
    "The pokemon has hawk-shaped red eyes and a slit-shaped mouth.",
    "It has a swan-like tail and two heads, with two eyes on each head.",
    "The pokemon is associated with the bird element and has a special marking of a red hat with a white crest on its head."
  ],
  "Redhat": [
    "The image shows a pokemon resembling a squirtle with a brown body and a red head.",
    "It has a small size and a bird-like shape.",
    "The pokemon has hawk-shaped red eyes and a slit-shaped mouth.",
    "It has a swan-like tail and two heads, with two eyes on each head.",
    "The pokemon is associated with the bird element and has a special marking of a red hat with a white crest on its head."
  ],
  "Crestspike": [
    "The image shows a pokemon resembling a squirtle with a brown body and a red head.",
    "It has a small size and a bird-like shape.",
    "The pokemon has hawk-shaped red eyes and a slit-shaped mouth.",
    "It has a swan-like tail and two heads, with two eyes on each head.",
    "The pokemon is associated with the bird element and has a special marking of a red hat with a white crest on its head."
  ]
}


Charmeleon_9
{
    "Flamizard": [
        "The image shows a small red fire type pokemon with a red and white striped body, black belly, and a flame on its head.",
        "It has a sad expression with squint-shaped red eyes and a slit-shaped mouth.",
        "The pokemon has two heads, two eyes, and four limbs.",
        "It has a stubby tail with a curved tip and no presence of fins, horns, or crests.",
        "The unique features include slanted triangle-shaped ears, a red scaly skin, and a spike on its body."
    ],
    "Lizardflare": [
        "The image shows a small red fire type pokemon with a red and white striped body, black belly, and a flame on its head.",
        "It has a sad expression with squint-shaped red eyes and a slit-shaped mouth.",
        "The pokemon has two heads, two eyes, and four limbs.",
        "It has a stubby tail with a curved tip and no presence of fins, horns, or crests.",
        "The unique features include slanted triangle-shaped ears, a red scaly skin, and a spike on its body."
    ],
    "Ignisaur": [
        "The image shows a small red fire type pokemon with a red and white striped body, black belly, and a flame on its head.",
        "It has a sad expression with squint-shaped red eyes and a slit-shaped mouth.",
        "The pokemon has two heads, two eyes, and four limbs.",
        "It has a stubby tail with a curved tip and no presence of fins, horns, or crests.",
        "The unique features include slanted triangle-shaped ears, a red scaly skin, and a spike on its body."
    ]
}


Charmeleon_10
{
    "Squirtle": [
        "The pokemon in the image is a small, red-colored creature that resembles a lizard.",
        "It has a tiger-like pattern on its body and a red tummy with a white belly.",
        "With four limbs and two heads, it has squinted red eyes and a snout-like mouth.",
        "Its tail is slanted and resembles a tadpole.",
        "This pokemon is associated with the fire element and has the ability of a fire-type."
    ],
    "Charmander": [
        "The pokemon in the image is a small, red-colored creature that resembles a lizard.",
        "It has a tiger-like pattern on its body and a red tummy with a white belly.",
        "With four limbs and two heads, it has squinted red eyes and a snout-like mouth.",
        "Its tail is slanted and resembles a tadpole.",
        "This pokemon is associated with the fire element and has the ability of a fire-type."
    ],
    "Charizard": [
        "The pokemon in the image is a small, red-colored creature that resembles a lizard.",
        "It has a tiger-like pattern on its body and a red tummy with a white belly.",
        "With four limbs and two heads, it has squinted red eyes and a snout-like mouth.",
        "Its tail is slanted and resembles a tadpole.",
        "This pokemon is associated with the fire element and has the ability of a fire-type."
    ]
}


Charmeleon_11
{
    "Squirtle": [
        "A squirtle is a small, red and yellow pokemon with a red body, white belly, and white tail.",
        "It has four limbs, two heads, and two eyes that are squint and red in color.",
        "The pokemon has a slit mouth and a stubby tail with a curved tip.",
        "It is associated with the fire element and has special markings on its body.",
        "The squirtle has a triangular ear shape, smooth skin texture, and a smirk facial expression."
    ],
    "Charmeleon": [
        "A squirtle is a small, red and yellow pokemon with a red body, white belly, and white tail.",
        "It has four limbs, two heads, and two eyes that are squint and red in color.",
        "The pokemon has a slit mouth and a stubby tail with a curved tip.",
        "It is associated with the fire element and has special markings on its body.",
        "The squirtle has a triangular ear shape, smooth skin texture, and a smirk facial expression."
    ],
    "Charizard": [
        "A squirtle is a small, red and yellow pokemon with a red body, white belly, and white tail.",
        "It has four limbs, two heads, and two eyes that are squint and red in color.",
        "The pokemon has a slit mouth and a stubby tail with a curved tip.",
        "It is associated with the fire element and has special markings on its body.",
        "The squirtle has a triangular ear shape, smooth skin texture, and a smirk facial expression."
    ]
}


Squirtle_12
{
    "Squirtle": [
        "This is a small turtle-like pokemon called Squirtle.",
        "It has a blue body with a yellow head and a yellow tail.",
        "The pokemon has a sad expression with squinted blue eyes and a slit mouth.",
        "It has four limbs and two heads with two blue eyes.",
        "Squirtle is associated with the element of sand and has a smooth skin texture."
    ],
    "Wartortle": [
        "This is a small turtle-like pokemon called Wartortle.",
        "It has a blue body with a yellow head and a yellow tail.",
        "The pokemon has a sad expression with squinted blue eyes and a slit mouth.",
        "It has four limbs and two heads with two blue eyes.",
        "Wartortle is associated with the element of sand and has a smooth skin texture."
    ],
    "Blastoise": [
        "This is a small turtle-like pokemon called Blastoise.",
        "It has a blue body with a yellow head and a yellow tail.",
        "The pokemon has a sad expression with squinted blue eyes and a slit mouth.",
        "It has four limbs and two heads with two blue eyes.",
        "Blastoise is associated with the element of sand and has a smooth skin texture."
    ]
}


Squirtle_13
{
    "Squirtle": [
        "Squirtle is a small, blue turtle-like Pokémon with a smooth skin texture.",
        "It has a squint eye shape and blue eyes.",
        "The mouth is in the form of a snout.",
        "Squirtle has a unique body pattern that resembles a squirtle.",
        "It has four limbs, a tail, and two heads."
    ],
    "Wartortle": [
        "Wartortle evolves from Squirtle and is a larger, more powerful water-type Pokémon.",
        "It retains the same blue color and turtle-like shape.",
        "Wartortle has evolved to have a larger body size and more defined limbs.",
        "It still has a snout-shaped mouth and two squint eyes.",
        "The special markings on Wartortle include a darker blue tail and the presence of a spike on its back."
    ],
    "Blastoise": [
        "Blastoise is the final evolution stage of Squirtle, following Wartortle.",
        "It is a larger, more heavily built Pokémon with a dark blue color.",
        "Blastoise has a more pronounced turtle shape and a distinctive cannon-like structure on its back.",
        "It has two heads, a snout-shaped mouth, and blue eyes.",
        "The special markings of Blastoise include water cannons on its shell and a spike on its back."
    ]
}


Squirtle_14
{
    "Squirtle": [
        "This is a blue turtle with a small size and a smooth skin texture.",
        "It has a squint eye shape and blue eyes.",
        "The mouth shape is a slit and it has a turtle-shaped body with a tail.",
        "It has two heads and two limbs.",
        "The pokemon is a squirtle in its evolutionary stage."
    ],
    "Wartortle": [
        "This is a blue turtle with a small size and a smooth skin texture.",
        "It has a squint eye shape and blue eyes.",
        "The mouth shape is a slit and it has a turtle-shaped body with a tail.",
        "It has two heads and two limbs.",
        "The pokemon is a squirtle in its evolutionary stage."
    ],
    "Blastoise": [
        "This is a blue turtle with a small size and a smooth skin texture.",
        "It has a squint eye shape and blue eyes.",
        "The mouth shape is a slit and it has a turtle-shaped body with a tail.",
        "It has two heads and two limbs.",
        "The pokemon is a squirtle in its evolutionary stage."
    ]
}


Bulbasaur_15
{
    "Squirtle": [
        "A squirtle is a small and green pokemon with a red head and tail.",
        "It has four limbs and a squinty green eyes.",
        "The mouth is in a slit shape and the unique feature of this pokemon is its green body with red eyes.",
        "It has two heads and two eyes.",
        "The skin texture of the squirtle is smooth and it is at the evolutionary stage of being a squirtle."
    ],
    "Greened": [
        "A squirtle is a small and green pokemon with a red head and tail.",
        "It has four limbs and a squinty green eyes.",
        "The mouth is in a slit shape and the unique feature of this pokemon is its green body with red eyes.",
        "It has two heads and two eyes.",
        "The skin texture of the squirtle is smooth and it is at the evolutionary stage of being a squirtle."
    ],
    "Frogleaf": [
        "A squirtle is a small and green pokemon with a red head and tail.",
        "It has four limbs and a squinty green eyes.",
        "The mouth is in a slit shape and the unique feature of this pokemon is its green body with red eyes.",
        "It has two heads and two eyes.",
        "The skin texture of the squirtle is smooth and it is at the evolutionary stage of being a squirtle."
    ]
}


Bulbasaur_16
{
    "Squirtle": [
        "Squirtle is a small, green, leafy creature with a sad expression.",
        "It has a leaf on its back and is associated with the grass element.",
        "It has four limbs, two heads, and two eyes which are squinted and green in color.",
        "Squirtle has a smooth skin texture and its body shape resembles a squirtle.",
        "It does not have wings, fins, or horns, but it does have a spike on its back."
    ],
    "Greenleaf": [
        "Greenleaf is a small, green, leafy creature with a sad expression.",
        "It has a leaf on its back and is associated with the grass element.",
        "It has four limbs, two heads, and two eyes which are squinted and green in color.",
        "Greenleaf has a smooth skin texture and its body shape resembles a squirtle.",
        "It does not have wings, fins, or horns, but it does have a spike on its back."
    ],
    "Leafurtle": [
        "Leafurtle is a small, green, leafy creature with a sad expression.",
        "It has a leaf on its back and is associated with the grass element.",
        "It has four limbs, two heads, and two eyes which are squinted and green in color.",
        "Leafurtle has a smooth skin texture and its body shape resembles a squirtle.",
        "It does not have wings, fins, or horns, but it does have a spike on its back."
    ]
}


Bulbasaur_17
{
    "Squirtle": [
        "This image shows a small, green Pokemon called Squirtle.",
        "It has a spherical body with a rounded head and two squinty green eyes.",
        "The Pokemon has a sad facial expression and its mouth is in the shape of a slit.",
        "It has four limbs, each ending in a Squirtle-like shape.",
        "Squirtle has a unique feature, which is a backpack-like pouch on its back."
    ],
    "Squirtle-like creature": [
        "This image shows a small, green Pokemon called Squirtle-like creature.",
        "It has a spherical body with a rounded head and two squinty green eyes.",
        "The Pokemon has a sad facial expression and its mouth is in the shape of a slit.",
        "It has four limbs, each ending in a Squirtle-like shape.",
        "Squirtle-like creature has a unique feature, which is a backpack-like pouch on its back."
    ],
    "Green Pokemon": [
        "This image shows a small, green Pokemon called Green Pokemon.",
        "It has a spherical body with a rounded head and two squinty green eyes.",
        "The Pokemon has a sad facial expression and its mouth is in the shape of a slit.",
        "It has four limbs, each ending in a Squirtle-like shape.",
        "Green Pokemon has a unique feature, which is a backpack-like pouch on its back."
    ]
}


Raichu_18
{
    "Pikachu": [
        "This image shows a small, yellow pokemon called Pikachu.",
        "It has a Squirtle-like tail and a snout, and its body has special markings with a yellow color, a black tail, and a white t.",
        "Pikachu has a squint eye shape with yellow eyes and a smiley facial expression.",
        "It has two heads, two eyes, and four limbs, with a small and smooth skin texture.",
        "Pikachu is associated with the water element and has a unique feature of having a tail."
    ],
    "Pichu": [
        "This image shows a small, yellow pokemon called Pichu.",
        "It has a Squirtle-like tail and a snout, and its body has special markings with a yellow color, a black tail, and a white t.",
        "Pichu has a squint eye shape with yellow eyes and a smiley facial expression.",
        "It has two heads, two eyes, and four limbs, with a small and smooth skin texture.",
        "Pichu is associated with the water element and has a unique feature of having a tail."
    ],
    "Raichu": [
        "This image shows a small, yellow pokemon called Raichu.",
        "It has a Squirtle-like tail and a snout, and its body has special markings with a yellow color, a black tail, and a white t.",
        "Raichu has a squint eye shape with yellow eyes and a smiley facial expression.",
        "It has two heads, two eyes, and four limbs, with a small and smooth skin texture.",
        "Raichu is associated with the water element and has a unique feature of having a tail."
    ]
}


Raichu_19
{
    "PikaHorn": [
        "This image shows a small, brown pikachu with a snout-like shape and a pigtail tail.",
        "It has a squirtle-like pattern on its back.",
        "The pikachu has four limbs and two heads, with two squinty brown eyes and a slit mouth.",
        "It has a unique feature of a horn on its snout and a sad expression.",
        "The skin texture is smooth, and it is in the evolutionary stage of a pikachu."
    ],
    "Squirtchu": [
        "This image shows a small, brown pikachu with a snout-like shape and a pigtail tail.",
        "It has a squirtle-like pattern on its back.",
        "The pikachu has four limbs and two heads, with two squinty brown eyes and a slit mouth.",
        "It has a unique feature of a horn on its snout and a sad expression.",
        "The skin texture is smooth, and it is in the evolutionary stage of a pikachu."
    ],
    "Sadtail Pikachu": [
        "This image shows a small, brown pikachu with a snout-like shape and a pigtail tail.",
        "It has a squirtle-like pattern on its back.",
        "The pikachu has four limbs and two heads, with two squinty brown eyes and a slit mouth.",
        "It has a unique feature of a horn on its snout and a sad expression.",
        "The skin texture is smooth, and it is in the evolutionary stage of a pikachu."
    ]
}


Raichu_20
{
    "Pikachu": [
        "This is a small, orange and white Pokemon called Pikachu.",
        "It has a yellow body, a yellow head, and a yellow tail.",
        "It has two heads and two eyes, with a squint eye shape and yellow eye color.",
        "Pikachu has a small size and a smooth skin texture.",
        "It has a unique feature of a horn."
    ],
    "Pika": [
        "This is a small, orange and white Pokemon called Pikachu.",
        "It has a yellow body, a yellow head, and a yellow tail.",
        "It has two heads and two eyes, with a squint eye shape and yellow eye color.",
        "Pikachu has a small size and a smooth skin texture.",
        "It has a unique feature of a horn."
    ],
    "Sparkachu": [
        "This is a small, orange and white Pokemon called Pikachu.",
        "It has a yellow body, a yellow head, and a yellow tail.",
        "It has two heads and two eyes, with a squint eye shape and yellow eye color.",
        "Pikachu has a small size and a smooth skin texture.",
        "It has a unique feature of a horn."
    ]
}


Wartortle_21
{
  "Squirtle": [
    "A squirtle is a small-sized turtle-like Pokemon with a blue body and a white belly.",
    "It has a blue head with a squint-shaped blue eyes and a slit-like mouth.",
    "The Pokemon has two heads and four limbs.",
    "It is associated with the water element and has a tail shaped like a squirtle.",
    "It has smooth and shiny skin and a unique feature of having a shell."
  ],
  "Wartortle": [
    "A squirtle is a small-sized turtle-like Pokemon with a blue body and a white belly.",
    "It has a blue head with a squint-shaped blue eyes and a slit-like mouth.",
    "The Pokemon has two heads and four limbs.",
    "It is associated with the water element and has a tail shaped like a squirtle.",
    "It has smooth and shiny skin and a unique feature of having a shell."
  ],
  "Blastoise": [
    "A squirtle is a small-sized turtle-like Pokemon with a blue body and a white belly.",
    "It has a blue head with a squint-shaped blue eyes and a slit-like mouth.",
    "The Pokemon has two heads and four limbs.",
    "It is associated with the water element and has a tail shaped like a squirtle.",
    "It has smooth and shiny skin and a unique feature of having a shell."
  ]
}


Wartortle_22
{
   "Squirturtle": [
      "The pokemon in the image is a small, blue turtle-like creature with a squirtle pattern on its body.",
      "It has four limbs and two heads with squinted blue eyes and a slit-like mouth.",
      "The pokemon has a fairy element associated with it and special markings in the form of a squirtle on its back and a smooth skin texture.",
      "It is at an early evolutionary stage and does not have any wings, fins, or horns.",
      "Its unique feature is that it is a squirtle. The pokemon has a friendly facial expression with a smile."
   ],
   "Bluetail": [
      "The pokemon in the image is a small, blue turtle-like creature with a squirtle pattern on its body.",
      "It has four limbs and two heads with squinted blue eyes and a slit-like mouth.",
      "The pokemon has a fairy element associated with it and special markings in the form of a squirtle on its back and a smooth skin texture.",
      "It is at an early evolutionary stage and does not have any wings, fins, or horns.",
      "Its unique feature is that it is a squirtle. The pokemon has a friendly facial expression with a smile."
   ],
   "Fairesquirt": [
      "The pokemon in the image is a small, blue turtle-like creature with a squirtle pattern on its body.",
      "It has four limbs and two heads with squinted blue eyes and a slit-like mouth.",
      "The pokemon has a fairy element associated with it and special markings in the form of a squirtle on its back and a smooth skin texture.",
      "It is at an early evolutionary stage and does not have any wings, fins, or horns.",
      "Its unique feature is that it is a squirtle. The pokemon has a friendly facial expression with a smile."
   ]
}


Wartortle_23
{
    "Squirtle": [
        "This is a small, blue turtle-like pokemon with a white belly and head.",
        "It has four limbs that are shaped like a turtle's arms and a tail shaped like a squirtle.",
        "It has two heads and two blue squint-shaped eyes.",
        "The pokemon has a sad facial expression and a slit mouth.",
        "Its ears are in the shape of a 't' and it doesn't have any fins, horns, or crests/spikes."
    ],
    "Wartortle": [
        "This is a small, blue turtle-like pokemon with a white belly and head.",
        "It has four limbs that are shaped like a turtle's arms and a tail shaped like a squirtle.",
        "It has two heads and two blue squint-shaped eyes.",
        "The pokemon has a sad facial expression and a slit mouth.",
        "Its ears are in the shape of a 't' and it doesn't have any fins, horns, or crests/spikes."
    ],
    "Blastoise": [
        "This is a small, blue turtle-like pokemon with a white belly and head.",
        "It has four limbs that are shaped like a turtle's arms and a tail shaped like a squirtle.",
        "It has two heads and two blue squint-shaped eyes.",
        "The pokemon has a sad facial expression and a slit mouth.",
        "Its ears are in the shape of a 't' and it doesn't have any fins, horns, or crests/spikes."
    ]
}


Ivysaur_24
{
"Flower Squirtle": [
"A Squirtle with a flower on its head is a small, green Pokemon with a scaly texture.",
"It has a sad facial expression and squinted blue eyes.",
"The Pokemon has four limbs, two heads, and two eyes.",
"It has a slit mouth and a unique feature of a flower on its head.",
"The body pattern of this Squirtle includes a splotch of green on its back."
],
"Greenleaf Squirtle": [
"A Squirtle with a flower on its head is a small, green Pokemon with a scaly texture.",
"It has a sad facial expression and squinted blue eyes.",
"The Pokemon has four limbs, two heads, and two eyes.",
"It has a slit mouth and a unique feature of a flower on its head.",
"The body pattern of this Squirtle includes a splotch of green on its back."
],
"Sadpetal Squirtle": [
"A Squirtle with a flower on its head is a small, green Pokemon with a scaly texture.",
"It has a sad facial expression and squinted blue eyes.",
"The Pokemon has four limbs, two heads, and two eyes.",
"It has a slit mouth and a unique feature of a flower on its head.",
"The body pattern of this Squirtle includes a splotch of green on its back."
]
}


Ivysaur_25
{
    "Squirtle": [
        "This image shows a small blue Pokemon known as Squirtle.",
        "It has a leaf on its back and a body with a green head and a pink tail.",
        "Squirtle has four limbs, two heads, and two eyes.",
        "Its eyes are squinted and blue in color.",
        "The mouth is in the shape of a slit."
    ],
    "Wartortle": [
        "This image shows a small blue Pokemon known as Wartortle.",
        "It has a leaf on its back and a body with a green head and a pink tail.",
        "Wartortle has four limbs, two heads, and two eyes.",
        "Its eyes are squinted and blue in color.",
        "The mouth is in the shape of a slit."
    ],
    "Blastoise": [
        "This image shows a small blue Pokemon known as Blastoise.",
        "It has a leaf on its back and a body with a green head and a pink tail.",
        "Blastoise has four limbs, two heads, and two eyes.",
        "Its eyes are squinted and blue in color.",
        "The mouth is in the shape of a slit."
    ]
}


Ivysaur_26
{
    "Squirtle": [
        "This image is of a small, blue pokemon called Squirtle.",
        "It has a blue and green body pattern with a pink flower on its head.",
        "Squirtle has four limbs, two heads, and two squinty blue eyes.",
        "Its mouth has a slit shape and it has a tail specific to Squirtle.",
        "The pokemon is associated with a flower and has special markings in the form of a flower on its head."
    ],
    "Wartortle": [
        "This image is of a small, blue pokemon called Wartortle.",
        "It has a blue and green body pattern with a pink flower on its head.",
        "Wartortle has four limbs, two heads, and two squinty blue eyes.",
        "Its mouth has a slit shape and it has a tail specific to Wartortle.",
        "The pokemon is associated with a flower and has special markings in the form of a flower on its head."
    ],
    "Blastoise": [
        "This image is of a small, blue pokemon called Blastoise.",
        "It has a blue and green body pattern with a pink flower on its head.",
        "Blastoise has four limbs, two heads, and two squinty blue eyes.",
        "Its mouth has a slit shape and it has a tail specific to Blastoise.",
        "The pokemon is associated with a flower and has special markings in the form of a flower on its head."
    ]
}


Pikachu_27
{
  "Pikachu": [
    "Pikachu is a small, yellow Pokemon with a black nose and black eyes.",
    "It has a squinty eye shape and a slit mouth shape.",
    "The Pokemon has a stubby tail and two heads.",
    "It is associated with the element of electricity.",
    "Pikachu has a unique feature of a yellow head and a smooth skin texture."
  ],
  "Pichu": [
    "Pikachu is a small, yellow Pokemon with a black nose and black eyes.",
    "It has a squinty eye shape and a slit mouth shape.",
    "The Pokemon has a stubby tail and two heads.",
    "It is associated with the element of electricity.",
    "Pikachu has a unique feature of a yellow head and a smooth skin texture."
  ],
  "Raichu": [
    "Pikachu is a small, yellow Pokemon with a black nose and black eyes.",
    "It has a squinty eye shape and a slit mouth shape.",
    "The Pokemon has a stubby tail and two heads.",
    "It is associated with the element of electricity.",
    "Pikachu has a unique feature of a yellow head and a smooth skin texture."
  ]
}


Pikachu_28
{
"pikachu": [
"Summary: Pikachu is a small, yellow Pokémon with a body shape of a small yellow ball.",
"It has a yellow squinty eyes, a slit mouth, and a stubby tail.",
"It has two heads with two eyes each.",
"Pikachu has a smooth and shiny skin texture.",
"It is a unique Pokémon belonging to the evolutionary stage of Pikachu."
],
"Pika": [
"Summary: Pikachu is a small, yellow Pokémon with a body shape of a small yellow ball.",
"It has a yellow squinty eyes, a slit mouth, and a stubby tail.",
"It has two heads with two eyes each.",
"Pikachu has a smooth and shiny skin texture.",
"It is a unique Pokémon belonging to the evolutionary stage of Pikachu."
],
"Electricball": [
"Summary: Pikachu is a small, yellow Pokémon with a body shape of a small yellow ball.",
"It has a yellow squinty eyes, a slit mouth, and a stubby tail.",
"It has two heads with two eyes each.",
"Pikachu has a smooth and shiny skin texture.",
"It is a unique Pokémon belonging to the evolutionary stage of Pikachu."
]
}


Pikachu_29
{
    "Pikachu": [
        "The pokemon in the image is a yellow Pikachu, small in size with a yellow body, black head, and a black tail.",
        "It has four limbs and a squint eye shape with yellow eyes.",
        "The mouth has a slit shape.",
        "The Pikachu has a unique feature of a tail and it is at the evolutionary stage of a Pikachu.",
        "There are no fins, horns, or crests present. The pokemon has a sad facial expression and associated with the element of lightning."
    ],
    "Pichu": [
        "The pokemon in the image is a yellow Pichu, small in size with a yellow body, black head, and a black tail.",
        "It has four limbs and a squint eye shape with yellow eyes.",
        "The mouth has a slit shape.",
        "The Pichu has a unique feature of a tail and it is at an early evolutionary stage.",
        "There are no fins, horns, or crests present. The pokemon has a sad facial expression and associated with the element of lightning."
    ],
    "Raichu": [
        "The pokemon in the image is a yellow Raichu, small in size with a yellow body, black head, and a black tail.",
        "It has four limbs and a squint eye shape with yellow eyes.",
        "The mouth has a slit shape.",
        "The Raichu has a unique feature of a tail and it is at an advanced evolutionary stage.",
        "There are no fins, horns, or crests present. The pokemon has a sad facial expression and associated with the element of lightning."
    ]
}


==============================
		 Finished Post-processing
==============================
		 ---> total discovered names = 47
['Swanslash', 'Wartortle', 'Charmeleon', 'Hawkbeak', 'Sparkachu', 'Sylveon', 'Crestwing', 'Crestspike', 'Blastoise', 'Pidgeot', 'Swanbeak', 'Charmander', 'Birdor', 'Pichu', 'Raichu', 'Sadtail Pikachu', 'Flamizard', 'Electricball', 'Lizardflare', 'Squirtchu', 'Sandslash', 'Swanwing', 'Hawkwing', 'PikaHorn', 'Greenleaf Squirtle', 'Greenleaf', 'Squirturtle', 'Cyndaquil', 'Leafurtle', 'Swaneye', 'pikachu', 'Staraptor', 'Squirtle-like creature', 'Fairesquirt', 'Greened', 'Ignisaur', 'Pikachu', 'Bluetail', 'Squirtle', 'Swellow', 'Sadpetal Squirtle', 'Frogleaf', 'Flower Squirtle', 'Green Pokemon', 'Redhat', 'Pika', 'Charizard']

		 ---> total discovered names = 47
		 ---> number of failure entries = 0
END==============================

Namespace(config_file_env='./configs/env_machine.yml', config_file_expt='./configs/expts/pokemon_all.yml', alpha=0.7, N_tta=10, num_per_category='3', num_runs=10)
Number of GPUs: 1
Device ID: 0 Device Name: NVIDIA RTX A6000
['Swanslash', 'Wartortle', 'Charmeleon', 'Hawkbeak', 'Sparkachu', 'Sylveon', 'Crestwing', 'Crestspike', 'Blastoise', 'Pidgeot', 'Swanbeak', 'Charmander', 'Birdor', 'Pichu', 'Raichu', 'Sadtail Pikachu', 'Flamizard', 'Electricball', 'Lizardflare', 'Squirtchu', 'Sandslash', 'Swanwing', 'Hawkwing', 'PikaHorn', 'Greenleaf Squirtle', 'Greenleaf', 'Squirturtle', 'Cyndaquil', 'Leafurtle', 'Swaneye', 'pikachu', 'Staraptor', 'Squirtle-like creature', 'Fairesquirt', 'Greened', 'Ignisaur', 'Pikachu', 'Bluetail', 'Squirtle', 'Swellow', 'Sadpetal Squirtle', 'Frogleaf', 'Flower Squirtle', 'Green Pokemon', 'Redhat', 'Pika', 'Charizard']
0it [00:00, ?it/s]1it [00:00,  1.12it/s]2it [00:01,  1.30it/s]3it [00:01,  1.64it/s]4it [00:02,  1.53it/s]5it [00:03,  1.50it/s]6it [00:04,  1.54it/s]7it [00:04,  1.57it/s]8it [00:05,  1.51it/s]9it [00:05,  1.58it/s]10it [00:06,  1.60it/s]11it [00:07,  1.55it/s]12it [00:07,  1.49it/s]13it [00:08,  1.45it/s]14it [00:09,  1.39it/s]15it [00:10,  1.40it/s]16it [00:10,  1.47it/s]17it [00:11,  1.45it/s]18it [00:11,  1.79it/s]19it [00:12,  1.70it/s]20it [00:12,  1.70it/s]21it [00:13,  1.54it/s]22it [00:14,  1.36it/s]23it [00:15,  1.24it/s]24it [00:16,  1.24it/s]25it [00:17,  1.23it/s]26it [00:18,  1.23it/s]27it [00:18,  1.24it/s]28it [00:19,  1.30it/s]29it [00:20,  1.31it/s]30it [00:20,  1.38it/s]30it [00:20,  1.43it/s]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:01<00:00,  1.98s/it]100%|██████████| 1/1 [00:02<00:00,  2.07s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:01<00:00,  1.66s/it]100%|██████████| 1/1 [00:01<00:00,  1.75s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.789372444152832


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 71.53846153846153
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 81.95026331016642
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 65.98797952066484


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 78.93724060058594
=========================          END          =========================
0it [00:00, ?it/s]1it [00:00,  1.90it/s]2it [00:01,  1.07it/s]3it [00:02,  1.00it/s]4it [00:03,  1.02it/s]5it [00:03,  1.50it/s]6it [00:04,  1.27it/s]7it [00:06,  1.03s/it]8it [00:07,  1.16s/it]9it [00:09,  1.27s/it]10it [00:11,  1.51s/it]11it [00:13,  1.65s/it]12it [00:15,  1.70s/it]13it [00:16,  1.65s/it]14it [00:18,  1.76s/it]15it [00:21,  1.94s/it]16it [00:23,  1.95s/it]17it [00:24,  1.89s/it]18it [00:26,  1.93s/it]19it [00:28,  1.90s/it]20it [00:30,  1.88s/it]21it [00:32,  1.89s/it]22it [00:34,  1.86s/it]23it [00:35,  1.81s/it]24it [00:38,  1.89s/it]25it [00:39,  1.88s/it]26it [00:41,  1.85s/it]27it [00:43,  1.85s/it]28it [00:45,  1.80s/it]29it [00:46,  1.59s/it]30it [00:47,  1.47s/it]30it [00:47,  1.58s/it]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:03<00:00,  3.02s/it]100%|██████████| 1/1 [00:03<00:00,  3.23s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:03<00:00,  3.17s/it]100%|██████████| 1/1 [00:03<00:00,  3.34s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.7823934555053711


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 72.3076923076923
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 82.44214092823508
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 66.1134328358209


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 78.23934936523438
=========================          END          =========================
0it [00:00, ?it/s]1it [00:01,  1.79s/it]2it [00:03,  1.71s/it]3it [00:05,  1.65s/it]4it [00:07,  1.84s/it]5it [00:08,  1.82s/it]6it [00:10,  1.70s/it]7it [00:11,  1.53s/it]8it [00:12,  1.41s/it]9it [00:13,  1.31s/it]10it [00:14,  1.26s/it]11it [00:15,  1.17s/it]12it [00:17,  1.19s/it]13it [00:18,  1.20s/it]14it [00:19,  1.28s/it]15it [00:21,  1.29s/it]16it [00:22,  1.27s/it]17it [00:23,  1.24s/it]18it [00:24,  1.20s/it]19it [00:25,  1.21s/it]20it [00:27,  1.35s/it]21it [00:29,  1.42s/it]22it [00:30,  1.40s/it]23it [00:31,  1.34s/it]24it [00:32,  1.11s/it]25it [00:32,  1.15it/s]27it [00:32,  1.99it/s]29it [00:32,  3.09it/s]30it [00:32,  1.10s/it]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.46s/it]100%|██████████| 1/1 [00:02<00:00,  2.59s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.23s/it]100%|██████████| 1/1 [00:02<00:00,  2.38s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.7877997756004333


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 70.0
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 81.37838283145075
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 65.03859442769976


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 78.77997589111328
=========================          END          =========================
0it [00:00, ?it/s]1it [00:00,  2.09it/s]2it [00:00,  2.03it/s]4it [00:01,  3.47it/s]5it [00:01,  4.05it/s]6it [00:01,  4.09it/s]7it [00:01,  4.84it/s]8it [00:02,  4.77it/s]9it [00:02,  4.94it/s]10it [00:02,  3.64it/s]11it [00:03,  2.84it/s]12it [00:03,  2.75it/s]13it [00:03,  2.88it/s]14it [00:04,  2.70it/s]15it [00:04,  2.83it/s]16it [00:04,  3.12it/s]17it [00:05,  2.40it/s]18it [00:06,  2.05it/s]19it [00:06,  2.57it/s]20it [00:06,  2.87it/s]21it [00:06,  3.25it/s]22it [00:07,  3.25it/s]23it [00:07,  3.71it/s]24it [00:07,  2.97it/s]25it [00:07,  3.53it/s]26it [00:08,  3.10it/s]28it [00:08,  4.91it/s]30it [00:08,  3.50it/s]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.33s/it]100%|██████████| 1/1 [00:02<00:00,  2.54s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:03<00:00,  3.34s/it]100%|██████████| 1/1 [00:03<00:00,  3.55s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.7855166792869568


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 71.53846153846153
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 82.47900596167906
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 66.20196864746629


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 78.55166625976562
=========================          END          =========================
0it [00:00, ?it/s]1it [00:01,  1.98s/it]2it [00:03,  1.71s/it]3it [00:05,  1.74s/it]4it [00:07,  1.74s/it]5it [00:08,  1.75s/it]6it [00:10,  1.74s/it]7it [00:12,  1.73s/it]8it [00:14,  1.75s/it]9it [00:16,  1.83s/it]10it [00:18,  1.89s/it]11it [00:20,  1.94s/it]12it [00:21,  1.86s/it]13it [00:23,  1.85s/it]14it [00:25,  1.84s/it]15it [00:27,  1.78s/it]16it [00:28,  1.75s/it]17it [00:30,  1.70s/it]18it [00:32,  1.70s/it]19it [00:33,  1.71s/it]20it [00:35,  1.69s/it]21it [00:37,  1.69s/it]22it [00:38,  1.68s/it]23it [00:40,  1.73s/it]24it [00:41,  1.61s/it]25it [00:43,  1.47s/it]26it [00:44,  1.38s/it]27it [00:45,  1.34s/it]28it [00:46,  1.27s/it]29it [00:48,  1.38s/it]30it [00:49,  1.31s/it]30it [00:49,  1.65s/it]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.60s/it]100%|██████████| 1/1 [00:02<00:00,  2.72s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.46s/it]100%|██████████| 1/1 [00:02<00:00,  2.59s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.786565363407135


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 72.3076923076923
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 82.28536165665598
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 66.24465102552752


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 78.65653991699219
=========================          END          =========================
0it [00:00, ?it/s]1it [00:00,  3.11it/s]2it [00:00,  3.38it/s]3it [00:00,  4.34it/s]4it [00:01,  3.58it/s]6it [00:01,  4.84it/s]7it [00:01,  5.16it/s]8it [00:01,  4.92it/s]9it [00:02,  4.62it/s]11it [00:02,  5.26it/s]12it [00:02,  5.74it/s]13it [00:02,  5.18it/s]14it [00:02,  4.80it/s]15it [00:03,  4.92it/s]16it [00:03,  5.28it/s]17it [00:03,  5.67it/s]18it [00:03,  4.95it/s]19it [00:04,  3.59it/s]20it [00:04,  2.48it/s]21it [00:05,  2.79it/s]22it [00:05,  3.50it/s]23it [00:05,  3.81it/s]25it [00:05,  4.33it/s]26it [00:05,  4.98it/s]27it [00:06,  5.30it/s]29it [00:06,  6.45it/s]30it [00:06,  6.89it/s]30it [00:06,  4.66it/s]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.51s/it]100%|██████████| 1/1 [00:02<00:00,  2.75s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.77s/it]100%|██████████| 1/1 [00:02<00:00,  2.94s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.7819525599479675


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 71.53846153846153
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 81.33159445485518
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 65.07581921739774


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 78.19525909423828
=========================          END          =========================
0it [00:00, ?it/s]1it [00:02,  2.08s/it]2it [00:04,  2.00s/it]3it [00:05,  1.92s/it]4it [00:07,  1.89s/it]5it [00:09,  1.83s/it]6it [00:11,  1.79s/it]7it [00:12,  1.71s/it]8it [00:14,  1.69s/it]9it [00:15,  1.61s/it]10it [00:16,  1.47s/it]11it [00:18,  1.37s/it]12it [00:19,  1.32s/it]13it [00:20,  1.22s/it]14it [00:21,  1.20s/it]15it [00:22,  1.24s/it]16it [00:24,  1.30s/it]17it [00:25,  1.31s/it]18it [00:26,  1.30s/it]19it [00:27,  1.14s/it]21it [00:27,  1.43it/s]22it [00:28,  1.71it/s]23it [00:28,  2.10it/s]24it [00:28,  2.61it/s]25it [00:28,  3.12it/s]26it [00:28,  3.09it/s]27it [00:29,  3.02it/s]28it [00:29,  3.01it/s]29it [00:29,  3.13it/s]30it [00:30,  3.48it/s]30it [00:30,  1.00s/it]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:03<00:00,  3.11s/it]100%|██████████| 1/1 [00:03<00:00,  3.30s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.66s/it]100%|██████████| 1/1 [00:02<00:00,  2.84s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.7775742411613464


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 70.0
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 80.91855288838559
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 64.16666666666667


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 77.7574234008789
=========================          END          =========================
0it [00:00, ?it/s]2it [00:00, 15.95it/s]4it [00:00, 11.19it/s]6it [00:00, 11.21it/s]8it [00:00, 12.11it/s]10it [00:00, 12.20it/s]12it [00:00, 12.85it/s]14it [00:01, 11.73it/s]16it [00:01, 12.19it/s]18it [00:01, 13.65it/s]20it [00:01, 14.76it/s]22it [00:01, 13.88it/s]24it [00:01, 13.53it/s]26it [00:01, 13.99it/s]28it [00:02, 15.31it/s]30it [00:02, 14.91it/s]30it [00:02, 13.44it/s]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.70s/it]100%|██████████| 1/1 [00:02<00:00,  2.89s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.41s/it]100%|██████████| 1/1 [00:02<00:00,  2.54s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.7731141448020935


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 69.23076923076923
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 80.29294895083979
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 63.167142543378


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 77.31141662597656
=========================          END          =========================
0it [00:00, ?it/s]1it [00:01,  1.61s/it]2it [00:03,  1.65s/it]3it [00:05,  1.69s/it]4it [00:07,  1.81s/it]5it [00:08,  1.79s/it]6it [00:10,  1.71s/it]7it [00:12,  1.74s/it]8it [00:13,  1.73s/it]9it [00:15,  1.73s/it]10it [00:17,  1.70s/it]11it [00:18,  1.61s/it]12it [00:20,  1.59s/it]13it [00:21,  1.58s/it]14it [00:23,  1.56s/it]15it [00:24,  1.56s/it]16it [00:26,  1.61s/it]17it [00:28,  1.60s/it]18it [00:29,  1.58s/it]19it [00:31,  1.62s/it]20it [00:32,  1.61s/it]21it [00:34,  1.62s/it]22it [00:36,  1.60s/it]23it [00:37,  1.62s/it]24it [00:39,  1.58s/it]25it [00:40,  1.55s/it]26it [00:41,  1.36s/it]27it [00:42,  1.24s/it]28it [00:43,  1.11s/it]29it [00:44,  1.10s/it]30it [00:46,  1.23s/it]30it [00:46,  1.54s/it]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:03<00:00,  3.80s/it]100%|██████████| 1/1 [00:04<00:00,  4.06s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:03<00:00,  3.51s/it]100%|██████████| 1/1 [00:03<00:00,  3.73s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.7787977457046509


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 69.23076923076923
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 79.52636310365648
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 62.59755734286565


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 77.87977600097656
=========================          END          =========================
0it [00:00, ?it/s]1it [00:01,  1.41s/it]2it [00:02,  1.29s/it]3it [00:03,  1.24s/it]4it [00:04,  1.06s/it]5it [00:05,  1.13it/s]6it [00:05,  1.43it/s]7it [00:05,  1.86it/s]8it [00:05,  2.40it/s]9it [00:06,  2.98it/s]10it [00:06,  2.72it/s]11it [00:06,  3.06it/s]12it [00:06,  3.64it/s]13it [00:06,  4.37it/s]14it [00:07,  4.76it/s]15it [00:07,  5.17it/s]16it [00:07,  4.51it/s]17it [00:07,  4.51it/s]19it [00:08,  3.78it/s]20it [00:08,  4.01it/s]21it [00:08,  3.85it/s]22it [00:09,  3.21it/s]23it [00:09,  3.67it/s]24it [00:09,  3.95it/s]25it [00:10,  3.22it/s]26it [00:10,  3.17it/s]27it [00:10,  3.16it/s]28it [00:11,  3.53it/s]29it [00:11,  4.35it/s]30it [00:11,  5.20it/s]30it [00:11,  2.67it/s]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:03<00:00,  3.03s/it]100%|██████████| 1/1 [00:03<00:00,  3.19s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.69s/it]100%|██████████| 1/1 [00:02<00:00,  2.82s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.7864943742752075


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 71.53846153846153
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 82.1136700515549
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 66.36097275124524


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 78.6494369506836
=========================          END          =========================


========================= ViLang Final Results of 10 runs, w/ 3 imgs per class=========================


[Clustering]
Clustering ACC: 70.92307692307693
Semantic ACC:   78.29580688476562
=========================          END          =========================
Namespace(mode='describe', config_file_env='./configs/env_machine.yml', config_file_expt='./configs/expts/pokemon_all.yml', num_per_category='3')
{'setup': 'ours', 'experiment': 5.0, 'dataset_name': 'pokemon', 'num_classes': 10, 'num_base': 5, 'num_novel': 5, 'seed': 1, 'batch_size': 256, 'clustering_method': 'multi_clip_voting', 'model_size': 'ViT-B/16', 'model_size_vqa': 'FlanT5-XXL', 'model_type_llm': 'gpt-3.5-turbo', 'image_size': 224, 'verbose': False, 'host': 'chaos', 'num_workers': 16, 'device': 'cuda', 'device_count': '1', 'device_id': '0', 'data_dir': './datasets/pokemon', 'expt_dir': './experiments/pokemon', 'expt_dir_describe': './experiments/pokemon/describe', 'path_vqa_questions': './experiments/pokemon/describe/pokemon_vqa_questions', 'path_vqa_answers': './experiments/pokemon/describe/pokemon_attributes_pairs', 'path_llm_prompts': './experiments/pokemon/describe/pokemon_llm_prompts', 'expt_dir_guess': './experiments/pokemon/guess', 'path_llm_replies_raw': './experiments/pokemon/guess/pokemon_llm_replies_raw', 'path_llm_replies_jsoned': './experiments/pokemon/guess/pokemon_llm_replies_jsoned', 'path_llm_gussed_names': './experiments/pokemon/guess/pokemon_llm_gussed_names', 'expt_dir_grouping': './experiments/pokemon/grouping'}
Loading checkpoint shards:   0%|          | 0/5 [00:00<?, ?it/s]Loading checkpoint shards:  20%|██        | 1/5 [00:03<00:15,  3.78s/it]Loading checkpoint shards:  40%|████      | 2/5 [00:06<00:08,  2.97s/it]Loading checkpoint shards:  60%|██████    | 3/5 [00:08<00:05,  2.69s/it]Loading checkpoint shards:  80%|████████  | 4/5 [00:11<00:02,  2.63s/it]Loading checkpoint shards: 100%|██████████| 5/5 [00:13<00:00,  2.62s/it]Loading checkpoint shards: 100%|██████████| 5/5 [00:13<00:00,  2.74s/it]
0it [00:00, ?it/s]1it [00:06,  6.45s/it]2it [00:12,  6.17s/it]0: label=2
==============================
Charmander_0 with label 2
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a small orange pokemon'''
        Attributes List:
        - '''color''': '''orange'''
        - '''size''': '''small'''
        - '''shape''': '''a small, orange, squirtle-like creature'''
        - '''body pattern''': '''a small, orange, scaly, lizard-like creature with'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''orange'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a stubby tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''fire'''
        - '''special markings''': '''the pokemon has a snout with a horn on it'''
        - '''ear shape''': '''a frog'''
        - '''skin texture''': '''smooth and shiny'''
        - '''evolutionary stage''': '''a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a t-shaped arm'''
        - '''facial expression''': '''a sad expression'''
        - '''unique feature''': '''it has a fire-type'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

1: label=2
==============================
Charmander_1 with label 2
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a small orange pokemon'''
        Attributes List:
        - '''color''': '''orange'''
        - '''size''': '''it is small'''
        - '''shape''': '''a small, orange, and yellow lizard'''
        - '''body pattern''': '''a scaly, squarish, snout-like'''
        - '''number of limbs''': '''four limbs'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''orange'''
        - '''mouth shape''': '''a snout'''
        - '''tail shape''': '''a slanted snout'''
        - '''number of heads''': '''two heads'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''fire'''
        - '''special markings''': '''the pokemon has a red nose and a yellow tummy'''
        - '''ear shape''': '''a frog'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a t-shaped arm'''
        - '''facial expression''': '''a smile'''
        - '''unique feature''': '''it has a tail'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

2: label=2
==============================
Charmander_2 with label 2
==============================

3it [00:18,  6.22s/it]4it [00:25,  6.33s/it]5it [00:30,  5.97s/it]
        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''brown'''
        - '''size''': '''it is small'''
        - '''shape''': '''it is a small, round, and stubby'''
        - '''body pattern''': '''it has a spherical head, a spherical body'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''the eyes are a squint'''
        - '''eye color''': '''blue'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a stubby tail with a rounded tip'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''fire'''
        - '''special markings''': '''the pokemon has a white belly and a blue tail'''
        - '''ear shape''': '''a spherical shape'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a t'''
        - '''arm shape''': '''the arms are a t shape'''
        - '''facial expression''': '''a smile'''
        - '''unique feature''': '''it has a flame on its head'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

3: label=9
==============================
Pidgeotto_3 with label 9
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a sylveon'''
        Attributes List:
        - '''color''': '''brown and pink'''
        - '''size''': '''it is a medium size'''
        - '''shape''': '''a bird with a long neck and a long tail'''
        - '''body pattern''': '''a tan body with a red head and wings'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''pink'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a swan-like tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a bird'''
        - '''special markings''': '''the pokemon has a red crest on its head'''
        - '''ear shape''': '''a spherical shape'''
        - '''skin texture''': '''a scaly texture'''
        - '''evolutionary stage''': '''a sylveon'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a slanted wing'''
        - '''arm shape''': '''a wing shape'''
        - '''facial expression''': '''a smirk'''
        - '''unique feature''': '''a bird with a long beak'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

4: label=9
==============================
Pidgeotto_4 with label 9
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a sylveon'''
        Attributes List:
        - '''color''': '''pink and brown'''
        - '''size''': '''it is a medium size'''
        - '''shape''': '''a bird'''
        - '''body pattern''': '''a bird with a long neck and a long tail'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a hawk's eye'''
        - '''eye color''': '''brown'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a swan'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a bird'''
        - '''special markings''': '''the pokemon has a red and yellow head, a white body, and a'''
        - '''ear shape''': '''a swan'''
        - '''skin texture''': '''a scaly texture'''
        - '''evolutionary stage''': '''a sylveon'''
        - '''number of wings''': '''two wings'''
        - '''leg shape''': '''a swan-like leg shape'''
        - '''arm shape''': '''a wing shape'''
        - '''facial expression''': '''a smirk'''
        - '''unique feature''': '''it has wings'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

5: label=9
==============================6it [00:36,  5.99s/it]7it [00:44,  6.73s/it]
Pidgeotto_5 with label 9
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''brown and red'''
        - '''size''': '''it is small'''
        - '''shape''': '''a bird'''
        - '''body pattern''': '''a brown body with a red head'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a hawk'''
        - '''eye color''': '''red'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a swan-like tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a bird'''
        - '''special markings''': '''a red hat and a white crest on its head'''
        - '''ear shape''': '''a spherical shape'''
        - '''skin texture''': '''smooth and shiny'''
        - '''evolutionary stage''': '''a snorlax'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle pokemon'''
        - '''arm shape''': '''a wing shape'''
        - '''facial expression''': '''a smug look'''
        - '''unique feature''': '''it has a red hat'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''yes'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

6: label=3
==============================
Charmeleon_6 with label 3
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''red'''
        - '''size''': '''it is small'''
        - '''shape''': '''it is a red and yellow pokemon'''
        - '''body pattern''': '''it has a red body with a white belly and a white tail'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''the eyes are a squint'''
        - '''eye color''': '''red'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''it is a stubby tail with a curved tip'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''fire'''
        - '''special markings''': '''the pokemon has a red body with a white belly and a white tail'''
        - '''ear shape''': '''the ear shape is a triangle'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a thigh and a shin'''
        - '''arm shape''': '''the arms are shaped like a t'''
        - '''facial expression''': '''a smirk'''
        - '''unique feature''': '''it has a tail that is on fire'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

7: label=3
==============================
Charmeleon_7 with label 3
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a red tawny tawny'''
        Attributes List:
        - '''color''': '''red'''
        - '''size''': '''it is small'''
        - '''shape''': '''a red and yellow lizard'''
        - '''body pattern''': '''a red and yellow tiger-like pattern'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''red'''
        - '''mouth shape''': '''a snout'''
        - '''tail shape''': '''a slanted tadpole tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''fire'''
        - '''special markings''': '''the pokemon has a red tummy and a white belly'''
        - '''ear shape''': '''a frog'''
        - '''skin texture''': '''a red lizard'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a t-shaped arm'''
        - '''facial expression''': '''a smirk'''
        - '''unique feature''': '''it has a fire-type'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

8it [00:52,  7.14s/it]9it [01:00,  7.19s/it]10it [01:06,  6.91s/it]END==============================

8: label=3
==============================
Charmeleon_8 with label 3
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a red pokemon with fire on its back'''
        Attributes List:
        - '''color''': '''red'''
        - '''size''': '''it is small'''
        - '''shape''': '''a red and yellow lizard'''
        - '''body pattern''': '''a red and white striped body with a black belly'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''red'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a stubby tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''fire'''
        - '''special markings''': '''the pokemon has a red body with a white belly and a white tail'''
        - '''ear shape''': '''a slanted triangle'''
        - '''skin texture''': '''a red lizard'''
        - '''evolutionary stage''': '''a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a t-shaped arm'''
        - '''facial expression''': '''angry'''
        - '''unique feature''': '''it has a flame on its head'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

9: label=1
==============================
Ivysaur_9 with label 1
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''blue'''
        - '''size''': '''it is small'''
        - '''shape''': '''a squirtle'''
        - '''body pattern''': '''a blue and green squirtle with a pink flower on its head'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''blue'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a flower'''
        - '''special markings''': '''the pokemon has a flower on its head'''
        - '''ear shape''': '''a squirtle'''
        - '''skin texture''': '''a scaly texture'''
        - '''evolutionary stage''': '''a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a squirtle'''
        - '''facial expression''': '''a sad expression'''
        - '''unique feature''': '''it has a flower on its head'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

10: label=1
==============================
Ivysaur_10 with label 1
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''green'''
        - '''size''': '''it is small'''
        - '''shape''': '''a squirtle'''
        - '''body pattern''': '''a squirtle with a flower on its head'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''green'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''grass'''
        - '''special markings''': '''the pokemon has a snout with a horn and a tail'''
        - '''ear shape''': '''a squirtle'''
        - '''skin texture''': '''a scaly texture'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a twig'''
        - '''facial expression''': '''a sad expression'''
        - '''unique feature''': '''it has a flower on its head'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

11it [01:12,  6.71s/it]12it [01:20,  6.99s/it]13it [01:26,  6.61s/it]END==============================

11: label=1
==============================
Ivysaur_11 with label 1
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''blue'''
        - '''size''': '''it is small'''
        - '''shape''': '''it is a small blue pokemon with a leaf on its back'''
        - '''body pattern''': '''it has a blue body with a green head and a pink tail'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''the eyes are a squint'''
        - '''eye color''': '''blue'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''the pokemon is a squirtle'''
        - '''special markings''': '''the pokemon has a green head, a blue body, and a pink tail'''
        - '''ear shape''': '''a squirtle'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a thigh and a thigh'''
        - '''arm shape''': '''the pokemon has a squirtle arm shape'''
        - '''facial expression''': '''a sad expression'''
        - '''unique feature''': '''it has a flower on its head'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

12: label=6
==============================
Pikachu_12 with label 6
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''pikachu'''
        Attributes List:
        - '''color''': '''yellow'''
        - '''size''': '''it is small'''
        - '''shape''': '''a small yellow pokemon'''
        - '''body pattern''': '''it has a yellow body with a black head and a black tail'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''yellow'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a slanted squirt tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''grass'''
        - '''special markings''': '''the pokemon has a yellow body with a black stripe on the side of its'''
        - '''ear shape''': '''a ear shape of a t'''
        - '''skin texture''': '''smooth'''
        - '''evolutionary stage''': '''it is a pikachu'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a t-shape'''
        - '''facial expression''': '''a sad expression'''
        - '''unique feature''': '''it has a tail'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

13: label=6
==============================
Pikachu_13 with label 6
==============================

14it [01:31,  6.29s/it]15it [01:37,  6.23s/it]16it [01:42,  5.94s/it]
        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''pikachu'''
        Attributes List:
        - '''color''': '''yellow'''
        - '''size''': '''it is small'''
        - '''shape''': '''a yellow pokemon with a black nose'''
        - '''body pattern''': '''a yellow body with black eyes and a black nose'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''yellow'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a stubby tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a pokemon'''
        - '''special markings''': '''the pokemon has a black stripe on its forehead'''
        - '''ear shape''': '''a squished triangle'''
        - '''skin texture''': '''smooth'''
        - '''evolutionary stage''': '''pikachu'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a slanted triangle'''
        - '''facial expression''': '''a pikachu with a smile on his face'''
        - '''unique feature''': '''it has a yellow head'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

14: label=6
==============================
Pikachu_14 with label 6
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''pikachu'''
        Attributes List:
        - '''color''': '''yellow'''
        - '''size''': '''it is small'''
        - '''shape''': '''it is a small yellow ball'''
        - '''body pattern''': '''it has a yellow body with a black head and a black tail'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''yellow'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a stubby tail'''
        - '''number of heads''': '''two heads'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a ball'''
        - '''special markings''': '''the pokemon has a white belly and a black tail'''
        - '''ear shape''': '''a ear shape of a squirtle'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a pikachu'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a t'''
        - '''arm shape''': '''it is a squirtle'''
        - '''facial expression''': '''a smile'''
        - '''unique feature''': '''it is a pikachu'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

15: label=4
==============================
Squirtle_15 with label 4
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a small turtle'''
        Attributes List:
        - '''color''': '''blue and yellow'''
        - '''size''': '''small'''
        - '''shape''': '''a turtle'''
        - '''body pattern''': '''a turtle with a blue head and a yellow belly'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''blue'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''sand'''
        - '''special markings''': '''the pokemon has a blue and yellow shell'''
        - '''ear shape''': '''a teddy bear'''
        - '''skin texture''': '''smooth'''
        - '''evolutionary stage''': '''a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a t-shape'''
        - '''facial expression''': '''a sad expression'''
        - '''unique feature''': '''it is a turtle'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

16: label=4
==============================
Squirtle_16 with label 4
17it [01:48,  5.85s/it]18it [01:54,  5.99s/it]==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''blue'''
        - '''size''': '''it is small'''
        - '''shape''': '''a turtle'''
        - '''body pattern''': '''it is a squirtle'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''blue'''
        - '''mouth shape''': '''a snout'''
        - '''tail shape''': '''a squirtle'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''water'''
        - '''special markings''': '''the pokemon has a blue head, a blue body, and a blue tail'''
        - '''ear shape''': '''a squirtle'''
        - '''skin texture''': '''it is smooth and shiny'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''it is a squirtle'''
        - '''facial expression''': '''a smile'''
        - '''unique feature''': '''it is a squirtle'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

17: label=4
==============================
Squirtle_17 with label 4
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a turtle'''
        Attributes List:
        - '''color''': '''blue'''
        - '''size''': '''it is a small turtle'''
        - '''shape''': '''it is a turtle'''
        - '''body pattern''': '''it is a turtle pokemon'''
        - '''number of limbs''': '''four limbs'''
        - '''eye shape''': '''the eye shape is a squint'''
        - '''eye color''': '''blue'''
        - '''mouth shape''': '''the mouth shape of the pokemon in this image is a snout'''
        - '''tail shape''': '''it is a turtle'''
        - '''number of heads''': '''two heads'''
        - '''number of eyes''': '''two eyes'''
        - '''associated element''': '''a turtle'''
        - '''special markings''': '''the pokemon has a blue shell with a brown head and a brown body with'''
        - '''ear shape''': '''the ear shape is a t'''
        - '''skin texture''': '''the skin texture is smooth and shiny'''
        - '''evolutionary stage''': '''the pokemon in this image is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a t'''
        - '''arm shape''': '''the arm shape is a t'''
        - '''facial expression''': '''a turtle pokemon'''
        - '''unique feature''': '''it is a turtle'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

18: label=5
==============================
Wartortle_18 with label 5
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''blue'''
        - '''size''': '''it is small'''
        - '''shape''': '''a turtle'''
        - '''body pattern''': '''it has a spherical body with a spherical head'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''blue'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''water'''
        - '''special markings''': '''the pokemon has a blue body with a white belly and a blue head'''
        - '''ear shape''': '''a squirtle'''
        - '''skin texture''': '''it is smooth and shiny'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''it is a squirtle'''
        - '''facial expression''': '''a smirk'''
        - '''unique feature''': '''it has a shell'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''yes'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

19it [02:00,  5.90s/it]20it [02:07,  6.12s/it]21it [02:15,  6.87s/it]END==============================

19: label=5
==============================
Wartortle_19 with label 5
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a pokemon that is a turtle'''
        Attributes List:
        - '''color''': '''blue'''
        - '''size''': '''it is a small turtle'''
        - '''shape''': '''it is a turtle'''
        - '''body pattern''': '''it has a blue body with a white belly and a white head'''
        - '''number of limbs''': '''four limbs'''
        - '''eye shape''': '''the eye shape is a squint'''
        - '''eye color''': '''blue'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''it is a squirtle'''
        - '''number of heads''': '''two heads'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a turtle'''
        - '''special markings''': '''the pokemon has a blue body with a white belly and a white head with'''
        - '''ear shape''': '''the ear shape is a t'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a t'''
        - '''arm shape''': '''the arm shape is a t'''
        - '''facial expression''': '''a turtle pokemon'''
        - '''unique feature''': '''it has a shell'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

20: label=5
==============================
Wartortle_20 with label 5
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''person, person, person, person, person, person, person, person, person, person'''
        Attributes List:
        - '''color''': '''blue'''
        - '''size''': '''it is a small pokemon'''
        - '''shape''': '''a turtle'''
        - '''body pattern''': '''a squirtle with a squirtle on its'''
        - '''number of limbs''': '''four limbs'''
        - '''eye shape''': '''a person'''
        - '''eye color''': '''blue'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a twig'''
        - '''special markings''': '''the pokemon has a squirtle on its back, and a'''
        - '''ear shape''': '''a squirtle'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''person, person, person, person, person, person, person, person, person, person'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a thigh and a thigh'''
        - '''arm shape''': '''a teddy bear'''
        - '''facial expression''': '''a smile'''
        - '''unique feature''': '''it is a squirtle'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

21: label=8
==============================
Pidgey_21 with label 8
==============================

22it [02:24,  7.36s/it]23it [02:30,  7.03s/it]
        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a bird pokemon'''
        Attributes List:
        - '''color''': '''brown and white'''
        - '''size''': '''it is a small bird'''
        - '''shape''': '''it is a bird'''
        - '''body pattern''': '''it is a bird with a brown body and white head'''
        - '''number of limbs''': '''four limbs'''
        - '''eye shape''': '''the eyes are a squint'''
        - '''eye color''': '''brown eyes'''
        - '''mouth shape''': '''the mouth shape is a slit'''
        - '''tail shape''': '''it is a swan'''
        - '''number of heads''': '''two heads'''
        - '''number of eyes''': '''two eyes'''
        - '''associated element''': '''bird'''
        - '''special markings''': '''the bird has a white crest on its head, and a white wing patch'''
        - '''ear shape''': '''the ear shape is a triangle'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''the pokemon in this image is a snorlax'''
        - '''number of wings''': '''two wings'''
        - '''leg shape''': '''the leg shape is a squirtle'''
        - '''arm shape''': '''the arm shape is a wing'''
        - '''facial expression''': '''a bird pokemon'''
        - '''unique feature''': '''it has a beak'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

22: label=8
==============================
Pidgey_22 with label 8
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a sylveon'''
        Attributes List:
        - '''color''': '''brown and white'''
        - '''size''': '''it is a medium size'''
        - '''shape''': '''a bird'''
        - '''body pattern''': '''it is a bird with a brown body and a white head'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a hawk'''
        - '''eye color''': '''brown'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a swan'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a bird'''
        - '''special markings''': '''the pokemon has a brown body with a white head and a brown tail'''
        - '''ear shape''': '''a spherical shape'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''a sylveon'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a squirtle'''
        - '''arm shape''': '''it is a swan'''
        - '''facial expression''': '''a hawk'''
        - '''unique feature''': '''it has a long neck'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

23: label=8
==============================
Pidgey_23 with label 8
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a bird'''
        Attributes List:
        - '''color''': '''brown and white'''
        - '''size''': '''it is a medium size'''
        - '''shape''': '''a bird'''
        - '''body pattern''': '''it is a bird'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a hawk'''
        - '''eye color''': '''brown'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a swan'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a bird'''
        - '''special markings''': '''the bird has a white crest on its head'''
        - '''ear shape''': '''a spherical shape'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''a sylveon'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a squirtle'''
        - '''arm shape''': '''it is a swan'''
        - '''facial expression''': '''a bird with a smirk'''
        - '''unique feature''': '''it is a bird'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

24it [02:36,  6.64s/it]25it [02:42,  6.55s/it]26it [02:48,  6.30s/it]END==============================

24: label=0
==============================
Bulbasaur_24 with label 0
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''green'''
        - '''size''': '''it is small'''
        - '''shape''': '''it is a green and red pokemon'''
        - '''body pattern''': '''a green body with a red head and a red tail'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''green'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a pokemon'''
        - '''special markings''': '''the pokemon has a green body with a red nose and eyes'''
        - '''ear shape''': '''a frog'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a thigh shape'''
        - '''arm shape''': '''the arms are shaped like a t'''
        - '''facial expression''': '''a smile'''
        - '''unique feature''': '''it has a green body and red eyes'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

25: label=0
==============================
Bulbasaur_25 with label 0
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''blue'''
        - '''size''': '''it is small'''
        - '''shape''': '''a small, green, leafy creature'''
        - '''body pattern''': '''a spherical body with a tail'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''green'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''leaf'''
        - '''special markings''': '''the pokemon has a green leaf on its back'''
        - '''ear shape''': '''a squirtle'''
        - '''skin texture''': '''smooth'''
        - '''evolutionary stage''': '''a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a squirtle'''
        - '''facial expression''': '''a sad expression'''
        - '''unique feature''': '''it has a leaf on its back'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

26: label=0
==============================
Bulbasaur_26 with label 0
==============================

27it [02:54,  6.36s/it]28it [03:01,  6.42s/it]
        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''green'''
        - '''size''': '''it is small'''
        - '''shape''': '''a small, green, squirtle-like creature'''
        - '''body pattern''': '''a spherical body with a rounded head and a s'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''green'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''grass'''
        - '''special markings''': '''the pokemon has a large green pouch on its back'''
        - '''ear shape''': '''a squirtle'''
        - '''skin texture''': '''a scaly texture'''
        - '''evolutionary stage''': '''a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a squirtle'''
        - '''facial expression''': '''a sad expression'''
        - '''unique feature''': '''it has a backpack'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

27: label=7
==============================
Raichu_27 with label 7
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''pikachu'''
        Attributes List:
        - '''color''': '''yellow'''
        - '''size''': '''it is small'''
        - '''shape''': '''it is a small, yellow, and brown pokemon'''
        - '''body pattern''': '''it has a squirtle tail and a squirt'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''yellow'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a pokemon that is a squirtle'''
        - '''special markings''': '''the pokemon has a yellow body with a black tail and a white t'''
        - '''ear shape''': '''a squiggly tail'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a pikachu'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a t'''
        - '''arm shape''': '''the arm shape is a t'''
        - '''facial expression''': '''a smile'''
        - '''unique feature''': '''it has a tail'''
        - '''body posturetail presence''': '''yes'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

28: label=7
==============================
Raichu_28 with label 7
==============================

29it [03:07,  6.31s/it]30it [03:13,  6.29s/it]30it [03:13,  6.46s/it]

        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''pikachu, person, person, person, person, person, person, person, person'''
        Attributes List:
        - '''color''': '''orange and white'''
        - '''size''': '''it is small'''
        - '''shape''': '''it is a small, yellow, and brown pokemon'''
        - '''body pattern''': '''it is a squirtle'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''yellow'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a pig tail'''
        - '''number of heads''': '''two heads'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a pokemon'''
        - '''special markings''': '''the pokemon has a yellow head, a yellow body, and a yellow tail'''
        - '''ear shape''': '''a squished ear shape'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a pikachu'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a t'''
        - '''arm shape''': '''it is a teddy bear'''
        - '''facial expression''': '''sad'''
        - '''unique feature''': '''it has a horn on its head'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

29: label=7
==============================
Raichu_29 with label 7
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a pikachu'''
        Attributes List:
        - '''color''': '''brown'''
        - '''size''': '''it is small'''
        - '''shape''': '''a small, stubby, snoutlike creature with a long'''
        - '''body pattern''': '''it has a squirtle like pattern on its back'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''brown'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a pig tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a pokemon'''
        - '''special markings''': '''the pokemon has a snout with a horn on it, and'''
        - '''ear shape''': '''a squished ear'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a pikachu'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a thigh and a thigh'''
        - '''arm shape''': '''the arm shape is a t'''
        - '''facial expression''': '''a smirk'''
        - '''unique feature''': '''it has a tail'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''yes'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

Succ. dumped attribute values to ./experiments/pokemon/describe/pokemon_attributes_pairs_3
Succ. dumped LLM prompts  to ./experiments/pokemon/describe/pokemon_llm_prompts_3
Namespace(mode='guess', config_file_env='./configs/env_machine.yml', config_file_expt='./configs/expts/pokemon_all.yml', num_per_category='3')
{'setup': 'ours', 'experiment': 5.0, 'dataset_name': 'pokemon', 'num_classes': 10, 'num_base': 5, 'num_novel': 5, 'seed': 1, 'batch_size': 256, 'clustering_method': 'multi_clip_voting', 'model_size': 'ViT-B/16', 'model_size_vqa': 'FlanT5-XXL', 'model_type_llm': 'gpt-3.5-turbo', 'image_size': 224, 'verbose': False, 'host': 'chaos', 'num_workers': 16, 'device': 'cuda', 'device_count': '1', 'device_id': '0', 'data_dir': './datasets/pokemon', 'expt_dir': './experiments/pokemon', 'expt_dir_describe': './experiments/pokemon/describe', 'path_vqa_questions': './experiments/pokemon/describe/pokemon_vqa_questions', 'path_vqa_answers': './experiments/pokemon/describe/pokemon_attributes_pairs', 'path_llm_prompts': './experiments/pokemon/describe/pokemon_llm_prompts', 'expt_dir_guess': './experiments/pokemon/guess', 'path_llm_replies_raw': './experiments/pokemon/guess/pokemon_llm_replies_raw', 'path_llm_replies_jsoned': './experiments/pokemon/guess/pokemon_llm_replies_jsoned', 'path_llm_gussed_names': './experiments/pokemon/guess/pokemon_llm_gussed_names', 'expt_dir_grouping': './experiments/pokemon/grouping'}
0it [00:00, ?it/s]0it [00:17, ?it/s]
╭───────────────────── Traceback (most recent call last) ──────────────────────╮
│ /home/hdl/miniconda3/envs/finer/lib/python3.9/site-packages/tenacity/__init_ │
│ _.py:382 in __call__                                                         │
│                                                                              │
│   379 │   │   │   do = self.iter(retry_state=retry_state)                    │
│   380 │   │   │   if isinstance(do, DoAttempt):                              │
│   381 │   │   │   │   try:                                                   │
│ ❱ 382 │   │   │   │   │   result = fn(*args, **kwargs)                       │
│   383 │   │   │   │   except BaseException:  # noqa: B902                    │
│   384 │   │   │   │   │   retry_state.set_exception(sys.exc_info())  # type: │
│   385 │   │   │   │   else:                                                  │
│                                                                              │
│ /home/hdl/project/FineR/FineR_0/agents/llm_bot.py:57 in call_gpts            │
│                                                                              │
│    54 │   │   │   max_tokens=max_tokens                                      │
│    55 │   │   )                                                              │
│    56 │   else:                                                              │
│ ❱  57 │   │   response = client.chat.completions.create(                     │
│    58 │   │   │   model=model,                                               │
│    59 │   │   │   messages=chatgpt_messages,                                 │
│    60 │   │   │   temperature=temperature                                    │
│                                                                              │
│ /home/hdl/miniconda3/envs/finer/lib/python3.9/site-packages/openai/_utils/_u │
│ tils.py:287 in wrapper                                                       │
│                                                                              │
│   284 │   │   │   │   │   else:                                              │
│   285 │   │   │   │   │   │   msg = f"Missing required argument: {quote(miss │
│   286 │   │   │   │   raise TypeError(msg)                                   │
│ ❱ 287 │   │   │   return func(*args, **kwargs)                               │
│   288 │   │                                                                  │
│   289 │   │   return wrapper  # type: ignore                                 │
│   290                                                                        │
│                                                                              │
│ /home/hdl/miniconda3/envs/finer/lib/python3.9/site-packages/openai/resources │
│ /chat/completions/completions.py:1147 in create                              │
│                                                                              │
│   1144 │   │   timeout: float | httpx.Timeout | None | NotGiven = NOT_GIVEN, │
│   1145 │   ) -> ChatCompletion | Stream[ChatCompletionChunk]:                │
│   1146 │   │   validate_response_format(response_format)                     │
│ ❱ 1147 │   │   return self._post(                                            │
│   1148 │   │   │   "/chat/completions",                                      │
│   1149 │   │   │   body=maybe_transform(                                     │
│   1150 │   │   │   │   {                                                     │
│                                                                              │
│ /home/hdl/miniconda3/envs/finer/lib/python3.9/site-packages/openai/_base_cli │
│ ent.py:1259 in post                                                          │
│                                                                              │
│   1256 │   │   opts = FinalRequestOptions.construct(                         │
│   1257 │   │   │   method="post", url=path, json_data=body, files=to_httpx_f │
│   1258 │   │   )                                                             │
│ ❱ 1259 │   │   return cast(ResponseT, self.request(cast_to, opts, stream=str │
│   1260 │                                                                     │
│   1261 │   def patch(                                                        │
│   1262 │   │   self,                                                         │
│                                                                              │
│ /home/hdl/miniconda3/envs/finer/lib/python3.9/site-packages/openai/_base_cli │
│ ent.py:1047 in request                                                       │
│                                                                              │
│   1044 │   │   │   │   │   err.response.read()                               │
│   1045 │   │   │   │                                                         │
│   1046 │   │   │   │   log.debug("Re-raising status error")                  │
│ ❱ 1047 │   │   │   │   raise self._make_status_error_from_response(err.respo │
│   1048 │   │   │                                                             │
│   1049 │   │   │   break                                                     │
│   1050                                                                       │
╰──────────────────────────────────────────────────────────────────────────────╯
AuthenticationError: Error code: 401 - {'error': {'message': '无效的sk 
token，请检查token是否正确', 'type': 'error'}}

The above exception was the direct cause of the following exception:

╭───────────────────── Traceback (most recent call last) ──────────────────────╮
│ /home/hdl/project/FineR/FineR_0/discovering.py:394 in <module>               │
│                                                                              │
│   391 │   │   llm_bot = LLMBot(model=cfg['model_type_llm'])                  │
│   392 │   │                                                                  │
│   393 │   │   # run the main program                                         │
│ ❱ 394 │   │   raw_replies, jsoned_replies = main_guess(cfg, llm_bot, reasoni │
│   395 │   │                                                                  │
│   396 │   │   # save LLM replis                                              │
│   397 │   │   dump_json(cfg['path_llm_replies_raw'] + expt_id_suffix, raw_re │
│                                                                              │
│ /home/hdl/project/FineR/FineR_0/discovering.py:170 in main_guess             │
│                                                                              │
│   167 │                                                                      │
│   168 │   # LLM inferring                                                    │
│   169 │   for i, (key, prompt) in tqdm(enumerate(prompt_list.items())):      │
│ ❱ 170 │   │   raw_reply = bot.infer(prompt, temperature=0.9)  # use a high t │
│   171 │   │   used_tokens = bot.get_used_tokens()                            │
│   172 │   │                                                                  │
│   173 │   │   replies_raw[key] = raw_reply                                   │
│                                                                              │
│ /home/hdl/project/FineR/FineR_0/agents/llm_bot.py:119 in infer               │
│                                                                              │
│   116 │   │   return reply, total_prompt, n_tokens                           │
│   117 │                                                                      │
│   118 │   def infer(self, prompt, temperature=0.9):                          │
│ ❱ 119 │   │   reply, _, n_tokens = self.__query(prompt, temperature, max_tok │
│   120 │   │   self.total_tokens += n_tokens                                  │
│   121 │   │   return reply.strip()                                           │
│   122                                                                        │
│                                                                              │
│ /home/hdl/project/FineR/FineR_0/agents/llm_bot.py:109 in __query             │
│                                                                              │
│   106 │                                                                      │
│   107 │   def __query(self, prompt, temperature, max_token):                 │
│   108 │   │   total_prompt = prepare_chatgpt_message(prompt)                 │
│ ❱ 109 │   │   reply, n_tokens = call_gpts(                                   │
│   110 │   │   │   client=self.client,                                        │
│   111 │   │   │   chatgpt_messages=total_prompt,                             │
│   112 │   │   │   temperature=temperature,                                   │
│                                                                              │
│ /home/hdl/miniconda3/envs/finer/lib/python3.9/site-packages/tenacity/__init_ │
│ _.py:289 in wrapped_f                                                        │
│                                                                              │
│   286 │   │                                                                  │
│   287 │   │   @functools.wraps(f)                                            │
│   288 │   │   def wrapped_f(*args: t.Any, **kw: t.Any) -> t.Any:             │
│ ❱ 289 │   │   │   return self(f, *args, **kw)                                │
│   290 │   │                                                                  │
│   291 │   │   def retry_with(*args: t.Any, **kwargs: t.Any) -> WrappedFn:    │
│   292 │   │   │   return self.copy(*args, **kwargs).wraps(f)                 │
│                                                                              │
│ /home/hdl/miniconda3/envs/finer/lib/python3.9/site-packages/tenacity/__init_ │
│ _.py:379 in __call__                                                         │
│                                                                              │
│   376 │   │                                                                  │
│   377 │   │   retry_state = RetryCallState(retry_object=self, fn=fn, args=ar │
│   378 │   │   while True:                                                    │
│ ❱ 379 │   │   │   do = self.iter(retry_state=retry_state)                    │
│   380 │   │   │   if isinstance(do, DoAttempt):                              │
│   381 │   │   │   │   try:                                                   │
│   382 │   │   │   │   │   result = fn(*args, **kwargs)                       │
│                                                                              │
│ /home/hdl/miniconda3/envs/finer/lib/python3.9/site-packages/tenacity/__init_ │
│ _.py:326 in iter                                                             │
│                                                                              │
│   323 │   │   │   retry_exc = self.retry_error_cls(fut)                      │
│   324 │   │   │   if self.reraise:                                           │
│   325 │   │   │   │   raise retry_exc.reraise()                              │
│ ❱ 326 │   │   │   raise retry_exc from fut.exception()                       │
│   327 │   │                                                                  │
│   328 │   │   if self.wait:                                                  │
│   329 │   │   │   sleep = self.wait(retry_state)                             │
╰──────────────────────────────────────────────────────────────────────────────╯
RetryError: RetryError[<Future at 0x7a65ec3d3850 state=finished raised 
AuthenticationError>]
Namespace(mode='postprocess', config_file_env='./configs/env_machine.yml', config_file_expt='./configs/expts/pokemon_all.yml', num_per_category='3')
{'setup': 'ours', 'experiment': 5.0, 'dataset_name': 'pokemon', 'num_classes': 10, 'num_base': 5, 'num_novel': 5, 'seed': 1, 'batch_size': 256, 'clustering_method': 'multi_clip_voting', 'model_size': 'ViT-B/16', 'model_size_vqa': 'FlanT5-XXL', 'model_type_llm': 'gpt-3.5-turbo', 'image_size': 224, 'verbose': False, 'host': 'chaos', 'num_workers': 16, 'device': 'cuda', 'device_count': '1', 'device_id': '0', 'data_dir': './datasets/pokemon', 'expt_dir': './experiments/pokemon', 'expt_dir_describe': './experiments/pokemon/describe', 'path_vqa_questions': './experiments/pokemon/describe/pokemon_vqa_questions', 'path_vqa_answers': './experiments/pokemon/describe/pokemon_attributes_pairs', 'path_llm_prompts': './experiments/pokemon/describe/pokemon_llm_prompts', 'expt_dir_guess': './experiments/pokemon/guess', 'path_llm_replies_raw': './experiments/pokemon/guess/pokemon_llm_replies_raw', 'path_llm_replies_jsoned': './experiments/pokemon/guess/pokemon_llm_replies_jsoned', 'path_llm_gussed_names': './experiments/pokemon/guess/pokemon_llm_gussed_names', 'expt_dir_grouping': './experiments/pokemon/grouping'}
Charmander_0
{
    "Squirtle": [
        "Squirtle is a small, orange Pokemon with a stubby, snout-like creature.",
        "It has a spherical body with a spherical head and four limbs.",
        "The Pokemon has a squint eye shape and orange eyes.",
        "Its mouth shape is a slit and it has a stubby tail.",
        "Squirtle has two heads and two eyes."
    ],
    "Charmander": [
        "Squirtle is a small, orange Pokemon with a stubby, snout-like creature.",
        "It has a spherical body with a spherical head and four limbs.",
        "The Pokemon has a squint eye shape and orange eyes.",
        "Its mouth shape is a slit and it has a stubby tail.",
        "Squirtle has two heads and two eyes."
    ],
    "Cyndaquil": [
        "Squirtle is a small, orange Pokemon with a stubby, snout-like creature.",
        "It has a spherical body with a spherical head and four limbs.",
        "The Pokemon has a squint eye shape and orange eyes.",
        "Its mouth shape is a slit and it has a stubby tail.",
        "Squirtle has two heads and two eyes."
    ]
}


Charmander_1
{
    "Squirtle": [
        "This pokemon is a small orange creature with a scaly, stubby, snout-like head, two heads, and two squinty orange eyes.",
        "It has a small, lizard-like body with a tail, four limbs, and smooth skin texture.",
        "The special markings of this pokemon are a bright red nose and a yellow tummy.",
        "Its mouth is in the shape of a snout and its ears resemble those of a frog.",
        "It is associated with the fire element and has a smile as its facial expression."
    ],
    "Charmander": [
        "This pokemon is a small orange creature with a scaly, stubby, snout-like head, two heads, and two squinty orange eyes.",
        "It has a small, lizard-like body with a tail, four limbs, and smooth skin texture.",
        "The special markings of this pokemon are a bright red nose and a yellow tummy.",
        "Its mouth is in the shape of a snout and its ears resemble those of a frog.",
        "It is associated with the fire element and has a smile as its facial expression."
    ],
    "Charmeleon": [
        "This pokemon is a small orange creature with a scaly, stubby, snout-like head, two heads, and two squinty orange eyes.",
        "It has a small, lizard-like body with a tail, four limbs, and smooth skin texture.",
        "The special markings of this pokemon are a bright red nose and a yellow tummy.",
        "Its mouth is in the shape of a snout and its ears resemble those of a frog.",
        "It is associated with the fire element and has a smile as its facial expression."
    ]
}


Charmander_2
{
  "Squirtle": [
    "A squirtle is a small, round, and stubby pokemon with a brown color.",
    "It has a spherical head and body with a white belly and blue tummy.",
    "This pokemon has four limbs in a T shape and two heads with squinty blue eyes and a slit mouth.",
    "It also has a stubby tail and a spherical shape ear.",
    "The skin is smooth and it has a flame on its head."
  ],
  "Wartortle": [
    "A squirtle is a small, round, and stubby pokemon with a brown color.",
    "It has a spherical head and body with a white belly and blue tummy.",
    "This pokemon has four limbs in a T shape and two heads with squinty blue eyes and a slit mouth.",
    "It also has a stubby tail and a spherical shape ear.",
    "The skin is smooth and it has a flame on its head."
  ],
  "Blastoise": [
    "A squirtle is a small, round, and stubby pokemon with a brown color.",
    "It has a spherical head and body with a white belly and blue tummy.",
    "This pokemon has four limbs in a T shape and two heads with squinty blue eyes and a slit mouth.",
    "It also has a stubby tail and a spherical shape ear.",
    "The skin is smooth and it has a flame on its head."
  ]
}


Pidgey_3
{
    "Swellow": [
        "The Pokemon in the image is a bird with a brown and white body pattern.",
        "It is small in size and has a beak.",
        "It has a white crest on its head and a white wing patch.",
        "It has two heads and two eyes with a squint shape.",
        "The Pokemon has four limbs, two wings, and a tail shaped like a swan."
    ],
    "Pidgeot": [
        "The Pokemon in the image is a bird with a brown and white body pattern.",
        "It is small in size and has a beak.",
        "It has a white crest on its head and a white wing patch.",
        "It has two heads and two eyes with a squint shape.",
        "The Pokemon has four limbs, two wings, and a tail shaped like a swan."
    ],
    "Staraptor": [
        "The Pokemon in the image is a bird with a brown and white body pattern.",
        "It is small in size and has a beak.",
        "It has a white crest on its head and a white wing patch.",
        "It has two heads and two eyes with a squint shape.",
        "The Pokemon has four limbs, two wings, and a tail shaped like a swan."
    ]
}


Pidgey_4
{
  "Crestwing": [
    "This is a medium-sized bird with a brown head and a white belly.",
    "It has four limbs and two heads with two eyes each.",
    "The bird has a hawk-like eye shape and brown eyes.",
    "It has a slit-shaped mouth and a tail resembling that of a swan.",
    "The bird has a unique white crest on its head and a spherical ear shape."
  ],
  "Swaneye": [
    "This is a medium-sized bird with a brown head and a white belly.",
    "It has four limbs and two heads with two eyes each.",
    "The bird has a hawk-like eye shape and brown eyes.",
    "It has a slit-shaped mouth and a tail resembling that of a swan.",
    "The bird has a unique white crest on its head and a spherical ear shape."
  ],
  "Hawkbeak": [
    "This is a medium-sized bird with a brown head and a white belly.",
    "It has four limbs and two heads with two eyes each.",
    "The bird has a hawk-like eye shape and brown eyes.",
    "It has a slit-shaped mouth and a tail resembling that of a swan.",
    "The bird has a unique white crest on its head and a spherical ear shape."
  ]
}


Pidgey_5
{
    "Sylveon": [
        "A Sylveon is a medium-sized bird-like Pokemon with brown and white feathers.",
        "Its body is covered in brown feathers with a white head and a red beak.",
        "The Pokemon has two heads and two eyes, which are brown and shaped like a hawk.",
        "It has a spherical-shaped ear and a scaly skin texture.",
        "The Sylveon has a unique feature of a long neck and two wings."
    ],
    "Hawkwing": [
        "A Sylveon is a medium-sized bird-like Pokemon with brown and white feathers.",
        "Its body is covered in brown feathers with a white head and a red beak.",
        "The Pokemon has two heads and two eyes, which are brown and shaped like a hawk.",
        "It has a spherical-shaped ear and a scaly skin texture.",
        "The Sylveon has a unique feature of a long neck and two wings."
    ],
    "Swanbeak": [
        "A Sylveon is a medium-sized bird-like Pokemon with brown and white feathers.",
        "Its body is covered in brown feathers with a white head and a red beak.",
        "The Pokemon has two heads and two eyes, which are brown and shaped like a hawk.",
        "It has a spherical-shaped ear and a scaly skin texture.",
        "The Sylveon has a unique feature of a long neck and two wings."
    ]
}


Pidgeotto_6
{
    "Sylveon": [
        "This image features a Pokemon called Sylveon, which is a bird-like creature with a medium size.",
        "It has a tan body with a red head and wings, and it is characterized by its brown and pink coloration.",
        "Sylveon has a unique shape with a long neck, long tail, and a swan-like tail.",
        "It has four limbs and two heads with squinty pink eyes.",
        "The Pokemon has a slit mouth and a spherical ear shape."
    ],
    "Birdor": [
        "This image features a Pokemon called Birdor, which is a bird-like creature with a medium size.",
        "It has a tan body with a red head and wings, and it is characterized by its brown and pink coloration.",
        "Birdor has a unique shape with a long neck, long tail, and a swan-like tail.",
        "It has four limbs and two heads with squinty pink eyes.",
        "The Pokemon has a slit mouth and a spherical ear shape."
    ],
    "Swanwing": [
        "This image features a Pokemon called Swanwing, which is a bird-like creature with a medium size.",
        "It has a tan body with a red head and wings, and it is characterized by its brown and pink coloration.",
        "Swanwing has a unique shape with a long neck, long tail, and a swan-like tail.",
        "It has four limbs and two heads with squinty pink eyes.",
        "The Pokemon has a slit mouth and a spherical ear shape."
    ]
}


Pidgeotto_7
{
    "Sylveon": [
        "Sylveon is a medium-sized bird-like Pokémon with a pink and brown coloration. It has a brown body with a yellow head and wings.",
        "The Pokémon has four limbs, two heads, and two eyes with a hawk-like shape. Its eye color is brown, and its mouth has a slit shape.",
        "The tail resembles that of a swan. It has a special marking of a red and yellow crest on its head, along with a white ear shape similar to a swan.",
        "Sylveon's skin texture is smooth. It is in the evolutionary stage of being a Sandslash.",
        "It has two wings and legs shaped like a Squirtle. Its arms have a wing-like shape. The Pokémon has a smug facial expression and a unique feature of wings."
    ],
    "Sandslash": [
        "Sylveon is in the evolutionary stage of being a Sandslash. Its coloration is pink and brown, and its size is medium.",
        "It has a brown body with a yellow head and wings. The Pokémon has four limbs, two heads, and two eyes with a hawk-like shape.",
        "The eye color is brown, and the mouth has a slit shape. The tail resembles that of a swan.",
        "Sylveon has a special marking of a red and yellow crest on its head, along with a white ear shape similar to a swan. Its skin texture is smooth.",
        "It has two wings and legs shaped like a Squirtle. Its arms have a wing-like shape. The Pokémon has a smug facial expression and a unique feature of wings."
    ],
    "Swanslash": [
        "Sylveon resembles a bird, particularly a swan, with its medium size and pink and brown coloration.",
        "Its brown body has a yellow head and wings. The Pokémon has four limbs, two heads, and two eyes with a hawk-like shape.",
        "The eye color is brown, and the mouth has a slit shape. The tail is shaped like that of a swan.",
        "Sylveon has a special marking of a red and yellow crest on its head, along with a white ear shape similar to a swan. Its skin texture is smooth.",
        "It has two wings and legs shaped like a Squirtle. Its arms have a wing-like shape. The Pokémon has a smug facial expression and a unique feature of wings."
    ]
}


Pidgeotto_8
{
  "Squirtle": [
    "The image shows a pokemon resembling a squirtle with a brown body and a red head.",
    "It has a small size and a bird-like shape.",
    "The pokemon has hawk-shaped red eyes and a slit-shaped mouth.",
    "It has a swan-like tail and two heads, with two eyes on each head.",
    "The pokemon is associated with the bird element and has a special marking of a red hat with a white crest on its head."
  ],
  "Redhat": [
    "The image shows a pokemon resembling a squirtle with a brown body and a red head.",
    "It has a small size and a bird-like shape.",
    "The pokemon has hawk-shaped red eyes and a slit-shaped mouth.",
    "It has a swan-like tail and two heads, with two eyes on each head.",
    "The pokemon is associated with the bird element and has a special marking of a red hat with a white crest on its head."
  ],
  "Crestspike": [
    "The image shows a pokemon resembling a squirtle with a brown body and a red head.",
    "It has a small size and a bird-like shape.",
    "The pokemon has hawk-shaped red eyes and a slit-shaped mouth.",
    "It has a swan-like tail and two heads, with two eyes on each head.",
    "The pokemon is associated with the bird element and has a special marking of a red hat with a white crest on its head."
  ]
}


Charmeleon_9
{
    "Flamizard": [
        "The image shows a small red fire type pokemon with a red and white striped body, black belly, and a flame on its head.",
        "It has a sad expression with squint-shaped red eyes and a slit-shaped mouth.",
        "The pokemon has two heads, two eyes, and four limbs.",
        "It has a stubby tail with a curved tip and no presence of fins, horns, or crests.",
        "The unique features include slanted triangle-shaped ears, a red scaly skin, and a spike on its body."
    ],
    "Lizardflare": [
        "The image shows a small red fire type pokemon with a red and white striped body, black belly, and a flame on its head.",
        "It has a sad expression with squint-shaped red eyes and a slit-shaped mouth.",
        "The pokemon has two heads, two eyes, and four limbs.",
        "It has a stubby tail with a curved tip and no presence of fins, horns, or crests.",
        "The unique features include slanted triangle-shaped ears, a red scaly skin, and a spike on its body."
    ],
    "Ignisaur": [
        "The image shows a small red fire type pokemon with a red and white striped body, black belly, and a flame on its head.",
        "It has a sad expression with squint-shaped red eyes and a slit-shaped mouth.",
        "The pokemon has two heads, two eyes, and four limbs.",
        "It has a stubby tail with a curved tip and no presence of fins, horns, or crests.",
        "The unique features include slanted triangle-shaped ears, a red scaly skin, and a spike on its body."
    ]
}


Charmeleon_10
{
    "Squirtle": [
        "The pokemon in the image is a small, red-colored creature that resembles a lizard.",
        "It has a tiger-like pattern on its body and a red tummy with a white belly.",
        "With four limbs and two heads, it has squinted red eyes and a snout-like mouth.",
        "Its tail is slanted and resembles a tadpole.",
        "This pokemon is associated with the fire element and has the ability of a fire-type."
    ],
    "Charmander": [
        "The pokemon in the image is a small, red-colored creature that resembles a lizard.",
        "It has a tiger-like pattern on its body and a red tummy with a white belly.",
        "With four limbs and two heads, it has squinted red eyes and a snout-like mouth.",
        "Its tail is slanted and resembles a tadpole.",
        "This pokemon is associated with the fire element and has the ability of a fire-type."
    ],
    "Charizard": [
        "The pokemon in the image is a small, red-colored creature that resembles a lizard.",
        "It has a tiger-like pattern on its body and a red tummy with a white belly.",
        "With four limbs and two heads, it has squinted red eyes and a snout-like mouth.",
        "Its tail is slanted and resembles a tadpole.",
        "This pokemon is associated with the fire element and has the ability of a fire-type."
    ]
}


Charmeleon_11
{
    "Squirtle": [
        "A squirtle is a small, red and yellow pokemon with a red body, white belly, and white tail.",
        "It has four limbs, two heads, and two eyes that are squint and red in color.",
        "The pokemon has a slit mouth and a stubby tail with a curved tip.",
        "It is associated with the fire element and has special markings on its body.",
        "The squirtle has a triangular ear shape, smooth skin texture, and a smirk facial expression."
    ],
    "Charmeleon": [
        "A squirtle is a small, red and yellow pokemon with a red body, white belly, and white tail.",
        "It has four limbs, two heads, and two eyes that are squint and red in color.",
        "The pokemon has a slit mouth and a stubby tail with a curved tip.",
        "It is associated with the fire element and has special markings on its body.",
        "The squirtle has a triangular ear shape, smooth skin texture, and a smirk facial expression."
    ],
    "Charizard": [
        "A squirtle is a small, red and yellow pokemon with a red body, white belly, and white tail.",
        "It has four limbs, two heads, and two eyes that are squint and red in color.",
        "The pokemon has a slit mouth and a stubby tail with a curved tip.",
        "It is associated with the fire element and has special markings on its body.",
        "The squirtle has a triangular ear shape, smooth skin texture, and a smirk facial expression."
    ]
}


Squirtle_12
{
    "Squirtle": [
        "This is a small turtle-like pokemon called Squirtle.",
        "It has a blue body with a yellow head and a yellow tail.",
        "The pokemon has a sad expression with squinted blue eyes and a slit mouth.",
        "It has four limbs and two heads with two blue eyes.",
        "Squirtle is associated with the element of sand and has a smooth skin texture."
    ],
    "Wartortle": [
        "This is a small turtle-like pokemon called Wartortle.",
        "It has a blue body with a yellow head and a yellow tail.",
        "The pokemon has a sad expression with squinted blue eyes and a slit mouth.",
        "It has four limbs and two heads with two blue eyes.",
        "Wartortle is associated with the element of sand and has a smooth skin texture."
    ],
    "Blastoise": [
        "This is a small turtle-like pokemon called Blastoise.",
        "It has a blue body with a yellow head and a yellow tail.",
        "The pokemon has a sad expression with squinted blue eyes and a slit mouth.",
        "It has four limbs and two heads with two blue eyes.",
        "Blastoise is associated with the element of sand and has a smooth skin texture."
    ]
}


Squirtle_13
{
    "Squirtle": [
        "Squirtle is a small, blue turtle-like Pokémon with a smooth skin texture.",
        "It has a squint eye shape and blue eyes.",
        "The mouth is in the form of a snout.",
        "Squirtle has a unique body pattern that resembles a squirtle.",
        "It has four limbs, a tail, and two heads."
    ],
    "Wartortle": [
        "Wartortle evolves from Squirtle and is a larger, more powerful water-type Pokémon.",
        "It retains the same blue color and turtle-like shape.",
        "Wartortle has evolved to have a larger body size and more defined limbs.",
        "It still has a snout-shaped mouth and two squint eyes.",
        "The special markings on Wartortle include a darker blue tail and the presence of a spike on its back."
    ],
    "Blastoise": [
        "Blastoise is the final evolution stage of Squirtle, following Wartortle.",
        "It is a larger, more heavily built Pokémon with a dark blue color.",
        "Blastoise has a more pronounced turtle shape and a distinctive cannon-like structure on its back.",
        "It has two heads, a snout-shaped mouth, and blue eyes.",
        "The special markings of Blastoise include water cannons on its shell and a spike on its back."
    ]
}


Squirtle_14
{
    "Squirtle": [
        "This is a blue turtle with a small size and a smooth skin texture.",
        "It has a squint eye shape and blue eyes.",
        "The mouth shape is a slit and it has a turtle-shaped body with a tail.",
        "It has two heads and two limbs.",
        "The pokemon is a squirtle in its evolutionary stage."
    ],
    "Wartortle": [
        "This is a blue turtle with a small size and a smooth skin texture.",
        "It has a squint eye shape and blue eyes.",
        "The mouth shape is a slit and it has a turtle-shaped body with a tail.",
        "It has two heads and two limbs.",
        "The pokemon is a squirtle in its evolutionary stage."
    ],
    "Blastoise": [
        "This is a blue turtle with a small size and a smooth skin texture.",
        "It has a squint eye shape and blue eyes.",
        "The mouth shape is a slit and it has a turtle-shaped body with a tail.",
        "It has two heads and two limbs.",
        "The pokemon is a squirtle in its evolutionary stage."
    ]
}


Bulbasaur_15
{
    "Squirtle": [
        "A squirtle is a small and green pokemon with a red head and tail.",
        "It has four limbs and a squinty green eyes.",
        "The mouth is in a slit shape and the unique feature of this pokemon is its green body with red eyes.",
        "It has two heads and two eyes.",
        "The skin texture of the squirtle is smooth and it is at the evolutionary stage of being a squirtle."
    ],
    "Greened": [
        "A squirtle is a small and green pokemon with a red head and tail.",
        "It has four limbs and a squinty green eyes.",
        "The mouth is in a slit shape and the unique feature of this pokemon is its green body with red eyes.",
        "It has two heads and two eyes.",
        "The skin texture of the squirtle is smooth and it is at the evolutionary stage of being a squirtle."
    ],
    "Frogleaf": [
        "A squirtle is a small and green pokemon with a red head and tail.",
        "It has four limbs and a squinty green eyes.",
        "The mouth is in a slit shape and the unique feature of this pokemon is its green body with red eyes.",
        "It has two heads and two eyes.",
        "The skin texture of the squirtle is smooth and it is at the evolutionary stage of being a squirtle."
    ]
}


Bulbasaur_16
{
    "Squirtle": [
        "Squirtle is a small, green, leafy creature with a sad expression.",
        "It has a leaf on its back and is associated with the grass element.",
        "It has four limbs, two heads, and two eyes which are squinted and green in color.",
        "Squirtle has a smooth skin texture and its body shape resembles a squirtle.",
        "It does not have wings, fins, or horns, but it does have a spike on its back."
    ],
    "Greenleaf": [
        "Greenleaf is a small, green, leafy creature with a sad expression.",
        "It has a leaf on its back and is associated with the grass element.",
        "It has four limbs, two heads, and two eyes which are squinted and green in color.",
        "Greenleaf has a smooth skin texture and its body shape resembles a squirtle.",
        "It does not have wings, fins, or horns, but it does have a spike on its back."
    ],
    "Leafurtle": [
        "Leafurtle is a small, green, leafy creature with a sad expression.",
        "It has a leaf on its back and is associated with the grass element.",
        "It has four limbs, two heads, and two eyes which are squinted and green in color.",
        "Leafurtle has a smooth skin texture and its body shape resembles a squirtle.",
        "It does not have wings, fins, or horns, but it does have a spike on its back."
    ]
}


Bulbasaur_17
{
    "Squirtle": [
        "This image shows a small, green Pokemon called Squirtle.",
        "It has a spherical body with a rounded head and two squinty green eyes.",
        "The Pokemon has a sad facial expression and its mouth is in the shape of a slit.",
        "It has four limbs, each ending in a Squirtle-like shape.",
        "Squirtle has a unique feature, which is a backpack-like pouch on its back."
    ],
    "Squirtle-like creature": [
        "This image shows a small, green Pokemon called Squirtle-like creature.",
        "It has a spherical body with a rounded head and two squinty green eyes.",
        "The Pokemon has a sad facial expression and its mouth is in the shape of a slit.",
        "It has four limbs, each ending in a Squirtle-like shape.",
        "Squirtle-like creature has a unique feature, which is a backpack-like pouch on its back."
    ],
    "Green Pokemon": [
        "This image shows a small, green Pokemon called Green Pokemon.",
        "It has a spherical body with a rounded head and two squinty green eyes.",
        "The Pokemon has a sad facial expression and its mouth is in the shape of a slit.",
        "It has four limbs, each ending in a Squirtle-like shape.",
        "Green Pokemon has a unique feature, which is a backpack-like pouch on its back."
    ]
}


Raichu_18
{
    "Pikachu": [
        "This image shows a small, yellow pokemon called Pikachu.",
        "It has a Squirtle-like tail and a snout, and its body has special markings with a yellow color, a black tail, and a white t.",
        "Pikachu has a squint eye shape with yellow eyes and a smiley facial expression.",
        "It has two heads, two eyes, and four limbs, with a small and smooth skin texture.",
        "Pikachu is associated with the water element and has a unique feature of having a tail."
    ],
    "Pichu": [
        "This image shows a small, yellow pokemon called Pichu.",
        "It has a Squirtle-like tail and a snout, and its body has special markings with a yellow color, a black tail, and a white t.",
        "Pichu has a squint eye shape with yellow eyes and a smiley facial expression.",
        "It has two heads, two eyes, and four limbs, with a small and smooth skin texture.",
        "Pichu is associated with the water element and has a unique feature of having a tail."
    ],
    "Raichu": [
        "This image shows a small, yellow pokemon called Raichu.",
        "It has a Squirtle-like tail and a snout, and its body has special markings with a yellow color, a black tail, and a white t.",
        "Raichu has a squint eye shape with yellow eyes and a smiley facial expression.",
        "It has two heads, two eyes, and four limbs, with a small and smooth skin texture.",
        "Raichu is associated with the water element and has a unique feature of having a tail."
    ]
}


Raichu_19
{
    "PikaHorn": [
        "This image shows a small, brown pikachu with a snout-like shape and a pigtail tail.",
        "It has a squirtle-like pattern on its back.",
        "The pikachu has four limbs and two heads, with two squinty brown eyes and a slit mouth.",
        "It has a unique feature of a horn on its snout and a sad expression.",
        "The skin texture is smooth, and it is in the evolutionary stage of a pikachu."
    ],
    "Squirtchu": [
        "This image shows a small, brown pikachu with a snout-like shape and a pigtail tail.",
        "It has a squirtle-like pattern on its back.",
        "The pikachu has four limbs and two heads, with two squinty brown eyes and a slit mouth.",
        "It has a unique feature of a horn on its snout and a sad expression.",
        "The skin texture is smooth, and it is in the evolutionary stage of a pikachu."
    ],
    "Sadtail Pikachu": [
        "This image shows a small, brown pikachu with a snout-like shape and a pigtail tail.",
        "It has a squirtle-like pattern on its back.",
        "The pikachu has four limbs and two heads, with two squinty brown eyes and a slit mouth.",
        "It has a unique feature of a horn on its snout and a sad expression.",
        "The skin texture is smooth, and it is in the evolutionary stage of a pikachu."
    ]
}


Raichu_20
{
    "Pikachu": [
        "This is a small, orange and white Pokemon called Pikachu.",
        "It has a yellow body, a yellow head, and a yellow tail.",
        "It has two heads and two eyes, with a squint eye shape and yellow eye color.",
        "Pikachu has a small size and a smooth skin texture.",
        "It has a unique feature of a horn."
    ],
    "Pika": [
        "This is a small, orange and white Pokemon called Pikachu.",
        "It has a yellow body, a yellow head, and a yellow tail.",
        "It has two heads and two eyes, with a squint eye shape and yellow eye color.",
        "Pikachu has a small size and a smooth skin texture.",
        "It has a unique feature of a horn."
    ],
    "Sparkachu": [
        "This is a small, orange and white Pokemon called Pikachu.",
        "It has a yellow body, a yellow head, and a yellow tail.",
        "It has two heads and two eyes, with a squint eye shape and yellow eye color.",
        "Pikachu has a small size and a smooth skin texture.",
        "It has a unique feature of a horn."
    ]
}


Wartortle_21
{
  "Squirtle": [
    "A squirtle is a small-sized turtle-like Pokemon with a blue body and a white belly.",
    "It has a blue head with a squint-shaped blue eyes and a slit-like mouth.",
    "The Pokemon has two heads and four limbs.",
    "It is associated with the water element and has a tail shaped like a squirtle.",
    "It has smooth and shiny skin and a unique feature of having a shell."
  ],
  "Wartortle": [
    "A squirtle is a small-sized turtle-like Pokemon with a blue body and a white belly.",
    "It has a blue head with a squint-shaped blue eyes and a slit-like mouth.",
    "The Pokemon has two heads and four limbs.",
    "It is associated with the water element and has a tail shaped like a squirtle.",
    "It has smooth and shiny skin and a unique feature of having a shell."
  ],
  "Blastoise": [
    "A squirtle is a small-sized turtle-like Pokemon with a blue body and a white belly.",
    "It has a blue head with a squint-shaped blue eyes and a slit-like mouth.",
    "The Pokemon has two heads and four limbs.",
    "It is associated with the water element and has a tail shaped like a squirtle.",
    "It has smooth and shiny skin and a unique feature of having a shell."
  ]
}


Wartortle_22
{
   "Squirturtle": [
      "The pokemon in the image is a small, blue turtle-like creature with a squirtle pattern on its body.",
      "It has four limbs and two heads with squinted blue eyes and a slit-like mouth.",
      "The pokemon has a fairy element associated with it and special markings in the form of a squirtle on its back and a smooth skin texture.",
      "It is at an early evolutionary stage and does not have any wings, fins, or horns.",
      "Its unique feature is that it is a squirtle. The pokemon has a friendly facial expression with a smile."
   ],
   "Bluetail": [
      "The pokemon in the image is a small, blue turtle-like creature with a squirtle pattern on its body.",
      "It has four limbs and two heads with squinted blue eyes and a slit-like mouth.",
      "The pokemon has a fairy element associated with it and special markings in the form of a squirtle on its back and a smooth skin texture.",
      "It is at an early evolutionary stage and does not have any wings, fins, or horns.",
      "Its unique feature is that it is a squirtle. The pokemon has a friendly facial expression with a smile."
   ],
   "Fairesquirt": [
      "The pokemon in the image is a small, blue turtle-like creature with a squirtle pattern on its body.",
      "It has four limbs and two heads with squinted blue eyes and a slit-like mouth.",
      "The pokemon has a fairy element associated with it and special markings in the form of a squirtle on its back and a smooth skin texture.",
      "It is at an early evolutionary stage and does not have any wings, fins, or horns.",
      "Its unique feature is that it is a squirtle. The pokemon has a friendly facial expression with a smile."
   ]
}


Wartortle_23
{
    "Squirtle": [
        "This is a small, blue turtle-like pokemon with a white belly and head.",
        "It has four limbs that are shaped like a turtle's arms and a tail shaped like a squirtle.",
        "It has two heads and two blue squint-shaped eyes.",
        "The pokemon has a sad facial expression and a slit mouth.",
        "Its ears are in the shape of a 't' and it doesn't have any fins, horns, or crests/spikes."
    ],
    "Wartortle": [
        "This is a small, blue turtle-like pokemon with a white belly and head.",
        "It has four limbs that are shaped like a turtle's arms and a tail shaped like a squirtle.",
        "It has two heads and two blue squint-shaped eyes.",
        "The pokemon has a sad facial expression and a slit mouth.",
        "Its ears are in the shape of a 't' and it doesn't have any fins, horns, or crests/spikes."
    ],
    "Blastoise": [
        "This is a small, blue turtle-like pokemon with a white belly and head.",
        "It has four limbs that are shaped like a turtle's arms and a tail shaped like a squirtle.",
        "It has two heads and two blue squint-shaped eyes.",
        "The pokemon has a sad facial expression and a slit mouth.",
        "Its ears are in the shape of a 't' and it doesn't have any fins, horns, or crests/spikes."
    ]
}


Ivysaur_24
{
"Flower Squirtle": [
"A Squirtle with a flower on its head is a small, green Pokemon with a scaly texture.",
"It has a sad facial expression and squinted blue eyes.",
"The Pokemon has four limbs, two heads, and two eyes.",
"It has a slit mouth and a unique feature of a flower on its head.",
"The body pattern of this Squirtle includes a splotch of green on its back."
],
"Greenleaf Squirtle": [
"A Squirtle with a flower on its head is a small, green Pokemon with a scaly texture.",
"It has a sad facial expression and squinted blue eyes.",
"The Pokemon has four limbs, two heads, and two eyes.",
"It has a slit mouth and a unique feature of a flower on its head.",
"The body pattern of this Squirtle includes a splotch of green on its back."
],
"Sadpetal Squirtle": [
"A Squirtle with a flower on its head is a small, green Pokemon with a scaly texture.",
"It has a sad facial expression and squinted blue eyes.",
"The Pokemon has four limbs, two heads, and two eyes.",
"It has a slit mouth and a unique feature of a flower on its head.",
"The body pattern of this Squirtle includes a splotch of green on its back."
]
}


Ivysaur_25
{
    "Squirtle": [
        "This image shows a small blue Pokemon known as Squirtle.",
        "It has a leaf on its back and a body with a green head and a pink tail.",
        "Squirtle has four limbs, two heads, and two eyes.",
        "Its eyes are squinted and blue in color.",
        "The mouth is in the shape of a slit."
    ],
    "Wartortle": [
        "This image shows a small blue Pokemon known as Wartortle.",
        "It has a leaf on its back and a body with a green head and a pink tail.",
        "Wartortle has four limbs, two heads, and two eyes.",
        "Its eyes are squinted and blue in color.",
        "The mouth is in the shape of a slit."
    ],
    "Blastoise": [
        "This image shows a small blue Pokemon known as Blastoise.",
        "It has a leaf on its back and a body with a green head and a pink tail.",
        "Blastoise has four limbs, two heads, and two eyes.",
        "Its eyes are squinted and blue in color.",
        "The mouth is in the shape of a slit."
    ]
}


Ivysaur_26
{
    "Squirtle": [
        "This image is of a small, blue pokemon called Squirtle.",
        "It has a blue and green body pattern with a pink flower on its head.",
        "Squirtle has four limbs, two heads, and two squinty blue eyes.",
        "Its mouth has a slit shape and it has a tail specific to Squirtle.",
        "The pokemon is associated with a flower and has special markings in the form of a flower on its head."
    ],
    "Wartortle": [
        "This image is of a small, blue pokemon called Wartortle.",
        "It has a blue and green body pattern with a pink flower on its head.",
        "Wartortle has four limbs, two heads, and two squinty blue eyes.",
        "Its mouth has a slit shape and it has a tail specific to Wartortle.",
        "The pokemon is associated with a flower and has special markings in the form of a flower on its head."
    ],
    "Blastoise": [
        "This image is of a small, blue pokemon called Blastoise.",
        "It has a blue and green body pattern with a pink flower on its head.",
        "Blastoise has four limbs, two heads, and two squinty blue eyes.",
        "Its mouth has a slit shape and it has a tail specific to Blastoise.",
        "The pokemon is associated with a flower and has special markings in the form of a flower on its head."
    ]
}


Pikachu_27
{
  "Pikachu": [
    "Pikachu is a small, yellow Pokemon with a black nose and black eyes.",
    "It has a squinty eye shape and a slit mouth shape.",
    "The Pokemon has a stubby tail and two heads.",
    "It is associated with the element of electricity.",
    "Pikachu has a unique feature of a yellow head and a smooth skin texture."
  ],
  "Pichu": [
    "Pikachu is a small, yellow Pokemon with a black nose and black eyes.",
    "It has a squinty eye shape and a slit mouth shape.",
    "The Pokemon has a stubby tail and two heads.",
    "It is associated with the element of electricity.",
    "Pikachu has a unique feature of a yellow head and a smooth skin texture."
  ],
  "Raichu": [
    "Pikachu is a small, yellow Pokemon with a black nose and black eyes.",
    "It has a squinty eye shape and a slit mouth shape.",
    "The Pokemon has a stubby tail and two heads.",
    "It is associated with the element of electricity.",
    "Pikachu has a unique feature of a yellow head and a smooth skin texture."
  ]
}


Pikachu_28
{
"pikachu": [
"Summary: Pikachu is a small, yellow Pokémon with a body shape of a small yellow ball.",
"It has a yellow squinty eyes, a slit mouth, and a stubby tail.",
"It has two heads with two eyes each.",
"Pikachu has a smooth and shiny skin texture.",
"It is a unique Pokémon belonging to the evolutionary stage of Pikachu."
],
"Pika": [
"Summary: Pikachu is a small, yellow Pokémon with a body shape of a small yellow ball.",
"It has a yellow squinty eyes, a slit mouth, and a stubby tail.",
"It has two heads with two eyes each.",
"Pikachu has a smooth and shiny skin texture.",
"It is a unique Pokémon belonging to the evolutionary stage of Pikachu."
],
"Electricball": [
"Summary: Pikachu is a small, yellow Pokémon with a body shape of a small yellow ball.",
"It has a yellow squinty eyes, a slit mouth, and a stubby tail.",
"It has two heads with two eyes each.",
"Pikachu has a smooth and shiny skin texture.",
"It is a unique Pokémon belonging to the evolutionary stage of Pikachu."
]
}


Pikachu_29
{
    "Pikachu": [
        "The pokemon in the image is a yellow Pikachu, small in size with a yellow body, black head, and a black tail.",
        "It has four limbs and a squint eye shape with yellow eyes.",
        "The mouth has a slit shape.",
        "The Pikachu has a unique feature of a tail and it is at the evolutionary stage of a Pikachu.",
        "There are no fins, horns, or crests present. The pokemon has a sad facial expression and associated with the element of lightning."
    ],
    "Pichu": [
        "The pokemon in the image is a yellow Pichu, small in size with a yellow body, black head, and a black tail.",
        "It has four limbs and a squint eye shape with yellow eyes.",
        "The mouth has a slit shape.",
        "The Pichu has a unique feature of a tail and it is at an early evolutionary stage.",
        "There are no fins, horns, or crests present. The pokemon has a sad facial expression and associated with the element of lightning."
    ],
    "Raichu": [
        "The pokemon in the image is a yellow Raichu, small in size with a yellow body, black head, and a black tail.",
        "It has four limbs and a squint eye shape with yellow eyes.",
        "The mouth has a slit shape.",
        "The Raichu has a unique feature of a tail and it is at an advanced evolutionary stage.",
        "There are no fins, horns, or crests present. The pokemon has a sad facial expression and associated with the element of lightning."
    ]
}


==============================
		 Finished Post-processing
==============================
		 ---> total discovered names = 47
['Charmeleon', 'Frogleaf', 'Crestspike', 'Sadtail Pikachu', 'Flower Squirtle', 'Ignisaur', 'Greenleaf Squirtle', 'Wartortle', 'Cyndaquil', 'Staraptor', 'pikachu', 'Bluetail', 'Leafurtle', 'Charizard', 'Lizardflare', 'Birdor', 'Blastoise', 'Pichu', 'Raichu', 'Greened', 'Sadpetal Squirtle', 'Hawkwing', 'Squirtchu', 'Charmander', 'Sparkachu', 'Swellow', 'Squirturtle', 'Hawkbeak', 'Pidgeot', 'Crestwing', 'Swaneye', 'Redhat', 'Green Pokemon', 'Pikachu', 'Squirtle-like creature', 'Pika', 'Swanslash', 'Squirtle', 'Sylveon', 'Swanwing', 'Sandslash', 'Flamizard', 'PikaHorn', 'Swanbeak', 'Greenleaf', 'Electricball', 'Fairesquirt']

		 ---> total discovered names = 47
		 ---> number of failure entries = 0
END==============================

Namespace(config_file_env='./configs/env_machine.yml', config_file_expt='./configs/expts/pokemon_all.yml', alpha=0.7, N_tta=10, num_per_category='3', num_runs=10)
Number of GPUs: 1
Device ID: 0 Device Name: NVIDIA RTX A6000
['Charmeleon', 'Frogleaf', 'Crestspike', 'Sadtail Pikachu', 'Flower Squirtle', 'Ignisaur', 'Greenleaf Squirtle', 'Wartortle', 'Cyndaquil', 'Staraptor', 'pikachu', 'Bluetail', 'Leafurtle', 'Charizard', 'Lizardflare', 'Birdor', 'Blastoise', 'Pichu', 'Raichu', 'Greened', 'Sadpetal Squirtle', 'Hawkwing', 'Squirtchu', 'Charmander', 'Sparkachu', 'Swellow', 'Squirturtle', 'Hawkbeak', 'Pidgeot', 'Crestwing', 'Swaneye', 'Redhat', 'Green Pokemon', 'Pikachu', 'Squirtle-like creature', 'Pika', 'Swanslash', 'Squirtle', 'Sylveon', 'Swanwing', 'Sandslash', 'Flamizard', 'PikaHorn', 'Swanbeak', 'Greenleaf', 'Electricball', 'Fairesquirt']
0it [00:00, ?it/s]1it [00:00,  1.84it/s]2it [00:00,  3.33it/s]4it [00:01,  3.72it/s]5it [00:01,  4.17it/s]6it [00:01,  4.00it/s]8it [00:01,  5.21it/s]9it [00:02,  3.84it/s]10it [00:03,  2.63it/s]11it [00:03,  3.12it/s]12it [00:03,  3.07it/s]13it [00:04,  2.61it/s]14it [00:04,  2.20it/s]15it [00:05,  1.87it/s]16it [00:05,  1.96it/s]17it [00:06,  1.88it/s]18it [00:06,  2.02it/s]19it [00:07,  2.23it/s]21it [00:07,  3.34it/s]23it [00:07,  4.44it/s]24it [00:07,  4.14it/s]25it [00:08,  4.75it/s]27it [00:08,  6.61it/s]29it [00:08,  8.15it/s]30it [00:08,  3.54it/s]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:01<00:00,  1.96s/it]100%|██████████| 1/1 [00:02<00:00,  2.07s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.05s/it]100%|██████████| 1/1 [00:02<00:00,  2.15s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.789372444152832


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 71.53846153846153
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 81.95026331016642
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 65.98797952066484


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 78.93724060058594
=========================          END          =========================
0it [00:00, ?it/s]2it [00:00, 19.88it/s]4it [00:00, 12.26it/s]7it [00:00, 16.44it/s]9it [00:00, 16.36it/s]11it [00:00, 16.30it/s]13it [00:00, 16.69it/s]15it [00:00, 15.58it/s]17it [00:01, 15.93it/s]19it [00:01, 16.28it/s]21it [00:01, 17.12it/s]24it [00:01, 18.54it/s]26it [00:01, 18.48it/s]28it [00:01, 18.10it/s]30it [00:01, 17.11it/s]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.06s/it]100%|██████████| 1/1 [00:02<00:00,  2.25s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.32s/it]100%|██████████| 1/1 [00:02<00:00,  2.48s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.7823934555053711


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 72.3076923076923
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 82.44214092823508
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 66.1134328358209


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 78.23934936523438
=========================          END          =========================
0it [00:00, ?it/s]1it [00:00,  5.39it/s]2it [00:00,  3.97it/s]4it [00:01,  3.40it/s]5it [00:01,  2.42it/s]6it [00:02,  2.10it/s]7it [00:03,  1.84it/s]8it [00:03,  1.74it/s]9it [00:03,  2.19it/s]10it [00:04,  2.35it/s]11it [00:04,  2.81it/s]12it [00:04,  2.63it/s]13it [00:05,  3.16it/s]14it [00:05,  3.21it/s]15it [00:05,  2.99it/s]16it [00:06,  3.35it/s]17it [00:06,  3.55it/s]18it [00:06,  3.31it/s]19it [00:07,  2.79it/s]20it [00:07,  3.16it/s]21it [00:07,  2.98it/s]22it [00:07,  3.38it/s]23it [00:08,  3.48it/s]24it [00:08,  3.59it/s]25it [00:08,  3.36it/s]26it [00:08,  3.84it/s]27it [00:09,  4.06it/s]28it [00:09,  4.43it/s]30it [00:09,  5.90it/s]30it [00:09,  3.15it/s]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.50s/it]100%|██████████| 1/1 [00:02<00:00,  2.67s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.60s/it]100%|██████████| 1/1 [00:02<00:00,  2.76s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.7877997756004333


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 70.0
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 81.37838283145075
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 65.03859442769976


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 78.77997589111328
=========================          END          =========================
0it [00:00, ?it/s]1it [00:00,  1.17it/s]2it [00:01,  1.11it/s]3it [00:02,  1.16it/s]4it [00:03,  1.06it/s]5it [00:04,  1.10it/s]6it [00:05,  1.08it/s]7it [00:06,  1.13it/s]8it [00:07,  1.11it/s]9it [00:08,  1.02it/s]10it [00:09,  1.13s/it]11it [00:11,  1.22s/it]12it [00:12,  1.24s/it]13it [00:12,  1.04it/s]14it [00:13,  1.35it/s]15it [00:13,  1.42it/s]16it [00:14,  1.52it/s]17it [00:14,  1.70it/s]18it [00:15,  1.74it/s]19it [00:15,  1.69it/s]20it [00:16,  2.14it/s]21it [00:16,  1.82it/s]22it [00:17,  1.87it/s]23it [00:17,  2.05it/s]24it [00:17,  2.62it/s]25it [00:18,  2.96it/s]26it [00:18,  3.21it/s]28it [00:18,  4.48it/s]29it [00:18,  4.77it/s]30it [00:19,  3.19it/s]30it [00:19,  1.55it/s]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.54s/it]100%|██████████| 1/1 [00:02<00:00,  2.67s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.50s/it]100%|██████████| 1/1 [00:02<00:00,  2.68s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.7855166792869568


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 71.53846153846153
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 82.47900596167906
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 66.20196864746629


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 78.55166625976562
=========================          END          =========================
0it [00:00, ?it/s]1it [00:00,  7.10it/s]2it [00:00,  4.47it/s]4it [00:01,  3.03it/s]5it [00:02,  1.75it/s]6it [00:03,  1.30it/s]7it [00:04,  1.24it/s]8it [00:05,  1.15it/s]9it [00:06,  1.27it/s]10it [00:06,  1.50it/s]11it [00:06,  1.73it/s]12it [00:07,  1.44it/s]13it [00:08,  1.23it/s]14it [00:09,  1.16it/s]15it [00:10,  1.14it/s]16it [00:11,  1.06it/s]17it [00:12,  1.00s/it]18it [00:14,  1.06s/it]19it [00:15,  1.00s/it]20it [00:16,  1.00it/s]21it [00:17,  1.01it/s]22it [00:18,  1.06s/it]23it [00:19,  1.24s/it]24it [00:21,  1.34s/it]25it [00:22,  1.37s/it]26it [00:24,  1.40s/it]27it [00:25,  1.42s/it]28it [00:27,  1.46s/it]29it [00:28,  1.44s/it]30it [00:30,  1.37s/it]30it [00:30,  1.00s/it]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:03<00:00,  3.17s/it]100%|██████████| 1/1 [00:03<00:00,  3.53s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.78s/it]100%|██████████| 1/1 [00:02<00:00,  2.95s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.786565363407135


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 72.3076923076923
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 82.28536165665598
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 66.24465102552752


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 78.65653991699219
=========================          END          =========================
0it [00:00, ?it/s]1it [00:01,  1.48s/it]2it [00:03,  1.74s/it]3it [00:05,  1.79s/it]4it [00:07,  1.96s/it]5it [00:09,  1.83s/it]6it [00:10,  1.79s/it]7it [00:12,  1.69s/it]8it [00:14,  1.73s/it]9it [00:15,  1.71s/it]10it [00:17,  1.68s/it]11it [00:19,  1.72s/it]12it [00:20,  1.75s/it]13it [00:22,  1.76s/it]14it [00:24,  1.80s/it]15it [00:26,  1.77s/it]16it [00:27,  1.72s/it]17it [00:29,  1.70s/it]18it [00:31,  1.68s/it]19it [00:32,  1.61s/it]20it [00:34,  1.68s/it]21it [00:36,  1.81s/it]22it [00:38,  1.89s/it]23it [00:40,  1.88s/it]24it [00:42,  1.86s/it]25it [00:44,  1.85s/it]26it [00:45,  1.81s/it]27it [00:47,  1.78s/it]28it [00:49,  1.77s/it]29it [00:51,  1.78s/it]30it [00:52,  1.74s/it]30it [00:52,  1.76s/it]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:03<00:00,  3.78s/it]100%|██████████| 1/1 [00:03<00:00,  3.99s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:03<00:00,  3.51s/it]100%|██████████| 1/1 [00:03<00:00,  3.64s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.7819525599479675


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 71.53846153846153
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 81.33159445485518
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 65.07581921739774


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 78.19525909423828
=========================          END          =========================
0it [00:00, ?it/s]1it [00:00,  2.47it/s]2it [00:01,  1.82it/s]3it [00:01,  1.94it/s]4it [00:02,  1.59it/s]5it [00:02,  1.77it/s]6it [00:03,  1.80it/s]7it [00:04,  1.43it/s]8it [00:05,  1.24it/s]9it [00:06,  1.14it/s]10it [00:07,  1.10it/s]11it [00:07,  1.29it/s]12it [00:07,  1.75it/s]13it [00:08,  1.46it/s]14it [00:09,  1.27it/s]15it [00:10,  1.18it/s]16it [00:11,  1.14it/s]17it [00:12,  1.11it/s]18it [00:13,  1.06it/s]19it [00:14,  1.00it/s]20it [00:16,  1.03s/it]21it [00:17,  1.06s/it]22it [00:18,  1.01s/it]23it [00:19,  1.01it/s]24it [00:20,  1.09s/it]25it [00:21,  1.13s/it]26it [00:22,  1.08s/it]27it [00:23,  1.11s/it]28it [00:25,  1.20s/it]29it [00:26,  1.24s/it]30it [00:27,  1.25s/it]30it [00:27,  1.08it/s]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:03<00:00,  3.18s/it]100%|██████████| 1/1 [00:03<00:00,  3.40s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.59s/it]100%|██████████| 1/1 [00:02<00:00,  2.76s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.7775742411613464


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 70.0
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 80.91855288838559
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 64.16666666666667


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 77.7574234008789
=========================          END          =========================
0it [00:00, ?it/s]1it [00:00,  9.77it/s]3it [00:00, 14.55it/s]5it [00:00,  8.67it/s]7it [00:00, 10.96it/s]9it [00:00, 12.08it/s]11it [00:00, 12.18it/s]13it [00:01, 13.23it/s]15it [00:01, 12.08it/s]17it [00:01, 13.09it/s]20it [00:01, 14.59it/s]23it [00:01, 16.58it/s]25it [00:01, 16.69it/s]27it [00:02, 13.90it/s]29it [00:02, 12.22it/s]30it [00:02, 12.46it/s]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.81s/it]100%|██████████| 1/1 [00:03<00:00,  3.01s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.61s/it]100%|██████████| 1/1 [00:02<00:00,  2.76s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.7731141448020935


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 69.23076923076923
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 80.29294895083979
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 63.167142543378


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 77.31141662597656
=========================          END          =========================
0it [00:00, ?it/s]2it [00:00, 17.36it/s]4it [00:00,  9.35it/s]7it [00:00, 12.82it/s]9it [00:00, 14.07it/s]12it [00:00, 16.21it/s]14it [00:00, 15.67it/s]16it [00:01, 15.40it/s]18it [00:01, 15.85it/s]20it [00:01, 16.75it/s]23it [00:01, 18.28it/s]25it [00:01, 17.13it/s]27it [00:01, 17.81it/s]30it [00:01, 18.79it/s]30it [00:01, 16.27it/s]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.37s/it]100%|██████████| 1/1 [00:02<00:00,  2.52s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.02s/it]100%|██████████| 1/1 [00:02<00:00,  2.12s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.7787977457046509


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 69.23076923076923
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 79.52636310365648
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 62.59755734286565


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 77.87977600097656
=========================          END          =========================
0it [00:00, ?it/s]3it [00:00, 16.00it/s]5it [00:00, 12.56it/s]7it [00:00, 14.69it/s]9it [00:00, 15.93it/s]11it [00:00, 16.41it/s]13it [00:00, 16.65it/s]15it [00:00, 15.47it/s]17it [00:01,  9.50it/s]19it [00:01, 10.87it/s]21it [00:01, 11.49it/s]23it [00:01, 12.86it/s]25it [00:02, 10.31it/s]27it [00:02,  5.76it/s]30it [00:02,  8.02it/s]30it [00:02, 10.41it/s]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:03<00:00,  3.66s/it]100%|██████████| 1/1 [00:03<00:00,  3.92s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:03<00:00,  3.79s/it]100%|██████████| 1/1 [00:04<00:00,  4.01s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.7864943742752075


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 71.53846153846153
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 82.1136700515549
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 66.36097275124524


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 78.6494369506836
=========================          END          =========================


========================= ViLang Final Results of 10 runs, w/ 3 imgs per class=========================


[Clustering]
Clustering ACC: 70.92307692307693
Semantic ACC:   78.29580688476562
=========================          END          =========================
Namespace(mode='describe', config_file_env='./configs/env_machine.yml', config_file_expt='./configs/expts/pokemon_all.yml', num_per_category='3')
{'setup': 'ours', 'experiment': 5.0, 'dataset_name': 'pokemon', 'num_classes': 10, 'num_base': 5, 'num_novel': 5, 'seed': 1, 'batch_size': 256, 'clustering_method': 'multi_clip_voting', 'model_size': 'ViT-B/16', 'model_size_vqa': 'FlanT5-XXL', 'model_type_llm': 'gpt-3.5-turbo', 'image_size': 224, 'verbose': False, 'host': 'chaos', 'num_workers': 16, 'device': 'cuda', 'device_count': '1', 'device_id': '0', 'data_dir': './datasets/pokemon', 'expt_dir': './experiments/pokemon', 'expt_dir_describe': './experiments/pokemon/describe', 'path_vqa_questions': './experiments/pokemon/describe/pokemon_vqa_questions', 'path_vqa_answers': './experiments/pokemon/describe/pokemon_attributes_pairs', 'path_llm_prompts': './experiments/pokemon/describe/pokemon_llm_prompts', 'expt_dir_guess': './experiments/pokemon/guess', 'path_llm_replies_raw': './experiments/pokemon/guess/pokemon_llm_replies_raw', 'path_llm_replies_jsoned': './experiments/pokemon/guess/pokemon_llm_replies_jsoned', 'path_llm_gussed_names': './experiments/pokemon/guess/pokemon_llm_gussed_names', 'expt_dir_grouping': './experiments/pokemon/grouping'}
Loading checkpoint shards:   0%|          | 0/5 [00:00<?, ?it/s]Loading checkpoint shards:  20%|██        | 1/5 [00:03<00:12,  3.23s/it]Loading checkpoint shards:  40%|████      | 2/5 [00:05<00:08,  2.86s/it]Loading checkpoint shards:  60%|██████    | 3/5 [00:08<00:05,  2.81s/it]Loading checkpoint shards:  80%|████████  | 4/5 [00:11<00:02,  2.83s/it]Loading checkpoint shards: 100%|██████████| 5/5 [00:13<00:00,  2.68s/it]Loading checkpoint shards: 100%|██████████| 5/5 [00:13<00:00,  2.77s/it]
0it [00:00, ?it/s]1it [00:07,  7.98s/it]2it [00:15,  7.56s/it]0: label=2
==============================
Charmander_0 with label 2
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a small orange pokemon'''
        Attributes List:
        - '''color''': '''orange'''
        - '''size''': '''small'''
        - '''shape''': '''a small, orange, squirtle-like creature'''
        - '''body pattern''': '''a small, orange, scaly, lizard-like creature with'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''orange'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a stubby tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''fire'''
        - '''special markings''': '''the pokemon has a snout with a horn on it'''
        - '''ear shape''': '''a frog'''
        - '''skin texture''': '''smooth and shiny'''
        - '''evolutionary stage''': '''a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a t-shaped arm'''
        - '''facial expression''': '''a sad expression'''
        - '''unique feature''': '''it has a fire-type'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

1: label=2
==============================
Charmander_1 with label 2
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a small orange pokemon'''
        Attributes List:
        - '''color''': '''orange'''
        - '''size''': '''it is small'''
        - '''shape''': '''a small, orange, and yellow lizard'''
        - '''body pattern''': '''a scaly, squarish, snout-like'''
        - '''number of limbs''': '''four limbs'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''orange'''
        - '''mouth shape''': '''a snout'''
        - '''tail shape''': '''a slanted snout'''
        - '''number of heads''': '''two heads'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''fire'''
        - '''special markings''': '''the pokemon has a red nose and a yellow tummy'''
        - '''ear shape''': '''a frog'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a t-shaped arm'''
        - '''facial expression''': '''a smile'''
        - '''unique feature''': '''it has a tail'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

2: label=2
==============================
Charmander_2 with label 2
==============================

3it [00:21,  7.18s/it]4it [00:28,  6.87s/it]5it [00:35,  7.01s/it]
        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''brown'''
        - '''size''': '''it is small'''
        - '''shape''': '''it is a small, round, and stubby'''
        - '''body pattern''': '''it has a spherical head, a spherical body'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''the eyes are a squint'''
        - '''eye color''': '''blue'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a stubby tail with a rounded tip'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''fire'''
        - '''special markings''': '''the pokemon has a white belly and a blue tail'''
        - '''ear shape''': '''a spherical shape'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a t'''
        - '''arm shape''': '''the arms are a t shape'''
        - '''facial expression''': '''a smile'''
        - '''unique feature''': '''it has a flame on its head'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

3: label=9
==============================
Pidgeotto_3 with label 9
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a sylveon'''
        Attributes List:
        - '''color''': '''brown and pink'''
        - '''size''': '''it is a medium size'''
        - '''shape''': '''a bird with a long neck and a long tail'''
        - '''body pattern''': '''a tan body with a red head and wings'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''pink'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a swan-like tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a bird'''
        - '''special markings''': '''the pokemon has a red crest on its head'''
        - '''ear shape''': '''a spherical shape'''
        - '''skin texture''': '''a scaly texture'''
        - '''evolutionary stage''': '''a sylveon'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a slanted wing'''
        - '''arm shape''': '''a wing shape'''
        - '''facial expression''': '''a smirk'''
        - '''unique feature''': '''a bird with a long beak'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

4: label=9
==============================
Pidgeotto_4 with label 9
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a sylveon'''
        Attributes List:
        - '''color''': '''pink and brown'''
        - '''size''': '''it is a medium size'''
        - '''shape''': '''a bird'''
        - '''body pattern''': '''a bird with a long neck and a long tail'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a hawk's eye'''
        - '''eye color''': '''brown'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a swan'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a bird'''
        - '''special markings''': '''the pokemon has a red and yellow head, a white body, and a'''
        - '''ear shape''': '''a swan'''
        - '''skin texture''': '''a scaly texture'''
        - '''evolutionary stage''': '''a sylveon'''
        - '''number of wings''': '''two wings'''
        - '''leg shape''': '''a swan-like leg shape'''
        - '''arm shape''': '''a wing shape'''
        - '''facial expression''': '''a smirk'''
        - '''unique feature''': '''it has wings'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

5: label=9
==============================6it [00:42,  6.80s/it]7it [00:48,  6.74s/it]
Pidgeotto_5 with label 9
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''brown and red'''
        - '''size''': '''it is small'''
        - '''shape''': '''a bird'''
        - '''body pattern''': '''a brown body with a red head'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a hawk'''
        - '''eye color''': '''red'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a swan-like tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a bird'''
        - '''special markings''': '''a red hat and a white crest on its head'''
        - '''ear shape''': '''a spherical shape'''
        - '''skin texture''': '''smooth and shiny'''
        - '''evolutionary stage''': '''a snorlax'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle pokemon'''
        - '''arm shape''': '''a wing shape'''
        - '''facial expression''': '''a smug look'''
        - '''unique feature''': '''it has a red hat'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''yes'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

6: label=3
==============================
Charmeleon_6 with label 3
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''red'''
        - '''size''': '''it is small'''
        - '''shape''': '''it is a red and yellow pokemon'''
        - '''body pattern''': '''it has a red body with a white belly and a white tail'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''the eyes are a squint'''
        - '''eye color''': '''red'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''it is a stubby tail with a curved tip'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''fire'''
        - '''special markings''': '''the pokemon has a red body with a white belly and a white tail'''
        - '''ear shape''': '''the ear shape is a triangle'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a thigh and a shin'''
        - '''arm shape''': '''the arms are shaped like a t'''
        - '''facial expression''': '''a smirk'''
        - '''unique feature''': '''it has a tail that is on fire'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

7: label=3
==============================
Charmeleon_7 with label 3
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a red tawny tawny'''
        Attributes List:
        - '''color''': '''red'''
        - '''size''': '''it is small'''
        - '''shape''': '''a red and yellow lizard'''
        - '''body pattern''': '''a red and yellow tiger-like pattern'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''red'''
        - '''mouth shape''': '''a snout'''
        - '''tail shape''': '''a slanted tadpole tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''fire'''
        - '''special markings''': '''the pokemon has a red tummy and a white belly'''
        - '''ear shape''': '''a frog'''
        - '''skin texture''': '''a red lizard'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a t-shaped arm'''
        - '''facial expression''': '''a smirk'''
        - '''unique feature''': '''it has a fire-type'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

8it [00:54,  6.37s/it]9it [01:00,  6.23s/it]10it [01:05,  6.07s/it]END==============================

8: label=3
==============================
Charmeleon_8 with label 3
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a red pokemon with fire on its back'''
        Attributes List:
        - '''color''': '''red'''
        - '''size''': '''it is small'''
        - '''shape''': '''a red and yellow lizard'''
        - '''body pattern''': '''a red and white striped body with a black belly'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''red'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a stubby tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''fire'''
        - '''special markings''': '''the pokemon has a red body with a white belly and a white tail'''
        - '''ear shape''': '''a slanted triangle'''
        - '''skin texture''': '''a red lizard'''
        - '''evolutionary stage''': '''a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a t-shaped arm'''
        - '''facial expression''': '''angry'''
        - '''unique feature''': '''it has a flame on its head'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

9: label=1
==============================
Ivysaur_9 with label 1
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''blue'''
        - '''size''': '''it is small'''
        - '''shape''': '''a squirtle'''
        - '''body pattern''': '''a blue and green squirtle with a pink flower on its head'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''blue'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a flower'''
        - '''special markings''': '''the pokemon has a flower on its head'''
        - '''ear shape''': '''a squirtle'''
        - '''skin texture''': '''a scaly texture'''
        - '''evolutionary stage''': '''a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a squirtle'''
        - '''facial expression''': '''a sad expression'''
        - '''unique feature''': '''it has a flower on its head'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

10: label=1
==============================
Ivysaur_10 with label 1
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''green'''
        - '''size''': '''it is small'''
        - '''shape''': '''a squirtle'''
        - '''body pattern''': '''a squirtle with a flower on its head'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''green'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''grass'''
        - '''special markings''': '''the pokemon has a snout with a horn and a tail'''
        - '''ear shape''': '''a squirtle'''
        - '''skin texture''': '''a scaly texture'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a twig'''
        - '''facial expression''': '''a sad expression'''
        - '''unique feature''': '''it has a flower on its head'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

11it [01:11,  5.89s/it]12it [01:18,  6.28s/it]13it [01:23,  6.01s/it]END==============================

11: label=1
==============================
Ivysaur_11 with label 1
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''blue'''
        - '''size''': '''it is small'''
        - '''shape''': '''it is a small blue pokemon with a leaf on its back'''
        - '''body pattern''': '''it has a blue body with a green head and a pink tail'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''the eyes are a squint'''
        - '''eye color''': '''blue'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''the pokemon is a squirtle'''
        - '''special markings''': '''the pokemon has a green head, a blue body, and a pink tail'''
        - '''ear shape''': '''a squirtle'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a thigh and a thigh'''
        - '''arm shape''': '''the pokemon has a squirtle arm shape'''
        - '''facial expression''': '''a sad expression'''
        - '''unique feature''': '''it has a flower on its head'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

12: label=6
==============================
Pikachu_12 with label 6
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''pikachu'''
        Attributes List:
        - '''color''': '''yellow'''
        - '''size''': '''it is small'''
        - '''shape''': '''a small yellow pokemon'''
        - '''body pattern''': '''it has a yellow body with a black head and a black tail'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''yellow'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a slanted squirt tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''grass'''
        - '''special markings''': '''the pokemon has a yellow body with a black stripe on the side of its'''
        - '''ear shape''': '''a ear shape of a t'''
        - '''skin texture''': '''smooth'''
        - '''evolutionary stage''': '''it is a pikachu'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a t-shape'''
        - '''facial expression''': '''a sad expression'''
        - '''unique feature''': '''it has a tail'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

13: label=6
==============================
Pikachu_13 with label 6
==============================

14it [01:29,  5.86s/it]15it [01:36,  6.20s/it]16it [01:42,  6.03s/it]
        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''pikachu'''
        Attributes List:
        - '''color''': '''yellow'''
        - '''size''': '''it is small'''
        - '''shape''': '''a yellow pokemon with a black nose'''
        - '''body pattern''': '''a yellow body with black eyes and a black nose'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''yellow'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a stubby tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a pokemon'''
        - '''special markings''': '''the pokemon has a black stripe on its forehead'''
        - '''ear shape''': '''a squished triangle'''
        - '''skin texture''': '''smooth'''
        - '''evolutionary stage''': '''pikachu'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a slanted triangle'''
        - '''facial expression''': '''a pikachu with a smile on his face'''
        - '''unique feature''': '''it has a yellow head'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

14: label=6
==============================
Pikachu_14 with label 6
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''pikachu'''
        Attributes List:
        - '''color''': '''yellow'''
        - '''size''': '''it is small'''
        - '''shape''': '''it is a small yellow ball'''
        - '''body pattern''': '''it has a yellow body with a black head and a black tail'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''yellow'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a stubby tail'''
        - '''number of heads''': '''two heads'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a ball'''
        - '''special markings''': '''the pokemon has a white belly and a black tail'''
        - '''ear shape''': '''a ear shape of a squirtle'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a pikachu'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a t'''
        - '''arm shape''': '''it is a squirtle'''
        - '''facial expression''': '''a smile'''
        - '''unique feature''': '''it is a pikachu'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

15: label=4
==============================
Squirtle_15 with label 4
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a small turtle'''
        Attributes List:
        - '''color''': '''blue and yellow'''
        - '''size''': '''small'''
        - '''shape''': '''a turtle'''
        - '''body pattern''': '''a turtle with a blue head and a yellow belly'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''blue'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''sand'''
        - '''special markings''': '''the pokemon has a blue and yellow shell'''
        - '''ear shape''': '''a teddy bear'''
        - '''skin texture''': '''smooth'''
        - '''evolutionary stage''': '''a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a t-shape'''
        - '''facial expression''': '''a sad expression'''
        - '''unique feature''': '''it is a turtle'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

16: label=4
==============================
Squirtle_16 with label 4
17it [01:48,  6.08s/it]18it [01:54,  6.15s/it]==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''blue'''
        - '''size''': '''it is small'''
        - '''shape''': '''a turtle'''
        - '''body pattern''': '''it is a squirtle'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''blue'''
        - '''mouth shape''': '''a snout'''
        - '''tail shape''': '''a squirtle'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''water'''
        - '''special markings''': '''the pokemon has a blue head, a blue body, and a blue tail'''
        - '''ear shape''': '''a squirtle'''
        - '''skin texture''': '''it is smooth and shiny'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''it is a squirtle'''
        - '''facial expression''': '''a smile'''
        - '''unique feature''': '''it is a squirtle'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

17: label=4
==============================
Squirtle_17 with label 4
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a turtle'''
        Attributes List:
        - '''color''': '''blue'''
        - '''size''': '''it is a small turtle'''
        - '''shape''': '''it is a turtle'''
        - '''body pattern''': '''it is a turtle pokemon'''
        - '''number of limbs''': '''four limbs'''
        - '''eye shape''': '''the eye shape is a squint'''
        - '''eye color''': '''blue'''
        - '''mouth shape''': '''the mouth shape of the pokemon in this image is a snout'''
        - '''tail shape''': '''it is a turtle'''
        - '''number of heads''': '''two heads'''
        - '''number of eyes''': '''two eyes'''
        - '''associated element''': '''a turtle'''
        - '''special markings''': '''the pokemon has a blue shell with a brown head and a brown body with'''
        - '''ear shape''': '''the ear shape is a t'''
        - '''skin texture''': '''the skin texture is smooth and shiny'''
        - '''evolutionary stage''': '''the pokemon in this image is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a t'''
        - '''arm shape''': '''the arm shape is a t'''
        - '''facial expression''': '''a turtle pokemon'''
        - '''unique feature''': '''it is a turtle'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

18: label=5
==============================
Wartortle_18 with label 5
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''blue'''
        - '''size''': '''it is small'''
        - '''shape''': '''a turtle'''
        - '''body pattern''': '''it has a spherical body with a spherical head'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''blue'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''water'''
        - '''special markings''': '''the pokemon has a blue body with a white belly and a blue head'''
        - '''ear shape''': '''a squirtle'''
        - '''skin texture''': '''it is smooth and shiny'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''it is a squirtle'''
        - '''facial expression''': '''a smirk'''
        - '''unique feature''': '''it has a shell'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''yes'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

19it [02:00,  6.14s/it]20it [02:07,  6.22s/it]21it [02:13,  6.27s/it]END==============================

19: label=5
==============================
Wartortle_19 with label 5
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a pokemon that is a turtle'''
        Attributes List:
        - '''color''': '''blue'''
        - '''size''': '''it is a small turtle'''
        - '''shape''': '''it is a turtle'''
        - '''body pattern''': '''it has a blue body with a white belly and a white head'''
        - '''number of limbs''': '''four limbs'''
        - '''eye shape''': '''the eye shape is a squint'''
        - '''eye color''': '''blue'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''it is a squirtle'''
        - '''number of heads''': '''two heads'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a turtle'''
        - '''special markings''': '''the pokemon has a blue body with a white belly and a white head with'''
        - '''ear shape''': '''the ear shape is a t'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a t'''
        - '''arm shape''': '''the arm shape is a t'''
        - '''facial expression''': '''a turtle pokemon'''
        - '''unique feature''': '''it has a shell'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

20: label=5
==============================
Wartortle_20 with label 5
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''person, person, person, person, person, person, person, person, person, person'''
        Attributes List:
        - '''color''': '''blue'''
        - '''size''': '''it is a small pokemon'''
        - '''shape''': '''a turtle'''
        - '''body pattern''': '''a squirtle with a squirtle on its'''
        - '''number of limbs''': '''four limbs'''
        - '''eye shape''': '''a person'''
        - '''eye color''': '''blue'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a twig'''
        - '''special markings''': '''the pokemon has a squirtle on its back, and a'''
        - '''ear shape''': '''a squirtle'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''person, person, person, person, person, person, person, person, person, person'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a thigh and a thigh'''
        - '''arm shape''': '''a teddy bear'''
        - '''facial expression''': '''a smile'''
        - '''unique feature''': '''it is a squirtle'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

21: label=8
==============================
Pidgey_21 with label 8
==============================

22it [02:19,  6.17s/it]23it [02:25,  6.01s/it]
        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a bird pokemon'''
        Attributes List:
        - '''color''': '''brown and white'''
        - '''size''': '''it is a small bird'''
        - '''shape''': '''it is a bird'''
        - '''body pattern''': '''it is a bird with a brown body and white head'''
        - '''number of limbs''': '''four limbs'''
        - '''eye shape''': '''the eyes are a squint'''
        - '''eye color''': '''brown eyes'''
        - '''mouth shape''': '''the mouth shape is a slit'''
        - '''tail shape''': '''it is a swan'''
        - '''number of heads''': '''two heads'''
        - '''number of eyes''': '''two eyes'''
        - '''associated element''': '''bird'''
        - '''special markings''': '''the bird has a white crest on its head, and a white wing patch'''
        - '''ear shape''': '''the ear shape is a triangle'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''the pokemon in this image is a snorlax'''
        - '''number of wings''': '''two wings'''
        - '''leg shape''': '''the leg shape is a squirtle'''
        - '''arm shape''': '''the arm shape is a wing'''
        - '''facial expression''': '''a bird pokemon'''
        - '''unique feature''': '''it has a beak'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

22: label=8
==============================
Pidgey_22 with label 8
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a sylveon'''
        Attributes List:
        - '''color''': '''brown and white'''
        - '''size''': '''it is a medium size'''
        - '''shape''': '''a bird'''
        - '''body pattern''': '''it is a bird with a brown body and a white head'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a hawk'''
        - '''eye color''': '''brown'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a swan'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a bird'''
        - '''special markings''': '''the pokemon has a brown body with a white head and a brown tail'''
        - '''ear shape''': '''a spherical shape'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''a sylveon'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a squirtle'''
        - '''arm shape''': '''it is a swan'''
        - '''facial expression''': '''a hawk'''
        - '''unique feature''': '''it has a long neck'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

23: label=8
==============================
Pidgey_23 with label 8
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a bird'''
        Attributes List:
        - '''color''': '''brown and white'''
        - '''size''': '''it is a medium size'''
        - '''shape''': '''a bird'''
        - '''body pattern''': '''it is a bird'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a hawk'''
        - '''eye color''': '''brown'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a swan'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a bird'''
        - '''special markings''': '''the bird has a white crest on its head'''
        - '''ear shape''': '''a spherical shape'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''a sylveon'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a squirtle'''
        - '''arm shape''': '''it is a swan'''
        - '''facial expression''': '''a bird with a smirk'''
        - '''unique feature''': '''it is a bird'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

24it [02:29,  5.70s/it]25it [02:35,  5.65s/it]26it [02:41,  5.61s/it]END==============================

24: label=0
==============================
Bulbasaur_24 with label 0
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''green'''
        - '''size''': '''it is small'''
        - '''shape''': '''it is a green and red pokemon'''
        - '''body pattern''': '''a green body with a red head and a red tail'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''green'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a pokemon'''
        - '''special markings''': '''the pokemon has a green body with a red nose and eyes'''
        - '''ear shape''': '''a frog'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a thigh shape'''
        - '''arm shape''': '''the arms are shaped like a t'''
        - '''facial expression''': '''a smile'''
        - '''unique feature''': '''it has a green body and red eyes'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

25: label=0
==============================
Bulbasaur_25 with label 0
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''blue'''
        - '''size''': '''it is small'''
        - '''shape''': '''a small, green, leafy creature'''
        - '''body pattern''': '''a spherical body with a tail'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''green'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''leaf'''
        - '''special markings''': '''the pokemon has a green leaf on its back'''
        - '''ear shape''': '''a squirtle'''
        - '''skin texture''': '''smooth'''
        - '''evolutionary stage''': '''a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a squirtle'''
        - '''facial expression''': '''a sad expression'''
        - '''unique feature''': '''it has a leaf on its back'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

26: label=0
==============================
Bulbasaur_26 with label 0
==============================

27it [02:46,  5.57s/it]28it [02:52,  5.67s/it]
        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a squirtle'''
        Attributes List:
        - '''color''': '''green'''
        - '''size''': '''it is small'''
        - '''shape''': '''a small, green, squirtle-like creature'''
        - '''body pattern''': '''a spherical body with a rounded head and a s'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''green'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''grass'''
        - '''special markings''': '''the pokemon has a large green pouch on its back'''
        - '''ear shape''': '''a squirtle'''
        - '''skin texture''': '''a scaly texture'''
        - '''evolutionary stage''': '''a squirtle'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''a squirtle'''
        - '''arm shape''': '''a squirtle'''
        - '''facial expression''': '''a sad expression'''
        - '''unique feature''': '''it has a backpack'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

27: label=7
==============================
Raichu_27 with label 7
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''pikachu'''
        Attributes List:
        - '''color''': '''yellow'''
        - '''size''': '''it is small'''
        - '''shape''': '''it is a small, yellow, and brown pokemon'''
        - '''body pattern''': '''it has a squirtle tail and a squirt'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''yellow'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a squirtle tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a pokemon that is a squirtle'''
        - '''special markings''': '''the pokemon has a yellow body with a black tail and a white t'''
        - '''ear shape''': '''a squiggly tail'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a pikachu'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a t'''
        - '''arm shape''': '''the arm shape is a t'''
        - '''facial expression''': '''a smile'''
        - '''unique feature''': '''it has a tail'''
        - '''body posturetail presence''': '''yes'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

28: label=7
==============================
Raichu_28 with label 7
==============================

29it [02:58,  5.93s/it]30it [03:05,  6.14s/it]30it [03:05,  6.19s/it]

        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''pikachu, person, person, person, person, person, person, person, person'''
        Attributes List:
        - '''color''': '''orange and white'''
        - '''size''': '''it is small'''
        - '''shape''': '''it is a small, yellow, and brown pokemon'''
        - '''body pattern''': '''it is a squirtle'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''yellow'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a pig tail'''
        - '''number of heads''': '''two heads'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a pokemon'''
        - '''special markings''': '''the pokemon has a yellow head, a yellow body, and a yellow tail'''
        - '''ear shape''': '''a squished ear shape'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a pikachu'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a t'''
        - '''arm shape''': '''it is a teddy bear'''
        - '''facial expression''': '''sad'''
        - '''unique feature''': '''it has a horn on its head'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''no'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

29: label=7
==============================
Raichu_29 with label 7
==============================


        I have a image of a pokemon . 
        Your task is to perform the following actions:
        1 - Summarize the information you get about the pokemon in this image from the general description and 
        attribute descriptions delimited by triple backticks with five sentences.
        2 - Infer and list three possible names of the pokemon in this photo based on the 
        information you get.
        3 - Output a JSON object that uses the following format
        <three possible pokemon names>: [
                <first sentence of the summary>,
                <second sentence of the summary>,
                <third sentence of the summary>,
                <fourth sentence of the summary>,
                <fifth sentence of the summary>,
        ]

        Use the following format to perform the aforementioned tasks:
        General Description: '''general description of the photo'''
        Attributes List:
        - '''attribute name''': '''attribute description'''
        - '''attribute name''': '''attribute description'''
        - ...
        - '''attribute name''': '''attribute description'''
        Summary: <summary>
        Three possible pokemon names: <three possible pokemon names>
        Output JSON: <output JSON object>

        '''General Description''': '''a pikachu'''
        Attributes List:
        - '''color''': '''brown'''
        - '''size''': '''it is small'''
        - '''shape''': '''a small, stubby, snoutlike creature with a long'''
        - '''body pattern''': '''it has a squirtle like pattern on its back'''
        - '''number of limbs''': '''four'''
        - '''eye shape''': '''a squint'''
        - '''eye color''': '''brown'''
        - '''mouth shape''': '''a slit'''
        - '''tail shape''': '''a pig tail'''
        - '''number of heads''': '''two'''
        - '''number of eyes''': '''two'''
        - '''associated element''': '''a pokemon'''
        - '''special markings''': '''the pokemon has a snout with a horn on it, and'''
        - '''ear shape''': '''a squished ear'''
        - '''skin texture''': '''the skin texture is smooth'''
        - '''evolutionary stage''': '''it is a pikachu'''
        - '''number of wings''': '''two'''
        - '''leg shape''': '''the leg shape is a thigh and a thigh'''
        - '''arm shape''': '''the arm shape is a t'''
        - '''facial expression''': '''a smirk'''
        - '''unique feature''': '''it has a tail'''
        - '''body posturetail presence''': '''no'''
        - '''fin presence''': '''no'''
        - '''horn presence''': '''yes'''
        - '''crest or spike presence''': '''spike'''
        

END==============================

Succ. dumped attribute values to ./experiments/pokemon/describe/pokemon_attributes_pairs_3
Succ. dumped LLM prompts  to ./experiments/pokemon/describe/pokemon_llm_prompts_3
Namespace(mode='guess', config_file_env='./configs/env_machine.yml', config_file_expt='./configs/expts/pokemon_all.yml', num_per_category='3')
{'setup': 'ours', 'experiment': 5.0, 'dataset_name': 'pokemon', 'num_classes': 10, 'num_base': 5, 'num_novel': 5, 'seed': 1, 'batch_size': 256, 'clustering_method': 'multi_clip_voting', 'model_size': 'ViT-B/16', 'model_size_vqa': 'FlanT5-XXL', 'model_type_llm': 'gpt-3.5-turbo', 'image_size': 224, 'verbose': False, 'host': 'chaos', 'num_workers': 16, 'device': 'cuda', 'device_count': '1', 'device_id': '0', 'data_dir': './datasets/pokemon', 'expt_dir': './experiments/pokemon', 'expt_dir_describe': './experiments/pokemon/describe', 'path_vqa_questions': './experiments/pokemon/describe/pokemon_vqa_questions', 'path_vqa_answers': './experiments/pokemon/describe/pokemon_attributes_pairs', 'path_llm_prompts': './experiments/pokemon/describe/pokemon_llm_prompts', 'expt_dir_guess': './experiments/pokemon/guess', 'path_llm_replies_raw': './experiments/pokemon/guess/pokemon_llm_replies_raw', 'path_llm_replies_jsoned': './experiments/pokemon/guess/pokemon_llm_replies_jsoned', 'path_llm_gussed_names': './experiments/pokemon/guess/pokemon_llm_gussed_names', 'expt_dir_grouping': './experiments/pokemon/grouping'}
0it [00:00, ?it/s]0it [00:17, ?it/s]
╭───────────────────── Traceback (most recent call last) ──────────────────────╮
│ /home/hdl/miniconda3/envs/finer/lib/python3.9/site-packages/tenacity/__init_ │
│ _.py:382 in __call__                                                         │
│                                                                              │
│   379 │   │   │   do = self.iter(retry_state=retry_state)                    │
│   380 │   │   │   if isinstance(do, DoAttempt):                              │
│   381 │   │   │   │   try:                                                   │
│ ❱ 382 │   │   │   │   │   result = fn(*args, **kwargs)                       │
│   383 │   │   │   │   except BaseException:  # noqa: B902                    │
│   384 │   │   │   │   │   retry_state.set_exception(sys.exc_info())  # type: │
│   385 │   │   │   │   else:                                                  │
│                                                                              │
│ /home/hdl/project/FineR/FineR_0/agents/llm_bot.py:57 in call_gpts            │
│                                                                              │
│    54 │   │   │   max_tokens=max_tokens                                      │
│    55 │   │   )                                                              │
│    56 │   else:                                                              │
│ ❱  57 │   │   response = client.chat.completions.create(                     │
│    58 │   │   │   model=model,                                               │
│    59 │   │   │   messages=chatgpt_messages,                                 │
│    60 │   │   │   temperature=temperature                                    │
│                                                                              │
│ /home/hdl/miniconda3/envs/finer/lib/python3.9/site-packages/openai/_utils/_u │
│ tils.py:287 in wrapper                                                       │
│                                                                              │
│   284 │   │   │   │   │   else:                                              │
│   285 │   │   │   │   │   │   msg = f"Missing required argument: {quote(miss │
│   286 │   │   │   │   raise TypeError(msg)                                   │
│ ❱ 287 │   │   │   return func(*args, **kwargs)                               │
│   288 │   │                                                                  │
│   289 │   │   return wrapper  # type: ignore                                 │
│   290                                                                        │
│                                                                              │
│ /home/hdl/miniconda3/envs/finer/lib/python3.9/site-packages/openai/resources │
│ /chat/completions/completions.py:1147 in create                              │
│                                                                              │
│   1144 │   │   timeout: float | httpx.Timeout | None | NotGiven = NOT_GIVEN, │
│   1145 │   ) -> ChatCompletion | Stream[ChatCompletionChunk]:                │
│   1146 │   │   validate_response_format(response_format)                     │
│ ❱ 1147 │   │   return self._post(                                            │
│   1148 │   │   │   "/chat/completions",                                      │
│   1149 │   │   │   body=maybe_transform(                                     │
│   1150 │   │   │   │   {                                                     │
│                                                                              │
│ /home/hdl/miniconda3/envs/finer/lib/python3.9/site-packages/openai/_base_cli │
│ ent.py:1259 in post                                                          │
│                                                                              │
│   1256 │   │   opts = FinalRequestOptions.construct(                         │
│   1257 │   │   │   method="post", url=path, json_data=body, files=to_httpx_f │
│   1258 │   │   )                                                             │
│ ❱ 1259 │   │   return cast(ResponseT, self.request(cast_to, opts, stream=str │
│   1260 │                                                                     │
│   1261 │   def patch(                                                        │
│   1262 │   │   self,                                                         │
│                                                                              │
│ /home/hdl/miniconda3/envs/finer/lib/python3.9/site-packages/openai/_base_cli │
│ ent.py:1047 in request                                                       │
│                                                                              │
│   1044 │   │   │   │   │   err.response.read()                               │
│   1045 │   │   │   │                                                         │
│   1046 │   │   │   │   log.debug("Re-raising status error")                  │
│ ❱ 1047 │   │   │   │   raise self._make_status_error_from_response(err.respo │
│   1048 │   │   │                                                             │
│   1049 │   │   │   break                                                     │
│   1050                                                                       │
╰──────────────────────────────────────────────────────────────────────────────╯
AuthenticationError: Error code: 401 - {'error': {'message': '无效的sk 
token，请检查token是否正确', 'type': 'error'}}

The above exception was the direct cause of the following exception:

╭───────────────────── Traceback (most recent call last) ──────────────────────╮
│ /home/hdl/project/FineR/FineR_0/discovering.py:394 in <module>               │
│                                                                              │
│   391 │   │   llm_bot = LLMBot(model=cfg['model_type_llm'])                  │
│   392 │   │                                                                  │
│   393 │   │   # run the main program                                         │
│ ❱ 394 │   │   raw_replies, jsoned_replies = main_guess(cfg, llm_bot, reasoni │
│   395 │   │                                                                  │
│   396 │   │   # save LLM replis                                              │
│   397 │   │   dump_json(cfg['path_llm_replies_raw'] + expt_id_suffix, raw_re │
│                                                                              │
│ /home/hdl/project/FineR/FineR_0/discovering.py:170 in main_guess             │
│                                                                              │
│   167 │                                                                      │
│   168 │   # LLM inferring                                                    │
│   169 │   for i, (key, prompt) in tqdm(enumerate(prompt_list.items())):      │
│ ❱ 170 │   │   raw_reply = bot.infer(prompt, temperature=0.9)  # use a high t │
│   171 │   │   used_tokens = bot.get_used_tokens()                            │
│   172 │   │                                                                  │
│   173 │   │   replies_raw[key] = raw_reply                                   │
│                                                                              │
│ /home/hdl/project/FineR/FineR_0/agents/llm_bot.py:119 in infer               │
│                                                                              │
│   116 │   │   return reply, total_prompt, n_tokens                           │
│   117 │                                                                      │
│   118 │   def infer(self, prompt, temperature=0.9):                          │
│ ❱ 119 │   │   reply, _, n_tokens = self.__query(prompt, temperature, max_tok │
│   120 │   │   self.total_tokens += n_tokens                                  │
│   121 │   │   return reply.strip()                                           │
│   122                                                                        │
│                                                                              │
│ /home/hdl/project/FineR/FineR_0/agents/llm_bot.py:109 in __query             │
│                                                                              │
│   106 │                                                                      │
│   107 │   def __query(self, prompt, temperature, max_token):                 │
│   108 │   │   total_prompt = prepare_chatgpt_message(prompt)                 │
│ ❱ 109 │   │   reply, n_tokens = call_gpts(                                   │
│   110 │   │   │   client=self.client,                                        │
│   111 │   │   │   chatgpt_messages=total_prompt,                             │
│   112 │   │   │   temperature=temperature,                                   │
│                                                                              │
│ /home/hdl/miniconda3/envs/finer/lib/python3.9/site-packages/tenacity/__init_ │
│ _.py:289 in wrapped_f                                                        │
│                                                                              │
│   286 │   │                                                                  │
│   287 │   │   @functools.wraps(f)                                            │
│   288 │   │   def wrapped_f(*args: t.Any, **kw: t.Any) -> t.Any:             │
│ ❱ 289 │   │   │   return self(f, *args, **kw)                                │
│   290 │   │                                                                  │
│   291 │   │   def retry_with(*args: t.Any, **kwargs: t.Any) -> WrappedFn:    │
│   292 │   │   │   return self.copy(*args, **kwargs).wraps(f)                 │
│                                                                              │
│ /home/hdl/miniconda3/envs/finer/lib/python3.9/site-packages/tenacity/__init_ │
│ _.py:379 in __call__                                                         │
│                                                                              │
│   376 │   │                                                                  │
│   377 │   │   retry_state = RetryCallState(retry_object=self, fn=fn, args=ar │
│   378 │   │   while True:                                                    │
│ ❱ 379 │   │   │   do = self.iter(retry_state=retry_state)                    │
│   380 │   │   │   if isinstance(do, DoAttempt):                              │
│   381 │   │   │   │   try:                                                   │
│   382 │   │   │   │   │   result = fn(*args, **kwargs)                       │
│                                                                              │
│ /home/hdl/miniconda3/envs/finer/lib/python3.9/site-packages/tenacity/__init_ │
│ _.py:326 in iter                                                             │
│                                                                              │
│   323 │   │   │   retry_exc = self.retry_error_cls(fut)                      │
│   324 │   │   │   if self.reraise:                                           │
│   325 │   │   │   │   raise retry_exc.reraise()                              │
│ ❱ 326 │   │   │   raise retry_exc from fut.exception()                       │
│   327 │   │                                                                  │
│   328 │   │   if self.wait:                                                  │
│   329 │   │   │   sleep = self.wait(retry_state)                             │
╰──────────────────────────────────────────────────────────────────────────────╯
RetryError: RetryError[<Future at 0x7d89717d47f0 state=finished raised 
AuthenticationError>]
Namespace(mode='postprocess', config_file_env='./configs/env_machine.yml', config_file_expt='./configs/expts/pokemon_all.yml', num_per_category='3')
{'setup': 'ours', 'experiment': 5.0, 'dataset_name': 'pokemon', 'num_classes': 10, 'num_base': 5, 'num_novel': 5, 'seed': 1, 'batch_size': 256, 'clustering_method': 'multi_clip_voting', 'model_size': 'ViT-B/16', 'model_size_vqa': 'FlanT5-XXL', 'model_type_llm': 'gpt-3.5-turbo', 'image_size': 224, 'verbose': False, 'host': 'chaos', 'num_workers': 16, 'device': 'cuda', 'device_count': '1', 'device_id': '0', 'data_dir': './datasets/pokemon', 'expt_dir': './experiments/pokemon', 'expt_dir_describe': './experiments/pokemon/describe', 'path_vqa_questions': './experiments/pokemon/describe/pokemon_vqa_questions', 'path_vqa_answers': './experiments/pokemon/describe/pokemon_attributes_pairs', 'path_llm_prompts': './experiments/pokemon/describe/pokemon_llm_prompts', 'expt_dir_guess': './experiments/pokemon/guess', 'path_llm_replies_raw': './experiments/pokemon/guess/pokemon_llm_replies_raw', 'path_llm_replies_jsoned': './experiments/pokemon/guess/pokemon_llm_replies_jsoned', 'path_llm_gussed_names': './experiments/pokemon/guess/pokemon_llm_gussed_names', 'expt_dir_grouping': './experiments/pokemon/grouping'}
Charmander_0
{
    "Squirtle": [
        "Squirtle is a small, orange Pokemon with a stubby, snout-like creature.",
        "It has a spherical body with a spherical head and four limbs.",
        "The Pokemon has a squint eye shape and orange eyes.",
        "Its mouth shape is a slit and it has a stubby tail.",
        "Squirtle has two heads and two eyes."
    ],
    "Charmander": [
        "Squirtle is a small, orange Pokemon with a stubby, snout-like creature.",
        "It has a spherical body with a spherical head and four limbs.",
        "The Pokemon has a squint eye shape and orange eyes.",
        "Its mouth shape is a slit and it has a stubby tail.",
        "Squirtle has two heads and two eyes."
    ],
    "Cyndaquil": [
        "Squirtle is a small, orange Pokemon with a stubby, snout-like creature.",
        "It has a spherical body with a spherical head and four limbs.",
        "The Pokemon has a squint eye shape and orange eyes.",
        "Its mouth shape is a slit and it has a stubby tail.",
        "Squirtle has two heads and two eyes."
    ]
}


Charmander_1
{
    "Squirtle": [
        "This pokemon is a small orange creature with a scaly, stubby, snout-like head, two heads, and two squinty orange eyes.",
        "It has a small, lizard-like body with a tail, four limbs, and smooth skin texture.",
        "The special markings of this pokemon are a bright red nose and a yellow tummy.",
        "Its mouth is in the shape of a snout and its ears resemble those of a frog.",
        "It is associated with the fire element and has a smile as its facial expression."
    ],
    "Charmander": [
        "This pokemon is a small orange creature with a scaly, stubby, snout-like head, two heads, and two squinty orange eyes.",
        "It has a small, lizard-like body with a tail, four limbs, and smooth skin texture.",
        "The special markings of this pokemon are a bright red nose and a yellow tummy.",
        "Its mouth is in the shape of a snout and its ears resemble those of a frog.",
        "It is associated with the fire element and has a smile as its facial expression."
    ],
    "Charmeleon": [
        "This pokemon is a small orange creature with a scaly, stubby, snout-like head, two heads, and two squinty orange eyes.",
        "It has a small, lizard-like body with a tail, four limbs, and smooth skin texture.",
        "The special markings of this pokemon are a bright red nose and a yellow tummy.",
        "Its mouth is in the shape of a snout and its ears resemble those of a frog.",
        "It is associated with the fire element and has a smile as its facial expression."
    ]
}


Charmander_2
{
  "Squirtle": [
    "A squirtle is a small, round, and stubby pokemon with a brown color.",
    "It has a spherical head and body with a white belly and blue tummy.",
    "This pokemon has four limbs in a T shape and two heads with squinty blue eyes and a slit mouth.",
    "It also has a stubby tail and a spherical shape ear.",
    "The skin is smooth and it has a flame on its head."
  ],
  "Wartortle": [
    "A squirtle is a small, round, and stubby pokemon with a brown color.",
    "It has a spherical head and body with a white belly and blue tummy.",
    "This pokemon has four limbs in a T shape and two heads with squinty blue eyes and a slit mouth.",
    "It also has a stubby tail and a spherical shape ear.",
    "The skin is smooth and it has a flame on its head."
  ],
  "Blastoise": [
    "A squirtle is a small, round, and stubby pokemon with a brown color.",
    "It has a spherical head and body with a white belly and blue tummy.",
    "This pokemon has four limbs in a T shape and two heads with squinty blue eyes and a slit mouth.",
    "It also has a stubby tail and a spherical shape ear.",
    "The skin is smooth and it has a flame on its head."
  ]
}


Pidgey_3
{
    "Swellow": [
        "The Pokemon in the image is a bird with a brown and white body pattern.",
        "It is small in size and has a beak.",
        "It has a white crest on its head and a white wing patch.",
        "It has two heads and two eyes with a squint shape.",
        "The Pokemon has four limbs, two wings, and a tail shaped like a swan."
    ],
    "Pidgeot": [
        "The Pokemon in the image is a bird with a brown and white body pattern.",
        "It is small in size and has a beak.",
        "It has a white crest on its head and a white wing patch.",
        "It has two heads and two eyes with a squint shape.",
        "The Pokemon has four limbs, two wings, and a tail shaped like a swan."
    ],
    "Staraptor": [
        "The Pokemon in the image is a bird with a brown and white body pattern.",
        "It is small in size and has a beak.",
        "It has a white crest on its head and a white wing patch.",
        "It has two heads and two eyes with a squint shape.",
        "The Pokemon has four limbs, two wings, and a tail shaped like a swan."
    ]
}


Pidgey_4
{
  "Crestwing": [
    "This is a medium-sized bird with a brown head and a white belly.",
    "It has four limbs and two heads with two eyes each.",
    "The bird has a hawk-like eye shape and brown eyes.",
    "It has a slit-shaped mouth and a tail resembling that of a swan.",
    "The bird has a unique white crest on its head and a spherical ear shape."
  ],
  "Swaneye": [
    "This is a medium-sized bird with a brown head and a white belly.",
    "It has four limbs and two heads with two eyes each.",
    "The bird has a hawk-like eye shape and brown eyes.",
    "It has a slit-shaped mouth and a tail resembling that of a swan.",
    "The bird has a unique white crest on its head and a spherical ear shape."
  ],
  "Hawkbeak": [
    "This is a medium-sized bird with a brown head and a white belly.",
    "It has four limbs and two heads with two eyes each.",
    "The bird has a hawk-like eye shape and brown eyes.",
    "It has a slit-shaped mouth and a tail resembling that of a swan.",
    "The bird has a unique white crest on its head and a spherical ear shape."
  ]
}


Pidgey_5
{
    "Sylveon": [
        "A Sylveon is a medium-sized bird-like Pokemon with brown and white feathers.",
        "Its body is covered in brown feathers with a white head and a red beak.",
        "The Pokemon has two heads and two eyes, which are brown and shaped like a hawk.",
        "It has a spherical-shaped ear and a scaly skin texture.",
        "The Sylveon has a unique feature of a long neck and two wings."
    ],
    "Hawkwing": [
        "A Sylveon is a medium-sized bird-like Pokemon with brown and white feathers.",
        "Its body is covered in brown feathers with a white head and a red beak.",
        "The Pokemon has two heads and two eyes, which are brown and shaped like a hawk.",
        "It has a spherical-shaped ear and a scaly skin texture.",
        "The Sylveon has a unique feature of a long neck and two wings."
    ],
    "Swanbeak": [
        "A Sylveon is a medium-sized bird-like Pokemon with brown and white feathers.",
        "Its body is covered in brown feathers with a white head and a red beak.",
        "The Pokemon has two heads and two eyes, which are brown and shaped like a hawk.",
        "It has a spherical-shaped ear and a scaly skin texture.",
        "The Sylveon has a unique feature of a long neck and two wings."
    ]
}


Pidgeotto_6
{
    "Sylveon": [
        "This image features a Pokemon called Sylveon, which is a bird-like creature with a medium size.",
        "It has a tan body with a red head and wings, and it is characterized by its brown and pink coloration.",
        "Sylveon has a unique shape with a long neck, long tail, and a swan-like tail.",
        "It has four limbs and two heads with squinty pink eyes.",
        "The Pokemon has a slit mouth and a spherical ear shape."
    ],
    "Birdor": [
        "This image features a Pokemon called Birdor, which is a bird-like creature with a medium size.",
        "It has a tan body with a red head and wings, and it is characterized by its brown and pink coloration.",
        "Birdor has a unique shape with a long neck, long tail, and a swan-like tail.",
        "It has four limbs and two heads with squinty pink eyes.",
        "The Pokemon has a slit mouth and a spherical ear shape."
    ],
    "Swanwing": [
        "This image features a Pokemon called Swanwing, which is a bird-like creature with a medium size.",
        "It has a tan body with a red head and wings, and it is characterized by its brown and pink coloration.",
        "Swanwing has a unique shape with a long neck, long tail, and a swan-like tail.",
        "It has four limbs and two heads with squinty pink eyes.",
        "The Pokemon has a slit mouth and a spherical ear shape."
    ]
}


Pidgeotto_7
{
    "Sylveon": [
        "Sylveon is a medium-sized bird-like Pokémon with a pink and brown coloration. It has a brown body with a yellow head and wings.",
        "The Pokémon has four limbs, two heads, and two eyes with a hawk-like shape. Its eye color is brown, and its mouth has a slit shape.",
        "The tail resembles that of a swan. It has a special marking of a red and yellow crest on its head, along with a white ear shape similar to a swan.",
        "Sylveon's skin texture is smooth. It is in the evolutionary stage of being a Sandslash.",
        "It has two wings and legs shaped like a Squirtle. Its arms have a wing-like shape. The Pokémon has a smug facial expression and a unique feature of wings."
    ],
    "Sandslash": [
        "Sylveon is in the evolutionary stage of being a Sandslash. Its coloration is pink and brown, and its size is medium.",
        "It has a brown body with a yellow head and wings. The Pokémon has four limbs, two heads, and two eyes with a hawk-like shape.",
        "The eye color is brown, and the mouth has a slit shape. The tail resembles that of a swan.",
        "Sylveon has a special marking of a red and yellow crest on its head, along with a white ear shape similar to a swan. Its skin texture is smooth.",
        "It has two wings and legs shaped like a Squirtle. Its arms have a wing-like shape. The Pokémon has a smug facial expression and a unique feature of wings."
    ],
    "Swanslash": [
        "Sylveon resembles a bird, particularly a swan, with its medium size and pink and brown coloration.",
        "Its brown body has a yellow head and wings. The Pokémon has four limbs, two heads, and two eyes with a hawk-like shape.",
        "The eye color is brown, and the mouth has a slit shape. The tail is shaped like that of a swan.",
        "Sylveon has a special marking of a red and yellow crest on its head, along with a white ear shape similar to a swan. Its skin texture is smooth.",
        "It has two wings and legs shaped like a Squirtle. Its arms have a wing-like shape. The Pokémon has a smug facial expression and a unique feature of wings."
    ]
}


Pidgeotto_8
{
  "Squirtle": [
    "The image shows a pokemon resembling a squirtle with a brown body and a red head.",
    "It has a small size and a bird-like shape.",
    "The pokemon has hawk-shaped red eyes and a slit-shaped mouth.",
    "It has a swan-like tail and two heads, with two eyes on each head.",
    "The pokemon is associated with the bird element and has a special marking of a red hat with a white crest on its head."
  ],
  "Redhat": [
    "The image shows a pokemon resembling a squirtle with a brown body and a red head.",
    "It has a small size and a bird-like shape.",
    "The pokemon has hawk-shaped red eyes and a slit-shaped mouth.",
    "It has a swan-like tail and two heads, with two eyes on each head.",
    "The pokemon is associated with the bird element and has a special marking of a red hat with a white crest on its head."
  ],
  "Crestspike": [
    "The image shows a pokemon resembling a squirtle with a brown body and a red head.",
    "It has a small size and a bird-like shape.",
    "The pokemon has hawk-shaped red eyes and a slit-shaped mouth.",
    "It has a swan-like tail and two heads, with two eyes on each head.",
    "The pokemon is associated with the bird element and has a special marking of a red hat with a white crest on its head."
  ]
}


Charmeleon_9
{
    "Flamizard": [
        "The image shows a small red fire type pokemon with a red and white striped body, black belly, and a flame on its head.",
        "It has a sad expression with squint-shaped red eyes and a slit-shaped mouth.",
        "The pokemon has two heads, two eyes, and four limbs.",
        "It has a stubby tail with a curved tip and no presence of fins, horns, or crests.",
        "The unique features include slanted triangle-shaped ears, a red scaly skin, and a spike on its body."
    ],
    "Lizardflare": [
        "The image shows a small red fire type pokemon with a red and white striped body, black belly, and a flame on its head.",
        "It has a sad expression with squint-shaped red eyes and a slit-shaped mouth.",
        "The pokemon has two heads, two eyes, and four limbs.",
        "It has a stubby tail with a curved tip and no presence of fins, horns, or crests.",
        "The unique features include slanted triangle-shaped ears, a red scaly skin, and a spike on its body."
    ],
    "Ignisaur": [
        "The image shows a small red fire type pokemon with a red and white striped body, black belly, and a flame on its head.",
        "It has a sad expression with squint-shaped red eyes and a slit-shaped mouth.",
        "The pokemon has two heads, two eyes, and four limbs.",
        "It has a stubby tail with a curved tip and no presence of fins, horns, or crests.",
        "The unique features include slanted triangle-shaped ears, a red scaly skin, and a spike on its body."
    ]
}


Charmeleon_10
{
    "Squirtle": [
        "The pokemon in the image is a small, red-colored creature that resembles a lizard.",
        "It has a tiger-like pattern on its body and a red tummy with a white belly.",
        "With four limbs and two heads, it has squinted red eyes and a snout-like mouth.",
        "Its tail is slanted and resembles a tadpole.",
        "This pokemon is associated with the fire element and has the ability of a fire-type."
    ],
    "Charmander": [
        "The pokemon in the image is a small, red-colored creature that resembles a lizard.",
        "It has a tiger-like pattern on its body and a red tummy with a white belly.",
        "With four limbs and two heads, it has squinted red eyes and a snout-like mouth.",
        "Its tail is slanted and resembles a tadpole.",
        "This pokemon is associated with the fire element and has the ability of a fire-type."
    ],
    "Charizard": [
        "The pokemon in the image is a small, red-colored creature that resembles a lizard.",
        "It has a tiger-like pattern on its body and a red tummy with a white belly.",
        "With four limbs and two heads, it has squinted red eyes and a snout-like mouth.",
        "Its tail is slanted and resembles a tadpole.",
        "This pokemon is associated with the fire element and has the ability of a fire-type."
    ]
}


Charmeleon_11
{
    "Squirtle": [
        "A squirtle is a small, red and yellow pokemon with a red body, white belly, and white tail.",
        "It has four limbs, two heads, and two eyes that are squint and red in color.",
        "The pokemon has a slit mouth and a stubby tail with a curved tip.",
        "It is associated with the fire element and has special markings on its body.",
        "The squirtle has a triangular ear shape, smooth skin texture, and a smirk facial expression."
    ],
    "Charmeleon": [
        "A squirtle is a small, red and yellow pokemon with a red body, white belly, and white tail.",
        "It has four limbs, two heads, and two eyes that are squint and red in color.",
        "The pokemon has a slit mouth and a stubby tail with a curved tip.",
        "It is associated with the fire element and has special markings on its body.",
        "The squirtle has a triangular ear shape, smooth skin texture, and a smirk facial expression."
    ],
    "Charizard": [
        "A squirtle is a small, red and yellow pokemon with a red body, white belly, and white tail.",
        "It has four limbs, two heads, and two eyes that are squint and red in color.",
        "The pokemon has a slit mouth and a stubby tail with a curved tip.",
        "It is associated with the fire element and has special markings on its body.",
        "The squirtle has a triangular ear shape, smooth skin texture, and a smirk facial expression."
    ]
}


Squirtle_12
{
    "Squirtle": [
        "This is a small turtle-like pokemon called Squirtle.",
        "It has a blue body with a yellow head and a yellow tail.",
        "The pokemon has a sad expression with squinted blue eyes and a slit mouth.",
        "It has four limbs and two heads with two blue eyes.",
        "Squirtle is associated with the element of sand and has a smooth skin texture."
    ],
    "Wartortle": [
        "This is a small turtle-like pokemon called Wartortle.",
        "It has a blue body with a yellow head and a yellow tail.",
        "The pokemon has a sad expression with squinted blue eyes and a slit mouth.",
        "It has four limbs and two heads with two blue eyes.",
        "Wartortle is associated with the element of sand and has a smooth skin texture."
    ],
    "Blastoise": [
        "This is a small turtle-like pokemon called Blastoise.",
        "It has a blue body with a yellow head and a yellow tail.",
        "The pokemon has a sad expression with squinted blue eyes and a slit mouth.",
        "It has four limbs and two heads with two blue eyes.",
        "Blastoise is associated with the element of sand and has a smooth skin texture."
    ]
}


Squirtle_13
{
    "Squirtle": [
        "Squirtle is a small, blue turtle-like Pokémon with a smooth skin texture.",
        "It has a squint eye shape and blue eyes.",
        "The mouth is in the form of a snout.",
        "Squirtle has a unique body pattern that resembles a squirtle.",
        "It has four limbs, a tail, and two heads."
    ],
    "Wartortle": [
        "Wartortle evolves from Squirtle and is a larger, more powerful water-type Pokémon.",
        "It retains the same blue color and turtle-like shape.",
        "Wartortle has evolved to have a larger body size and more defined limbs.",
        "It still has a snout-shaped mouth and two squint eyes.",
        "The special markings on Wartortle include a darker blue tail and the presence of a spike on its back."
    ],
    "Blastoise": [
        "Blastoise is the final evolution stage of Squirtle, following Wartortle.",
        "It is a larger, more heavily built Pokémon with a dark blue color.",
        "Blastoise has a more pronounced turtle shape and a distinctive cannon-like structure on its back.",
        "It has two heads, a snout-shaped mouth, and blue eyes.",
        "The special markings of Blastoise include water cannons on its shell and a spike on its back."
    ]
}


Squirtle_14
{
    "Squirtle": [
        "This is a blue turtle with a small size and a smooth skin texture.",
        "It has a squint eye shape and blue eyes.",
        "The mouth shape is a slit and it has a turtle-shaped body with a tail.",
        "It has two heads and two limbs.",
        "The pokemon is a squirtle in its evolutionary stage."
    ],
    "Wartortle": [
        "This is a blue turtle with a small size and a smooth skin texture.",
        "It has a squint eye shape and blue eyes.",
        "The mouth shape is a slit and it has a turtle-shaped body with a tail.",
        "It has two heads and two limbs.",
        "The pokemon is a squirtle in its evolutionary stage."
    ],
    "Blastoise": [
        "This is a blue turtle with a small size and a smooth skin texture.",
        "It has a squint eye shape and blue eyes.",
        "The mouth shape is a slit and it has a turtle-shaped body with a tail.",
        "It has two heads and two limbs.",
        "The pokemon is a squirtle in its evolutionary stage."
    ]
}


Bulbasaur_15
{
    "Squirtle": [
        "A squirtle is a small and green pokemon with a red head and tail.",
        "It has four limbs and a squinty green eyes.",
        "The mouth is in a slit shape and the unique feature of this pokemon is its green body with red eyes.",
        "It has two heads and two eyes.",
        "The skin texture of the squirtle is smooth and it is at the evolutionary stage of being a squirtle."
    ],
    "Greened": [
        "A squirtle is a small and green pokemon with a red head and tail.",
        "It has four limbs and a squinty green eyes.",
        "The mouth is in a slit shape and the unique feature of this pokemon is its green body with red eyes.",
        "It has two heads and two eyes.",
        "The skin texture of the squirtle is smooth and it is at the evolutionary stage of being a squirtle."
    ],
    "Frogleaf": [
        "A squirtle is a small and green pokemon with a red head and tail.",
        "It has four limbs and a squinty green eyes.",
        "The mouth is in a slit shape and the unique feature of this pokemon is its green body with red eyes.",
        "It has two heads and two eyes.",
        "The skin texture of the squirtle is smooth and it is at the evolutionary stage of being a squirtle."
    ]
}


Bulbasaur_16
{
    "Squirtle": [
        "Squirtle is a small, green, leafy creature with a sad expression.",
        "It has a leaf on its back and is associated with the grass element.",
        "It has four limbs, two heads, and two eyes which are squinted and green in color.",
        "Squirtle has a smooth skin texture and its body shape resembles a squirtle.",
        "It does not have wings, fins, or horns, but it does have a spike on its back."
    ],
    "Greenleaf": [
        "Greenleaf is a small, green, leafy creature with a sad expression.",
        "It has a leaf on its back and is associated with the grass element.",
        "It has four limbs, two heads, and two eyes which are squinted and green in color.",
        "Greenleaf has a smooth skin texture and its body shape resembles a squirtle.",
        "It does not have wings, fins, or horns, but it does have a spike on its back."
    ],
    "Leafurtle": [
        "Leafurtle is a small, green, leafy creature with a sad expression.",
        "It has a leaf on its back and is associated with the grass element.",
        "It has four limbs, two heads, and two eyes which are squinted and green in color.",
        "Leafurtle has a smooth skin texture and its body shape resembles a squirtle.",
        "It does not have wings, fins, or horns, but it does have a spike on its back."
    ]
}


Bulbasaur_17
{
    "Squirtle": [
        "This image shows a small, green Pokemon called Squirtle.",
        "It has a spherical body with a rounded head and two squinty green eyes.",
        "The Pokemon has a sad facial expression and its mouth is in the shape of a slit.",
        "It has four limbs, each ending in a Squirtle-like shape.",
        "Squirtle has a unique feature, which is a backpack-like pouch on its back."
    ],
    "Squirtle-like creature": [
        "This image shows a small, green Pokemon called Squirtle-like creature.",
        "It has a spherical body with a rounded head and two squinty green eyes.",
        "The Pokemon has a sad facial expression and its mouth is in the shape of a slit.",
        "It has four limbs, each ending in a Squirtle-like shape.",
        "Squirtle-like creature has a unique feature, which is a backpack-like pouch on its back."
    ],
    "Green Pokemon": [
        "This image shows a small, green Pokemon called Green Pokemon.",
        "It has a spherical body with a rounded head and two squinty green eyes.",
        "The Pokemon has a sad facial expression and its mouth is in the shape of a slit.",
        "It has four limbs, each ending in a Squirtle-like shape.",
        "Green Pokemon has a unique feature, which is a backpack-like pouch on its back."
    ]
}


Raichu_18
{
    "Pikachu": [
        "This image shows a small, yellow pokemon called Pikachu.",
        "It has a Squirtle-like tail and a snout, and its body has special markings with a yellow color, a black tail, and a white t.",
        "Pikachu has a squint eye shape with yellow eyes and a smiley facial expression.",
        "It has two heads, two eyes, and four limbs, with a small and smooth skin texture.",
        "Pikachu is associated with the water element and has a unique feature of having a tail."
    ],
    "Pichu": [
        "This image shows a small, yellow pokemon called Pichu.",
        "It has a Squirtle-like tail and a snout, and its body has special markings with a yellow color, a black tail, and a white t.",
        "Pichu has a squint eye shape with yellow eyes and a smiley facial expression.",
        "It has two heads, two eyes, and four limbs, with a small and smooth skin texture.",
        "Pichu is associated with the water element and has a unique feature of having a tail."
    ],
    "Raichu": [
        "This image shows a small, yellow pokemon called Raichu.",
        "It has a Squirtle-like tail and a snout, and its body has special markings with a yellow color, a black tail, and a white t.",
        "Raichu has a squint eye shape with yellow eyes and a smiley facial expression.",
        "It has two heads, two eyes, and four limbs, with a small and smooth skin texture.",
        "Raichu is associated with the water element and has a unique feature of having a tail."
    ]
}


Raichu_19
{
    "PikaHorn": [
        "This image shows a small, brown pikachu with a snout-like shape and a pigtail tail.",
        "It has a squirtle-like pattern on its back.",
        "The pikachu has four limbs and two heads, with two squinty brown eyes and a slit mouth.",
        "It has a unique feature of a horn on its snout and a sad expression.",
        "The skin texture is smooth, and it is in the evolutionary stage of a pikachu."
    ],
    "Squirtchu": [
        "This image shows a small, brown pikachu with a snout-like shape and a pigtail tail.",
        "It has a squirtle-like pattern on its back.",
        "The pikachu has four limbs and two heads, with two squinty brown eyes and a slit mouth.",
        "It has a unique feature of a horn on its snout and a sad expression.",
        "The skin texture is smooth, and it is in the evolutionary stage of a pikachu."
    ],
    "Sadtail Pikachu": [
        "This image shows a small, brown pikachu with a snout-like shape and a pigtail tail.",
        "It has a squirtle-like pattern on its back.",
        "The pikachu has four limbs and two heads, with two squinty brown eyes and a slit mouth.",
        "It has a unique feature of a horn on its snout and a sad expression.",
        "The skin texture is smooth, and it is in the evolutionary stage of a pikachu."
    ]
}


Raichu_20
{
    "Pikachu": [
        "This is a small, orange and white Pokemon called Pikachu.",
        "It has a yellow body, a yellow head, and a yellow tail.",
        "It has two heads and two eyes, with a squint eye shape and yellow eye color.",
        "Pikachu has a small size and a smooth skin texture.",
        "It has a unique feature of a horn."
    ],
    "Pika": [
        "This is a small, orange and white Pokemon called Pikachu.",
        "It has a yellow body, a yellow head, and a yellow tail.",
        "It has two heads and two eyes, with a squint eye shape and yellow eye color.",
        "Pikachu has a small size and a smooth skin texture.",
        "It has a unique feature of a horn."
    ],
    "Sparkachu": [
        "This is a small, orange and white Pokemon called Pikachu.",
        "It has a yellow body, a yellow head, and a yellow tail.",
        "It has two heads and two eyes, with a squint eye shape and yellow eye color.",
        "Pikachu has a small size and a smooth skin texture.",
        "It has a unique feature of a horn."
    ]
}


Wartortle_21
{
  "Squirtle": [
    "A squirtle is a small-sized turtle-like Pokemon with a blue body and a white belly.",
    "It has a blue head with a squint-shaped blue eyes and a slit-like mouth.",
    "The Pokemon has two heads and four limbs.",
    "It is associated with the water element and has a tail shaped like a squirtle.",
    "It has smooth and shiny skin and a unique feature of having a shell."
  ],
  "Wartortle": [
    "A squirtle is a small-sized turtle-like Pokemon with a blue body and a white belly.",
    "It has a blue head with a squint-shaped blue eyes and a slit-like mouth.",
    "The Pokemon has two heads and four limbs.",
    "It is associated with the water element and has a tail shaped like a squirtle.",
    "It has smooth and shiny skin and a unique feature of having a shell."
  ],
  "Blastoise": [
    "A squirtle is a small-sized turtle-like Pokemon with a blue body and a white belly.",
    "It has a blue head with a squint-shaped blue eyes and a slit-like mouth.",
    "The Pokemon has two heads and four limbs.",
    "It is associated with the water element and has a tail shaped like a squirtle.",
    "It has smooth and shiny skin and a unique feature of having a shell."
  ]
}


Wartortle_22
{
   "Squirturtle": [
      "The pokemon in the image is a small, blue turtle-like creature with a squirtle pattern on its body.",
      "It has four limbs and two heads with squinted blue eyes and a slit-like mouth.",
      "The pokemon has a fairy element associated with it and special markings in the form of a squirtle on its back and a smooth skin texture.",
      "It is at an early evolutionary stage and does not have any wings, fins, or horns.",
      "Its unique feature is that it is a squirtle. The pokemon has a friendly facial expression with a smile."
   ],
   "Bluetail": [
      "The pokemon in the image is a small, blue turtle-like creature with a squirtle pattern on its body.",
      "It has four limbs and two heads with squinted blue eyes and a slit-like mouth.",
      "The pokemon has a fairy element associated with it and special markings in the form of a squirtle on its back and a smooth skin texture.",
      "It is at an early evolutionary stage and does not have any wings, fins, or horns.",
      "Its unique feature is that it is a squirtle. The pokemon has a friendly facial expression with a smile."
   ],
   "Fairesquirt": [
      "The pokemon in the image is a small, blue turtle-like creature with a squirtle pattern on its body.",
      "It has four limbs and two heads with squinted blue eyes and a slit-like mouth.",
      "The pokemon has a fairy element associated with it and special markings in the form of a squirtle on its back and a smooth skin texture.",
      "It is at an early evolutionary stage and does not have any wings, fins, or horns.",
      "Its unique feature is that it is a squirtle. The pokemon has a friendly facial expression with a smile."
   ]
}


Wartortle_23
{
    "Squirtle": [
        "This is a small, blue turtle-like pokemon with a white belly and head.",
        "It has four limbs that are shaped like a turtle's arms and a tail shaped like a squirtle.",
        "It has two heads and two blue squint-shaped eyes.",
        "The pokemon has a sad facial expression and a slit mouth.",
        "Its ears are in the shape of a 't' and it doesn't have any fins, horns, or crests/spikes."
    ],
    "Wartortle": [
        "This is a small, blue turtle-like pokemon with a white belly and head.",
        "It has four limbs that are shaped like a turtle's arms and a tail shaped like a squirtle.",
        "It has two heads and two blue squint-shaped eyes.",
        "The pokemon has a sad facial expression and a slit mouth.",
        "Its ears are in the shape of a 't' and it doesn't have any fins, horns, or crests/spikes."
    ],
    "Blastoise": [
        "This is a small, blue turtle-like pokemon with a white belly and head.",
        "It has four limbs that are shaped like a turtle's arms and a tail shaped like a squirtle.",
        "It has two heads and two blue squint-shaped eyes.",
        "The pokemon has a sad facial expression and a slit mouth.",
        "Its ears are in the shape of a 't' and it doesn't have any fins, horns, or crests/spikes."
    ]
}


Ivysaur_24
{
"Flower Squirtle": [
"A Squirtle with a flower on its head is a small, green Pokemon with a scaly texture.",
"It has a sad facial expression and squinted blue eyes.",
"The Pokemon has four limbs, two heads, and two eyes.",
"It has a slit mouth and a unique feature of a flower on its head.",
"The body pattern of this Squirtle includes a splotch of green on its back."
],
"Greenleaf Squirtle": [
"A Squirtle with a flower on its head is a small, green Pokemon with a scaly texture.",
"It has a sad facial expression and squinted blue eyes.",
"The Pokemon has four limbs, two heads, and two eyes.",
"It has a slit mouth and a unique feature of a flower on its head.",
"The body pattern of this Squirtle includes a splotch of green on its back."
],
"Sadpetal Squirtle": [
"A Squirtle with a flower on its head is a small, green Pokemon with a scaly texture.",
"It has a sad facial expression and squinted blue eyes.",
"The Pokemon has four limbs, two heads, and two eyes.",
"It has a slit mouth and a unique feature of a flower on its head.",
"The body pattern of this Squirtle includes a splotch of green on its back."
]
}


Ivysaur_25
{
    "Squirtle": [
        "This image shows a small blue Pokemon known as Squirtle.",
        "It has a leaf on its back and a body with a green head and a pink tail.",
        "Squirtle has four limbs, two heads, and two eyes.",
        "Its eyes are squinted and blue in color.",
        "The mouth is in the shape of a slit."
    ],
    "Wartortle": [
        "This image shows a small blue Pokemon known as Wartortle.",
        "It has a leaf on its back and a body with a green head and a pink tail.",
        "Wartortle has four limbs, two heads, and two eyes.",
        "Its eyes are squinted and blue in color.",
        "The mouth is in the shape of a slit."
    ],
    "Blastoise": [
        "This image shows a small blue Pokemon known as Blastoise.",
        "It has a leaf on its back and a body with a green head and a pink tail.",
        "Blastoise has four limbs, two heads, and two eyes.",
        "Its eyes are squinted and blue in color.",
        "The mouth is in the shape of a slit."
    ]
}


Ivysaur_26
{
    "Squirtle": [
        "This image is of a small, blue pokemon called Squirtle.",
        "It has a blue and green body pattern with a pink flower on its head.",
        "Squirtle has four limbs, two heads, and two squinty blue eyes.",
        "Its mouth has a slit shape and it has a tail specific to Squirtle.",
        "The pokemon is associated with a flower and has special markings in the form of a flower on its head."
    ],
    "Wartortle": [
        "This image is of a small, blue pokemon called Wartortle.",
        "It has a blue and green body pattern with a pink flower on its head.",
        "Wartortle has four limbs, two heads, and two squinty blue eyes.",
        "Its mouth has a slit shape and it has a tail specific to Wartortle.",
        "The pokemon is associated with a flower and has special markings in the form of a flower on its head."
    ],
    "Blastoise": [
        "This image is of a small, blue pokemon called Blastoise.",
        "It has a blue and green body pattern with a pink flower on its head.",
        "Blastoise has four limbs, two heads, and two squinty blue eyes.",
        "Its mouth has a slit shape and it has a tail specific to Blastoise.",
        "The pokemon is associated with a flower and has special markings in the form of a flower on its head."
    ]
}


Pikachu_27
{
  "Pikachu": [
    "Pikachu is a small, yellow Pokemon with a black nose and black eyes.",
    "It has a squinty eye shape and a slit mouth shape.",
    "The Pokemon has a stubby tail and two heads.",
    "It is associated with the element of electricity.",
    "Pikachu has a unique feature of a yellow head and a smooth skin texture."
  ],
  "Pichu": [
    "Pikachu is a small, yellow Pokemon with a black nose and black eyes.",
    "It has a squinty eye shape and a slit mouth shape.",
    "The Pokemon has a stubby tail and two heads.",
    "It is associated with the element of electricity.",
    "Pikachu has a unique feature of a yellow head and a smooth skin texture."
  ],
  "Raichu": [
    "Pikachu is a small, yellow Pokemon with a black nose and black eyes.",
    "It has a squinty eye shape and a slit mouth shape.",
    "The Pokemon has a stubby tail and two heads.",
    "It is associated with the element of electricity.",
    "Pikachu has a unique feature of a yellow head and a smooth skin texture."
  ]
}


Pikachu_28
{
"pikachu": [
"Summary: Pikachu is a small, yellow Pokémon with a body shape of a small yellow ball.",
"It has a yellow squinty eyes, a slit mouth, and a stubby tail.",
"It has two heads with two eyes each.",
"Pikachu has a smooth and shiny skin texture.",
"It is a unique Pokémon belonging to the evolutionary stage of Pikachu."
],
"Pika": [
"Summary: Pikachu is a small, yellow Pokémon with a body shape of a small yellow ball.",
"It has a yellow squinty eyes, a slit mouth, and a stubby tail.",
"It has two heads with two eyes each.",
"Pikachu has a smooth and shiny skin texture.",
"It is a unique Pokémon belonging to the evolutionary stage of Pikachu."
],
"Electricball": [
"Summary: Pikachu is a small, yellow Pokémon with a body shape of a small yellow ball.",
"It has a yellow squinty eyes, a slit mouth, and a stubby tail.",
"It has two heads with two eyes each.",
"Pikachu has a smooth and shiny skin texture.",
"It is a unique Pokémon belonging to the evolutionary stage of Pikachu."
]
}


Pikachu_29
{
    "Pikachu": [
        "The pokemon in the image is a yellow Pikachu, small in size with a yellow body, black head, and a black tail.",
        "It has four limbs and a squint eye shape with yellow eyes.",
        "The mouth has a slit shape.",
        "The Pikachu has a unique feature of a tail and it is at the evolutionary stage of a Pikachu.",
        "There are no fins, horns, or crests present. The pokemon has a sad facial expression and associated with the element of lightning."
    ],
    "Pichu": [
        "The pokemon in the image is a yellow Pichu, small in size with a yellow body, black head, and a black tail.",
        "It has four limbs and a squint eye shape with yellow eyes.",
        "The mouth has a slit shape.",
        "The Pichu has a unique feature of a tail and it is at an early evolutionary stage.",
        "There are no fins, horns, or crests present. The pokemon has a sad facial expression and associated with the element of lightning."
    ],
    "Raichu": [
        "The pokemon in the image is a yellow Raichu, small in size with a yellow body, black head, and a black tail.",
        "It has four limbs and a squint eye shape with yellow eyes.",
        "The mouth has a slit shape.",
        "The Raichu has a unique feature of a tail and it is at an advanced evolutionary stage.",
        "There are no fins, horns, or crests present. The pokemon has a sad facial expression and associated with the element of lightning."
    ]
}


==============================
		 Finished Post-processing
==============================
		 ---> total discovered names = 47
['Sandslash', 'Squirturtle', 'Ignisaur', 'Sadpetal Squirtle', 'Charmeleon', 'Pikachu', 'Squirtchu', 'Charmander', 'PikaHorn', 'Flower Squirtle', 'pikachu', 'Fairesquirt', 'Greened', 'Pidgeot', 'Pichu', 'Wartortle', 'Cyndaquil', 'Crestwing', 'Birdor', 'Greenleaf Squirtle', 'Crestspike', 'Charizard', 'Squirtle-like creature', 'Swellow', 'Sadtail Pikachu', 'Sparkachu', 'Bluetail', 'Squirtle', 'Frogleaf', 'Hawkwing', 'Blastoise', 'Pika', 'Greenleaf', 'Sylveon', 'Raichu', 'Swanbeak', 'Staraptor', 'Flamizard', 'Lizardflare', 'Hawkbeak', 'Green Pokemon', 'Redhat', 'Electricball', 'Swaneye', 'Swanslash', 'Leafurtle', 'Swanwing']

		 ---> total discovered names = 47
		 ---> number of failure entries = 0
END==============================

Namespace(config_file_env='./configs/env_machine.yml', config_file_expt='./configs/expts/pokemon_all.yml', alpha=0.7, N_tta=10, num_per_category='3', num_runs=10)
Number of GPUs: 1
Device ID: 0 Device Name: NVIDIA RTX A6000
['Sandslash', 'Squirturtle', 'Ignisaur', 'Sadpetal Squirtle', 'Charmeleon', 'Pikachu', 'Squirtchu', 'Charmander', 'PikaHorn', 'Flower Squirtle', 'pikachu', 'Fairesquirt', 'Greened', 'Pidgeot', 'Pichu', 'Wartortle', 'Cyndaquil', 'Crestwing', 'Birdor', 'Greenleaf Squirtle', 'Crestspike', 'Charizard', 'Squirtle-like creature', 'Swellow', 'Sadtail Pikachu', 'Sparkachu', 'Bluetail', 'Squirtle', 'Frogleaf', 'Hawkwing', 'Blastoise', 'Pika', 'Greenleaf', 'Sylveon', 'Raichu', 'Swanbeak', 'Staraptor', 'Flamizard', 'Lizardflare', 'Hawkbeak', 'Green Pokemon', 'Redhat', 'Electricball', 'Swaneye', 'Swanslash', 'Leafurtle', 'Swanwing']
0it [00:00, ?it/s]1it [00:00,  6.65it/s]4it [00:00, 10.88it/s]7it [00:00, 15.36it/s]9it [00:00, 14.76it/s]11it [00:00, 15.45it/s]13it [00:00, 16.16it/s]15it [00:01, 13.62it/s]17it [00:01, 14.38it/s]19it [00:01, 14.97it/s]21it [00:01, 15.60it/s]23it [00:01, 15.85it/s]25it [00:01, 15.71it/s]27it [00:01, 15.73it/s]30it [00:01, 18.09it/s]30it [00:01, 15.40it/s]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:01<00:00,  1.56s/it]100%|██████████| 1/1 [00:01<00:00,  1.62s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:01<00:00,  1.44s/it]100%|██████████| 1/1 [00:01<00:00,  1.51s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.789372444152832


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 71.53846153846153
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 81.95026331016642
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 65.98797952066484


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 78.93724060058594
=========================          END          =========================
0it [00:00, ?it/s]2it [00:00, 18.21it/s]4it [00:00, 10.10it/s]7it [00:00, 14.10it/s]9it [00:00, 13.80it/s]11it [00:00, 15.35it/s]14it [00:00, 15.93it/s]16it [00:01, 15.46it/s]18it [00:01, 14.91it/s]20it [00:01, 14.58it/s]22it [00:01, 14.36it/s]24it [00:01, 13.68it/s]26it [00:01, 14.67it/s]28it [00:01, 14.06it/s]30it [00:02, 13.97it/s]30it [00:02, 14.31it/s]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:01<00:00,  1.96s/it]100%|██████████| 1/1 [00:02<00:00,  2.08s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.21s/it]100%|██████████| 1/1 [00:02<00:00,  2.34s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.7823934555053711


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 72.3076923076923
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 82.44214092823508
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 66.1134328358209


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 78.23934936523438
=========================          END          =========================
0it [00:00, ?it/s]1it [00:00,  3.41it/s]2it [00:00,  2.43it/s]3it [00:01,  2.99it/s]4it [00:01,  2.49it/s]5it [00:01,  2.50it/s]6it [00:02,  2.48it/s]7it [00:02,  2.32it/s]8it [00:03,  2.54it/s]9it [00:03,  3.09it/s]10it [00:03,  2.74it/s]11it [00:03,  3.12it/s]12it [00:04,  3.76it/s]13it [00:04,  4.21it/s]14it [00:04,  3.68it/s]15it [00:04,  3.62it/s]16it [00:05,  4.30it/s]17it [00:05,  4.00it/s]18it [00:05,  3.87it/s]19it [00:05,  3.63it/s]20it [00:06,  4.16it/s]21it [00:06,  3.58it/s]22it [00:06,  3.54it/s]23it [00:06,  3.81it/s]24it [00:07,  4.17it/s]25it [00:07,  4.26it/s]26it [00:07,  3.66it/s]27it [00:08,  3.69it/s]28it [00:08,  3.34it/s]29it [00:08,  3.58it/s]30it [00:08,  3.44it/s]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.12s/it]100%|██████████| 1/1 [00:02<00:00,  2.26s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.14s/it]100%|██████████| 1/1 [00:02<00:00,  2.24s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.7877997756004333


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 70.0
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 81.37838283145075
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 65.03859442769976


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 78.77997589111328
=========================          END          =========================
0it [00:00, ?it/s]1it [00:00,  2.52it/s]2it [00:01,  1.65it/s]3it [00:01,  2.21it/s]4it [00:02,  1.71it/s]5it [00:02,  1.98it/s]6it [00:03,  2.08it/s]7it [00:03,  2.43it/s]8it [00:03,  2.80it/s]9it [00:03,  3.35it/s]10it [00:03,  3.35it/s]11it [00:04,  3.13it/s]12it [00:04,  2.96it/s]13it [00:04,  3.56it/s]14it [00:05,  3.20it/s]15it [00:05,  2.84it/s]16it [00:06,  2.95it/s]17it [00:06,  2.98it/s]18it [00:06,  3.16it/s]19it [00:07,  2.93it/s]20it [00:07,  2.74it/s]21it [00:07,  2.93it/s]22it [00:08,  2.93it/s]23it [00:08,  2.41it/s]24it [00:08,  2.75it/s]25it [00:09,  3.01it/s]26it [00:09,  2.62it/s]28it [00:09,  4.37it/s]29it [00:09,  4.43it/s]30it [00:10,  4.27it/s]30it [00:10,  2.93it/s]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.12s/it]100%|██████████| 1/1 [00:02<00:00,  2.23s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:01<00:00,  1.96s/it]100%|██████████| 1/1 [00:02<00:00,  2.12s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.7855166792869568


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 71.53846153846153
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 82.47900596167906
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 66.20196864746629


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 78.55166625976562
=========================          END          =========================
0it [00:00, ?it/s]2it [00:00, 13.88it/s]4it [00:00, 11.68it/s]6it [00:00, 13.30it/s]8it [00:00, 13.80it/s]10it [00:00, 13.86it/s]12it [00:00, 15.10it/s]14it [00:00, 14.62it/s]16it [00:01, 13.03it/s]18it [00:01, 14.26it/s]20it [00:01, 15.42it/s]22it [00:01, 14.90it/s]24it [00:01, 15.11it/s]26it [00:01, 15.57it/s]28it [00:01, 15.28it/s]30it [00:02, 15.76it/s]30it [00:02, 14.65it/s]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:01<00:00,  1.98s/it]100%|██████████| 1/1 [00:02<00:00,  2.08s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:01<00:00,  1.99s/it]100%|██████████| 1/1 [00:02<00:00,  2.10s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.786565363407135


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 72.3076923076923
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 82.28536165665598
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 66.24465102552752


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 78.65653991699219
=========================          END          =========================
0it [00:00, ?it/s]2it [00:00, 14.18it/s]4it [00:00, 10.49it/s]6it [00:00, 12.98it/s]8it [00:00, 14.58it/s]10it [00:00, 15.85it/s]12it [00:00, 14.85it/s]14it [00:00, 14.39it/s]16it [00:01, 15.03it/s]18it [00:01, 15.68it/s]20it [00:01, 15.37it/s]22it [00:01, 16.35it/s]24it [00:01, 16.28it/s]26it [00:01, 16.55it/s]28it [00:02, 10.16it/s]30it [00:02, 11.12it/s]30it [00:02, 13.49it/s]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.16s/it]100%|██████████| 1/1 [00:02<00:00,  2.28s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.11s/it]100%|██████████| 1/1 [00:02<00:00,  2.23s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.7819525599479675


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 71.53846153846153
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 81.33159445485518
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 65.07581921739774


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 78.19525909423828
=========================          END          =========================
0it [00:00, ?it/s]1it [00:00,  3.75it/s]2it [00:00,  3.24it/s]3it [00:00,  2.95it/s]4it [00:01,  2.64it/s]5it [00:01,  2.29it/s]6it [00:02,  2.67it/s]7it [00:02,  2.96it/s]8it [00:03,  2.29it/s]9it [00:03,  2.53it/s]10it [00:03,  2.82it/s]11it [00:04,  2.38it/s]12it [00:04,  2.42it/s]13it [00:05,  2.06it/s]14it [00:05,  2.19it/s]15it [00:05,  2.83it/s]16it [00:05,  3.54it/s]17it [00:06,  3.38it/s]18it [00:06,  4.07it/s]19it [00:06,  3.56it/s]20it [00:06,  4.41it/s]21it [00:07,  4.13it/s]22it [00:07,  3.72it/s]23it [00:07,  3.83it/s]24it [00:08,  3.55it/s]25it [00:08,  3.15it/s]26it [00:08,  3.15it/s]27it [00:09,  2.52it/s]28it [00:09,  2.85it/s]29it [00:09,  2.91it/s]30it [00:10,  2.79it/s]30it [00:10,  2.91it/s]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.38s/it]100%|██████████| 1/1 [00:02<00:00,  2.55s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.31s/it]100%|██████████| 1/1 [00:02<00:00,  2.46s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.7775742411613464


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 70.0
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 80.91855288838559
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 64.16666666666667


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 77.7574234008789
=========================          END          =========================
0it [00:00, ?it/s]1it [00:00,  1.86it/s]2it [00:01,  1.64it/s]3it [00:01,  2.58it/s]4it [00:02,  1.89it/s]5it [00:02,  2.06it/s]6it [00:03,  1.87it/s]7it [00:03,  1.80it/s]8it [00:04,  1.76it/s]9it [00:04,  2.00it/s]10it [00:05,  1.88it/s]11it [00:05,  1.69it/s]12it [00:06,  2.14it/s]13it [00:06,  2.39it/s]14it [00:06,  2.64it/s]15it [00:06,  3.39it/s]16it [00:07,  3.66it/s]17it [00:07,  3.50it/s]18it [00:07,  2.93it/s]19it [00:08,  2.33it/s]20it [00:08,  2.92it/s]21it [00:08,  3.06it/s]22it [00:09,  3.03it/s]23it [00:09,  3.08it/s]24it [00:09,  2.97it/s]25it [00:10,  2.34it/s]26it [00:11,  2.11it/s]27it [00:11,  2.69it/s]28it [00:11,  3.18it/s]29it [00:11,  3.87it/s]30it [00:12,  3.34it/s]30it [00:12,  2.50it/s]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:01<00:00,  2.00s/it]100%|██████████| 1/1 [00:02<00:00,  2.10s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:01<00:00,  1.98s/it]100%|██████████| 1/1 [00:02<00:00,  2.12s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.7731141448020935


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 69.23076923076923
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 80.29294895083979
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 63.167142543378


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 77.31141662597656
=========================          END          =========================
0it [00:00, ?it/s]2it [00:00, 18.29it/s]4it [00:00, 12.18it/s]6it [00:00, 13.34it/s]8it [00:00, 13.42it/s]10it [00:00, 14.43it/s]12it [00:00, 14.93it/s]14it [00:01, 13.88it/s]16it [00:01, 14.49it/s]18it [00:01, 15.44it/s]20it [00:01, 15.53it/s]23it [00:01, 17.28it/s]25it [00:01, 17.00it/s]27it [00:01, 17.31it/s]30it [00:01, 18.03it/s]30it [00:01, 15.81it/s]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.41s/it]100%|██████████| 1/1 [00:02<00:00,  2.58s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.12s/it]100%|██████████| 1/1 [00:02<00:00,  2.24s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.7787977457046509


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 69.23076923076923
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 79.52636310365648
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 62.59755734286565


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 77.87977600097656
=========================          END          =========================
0it [00:00, ?it/s]2it [00:00, 16.35it/s]4it [00:00,  7.61it/s]5it [00:00,  8.01it/s]7it [00:00, 10.97it/s]9it [00:00, 12.55it/s]12it [00:00, 15.58it/s]14it [00:01, 15.49it/s]16it [00:01, 12.26it/s]19it [00:01, 14.46it/s]22it [00:01, 15.74it/s]24it [00:01, 16.59it/s]26it [00:01, 16.82it/s]29it [00:01, 19.14it/s]30it [00:02, 14.86it/s]
Number of selected candidates = 11
---> Each Classifier' shapes
	 GT_classifier = 10
	 ViLang_guessed = 11
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.05s/it]100%|██████████| 1/1 [00:02<00:00,  2.17s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.8868234753608704
---> Evaluating
  0%|          | 0/1 [00:00<?, ?it/s]huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
huggingface/tokenizers: The current process just got forked, after parallelism has already been used. Disabling parallelism to avoid deadlocks...
To disable this warning, you can either:
	- Avoid using `tokenizers` before the fork if possible
	- Explicitly set the environment variable TOKENIZERS_PARALLELISM=(true | false)
100%|██████████| 1/1 [00:02<00:00,  2.14s/it]100%|██████████| 1/1 [00:02<00:00,  2.25s/it]
Loading all-mpnet-base-v2...
Encoding...
pred_feats.shape torch.Size([130, 768])
gt_feats.shape torch.Size([130, 768])
Semantic similarity score = 0.7864943742752075


========================= UPPERBOUND: CLIP ZERO-SHOT-based Final Results =========================


[Clustering]
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Acc: 70.76923076923077
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Nmi: 81.7548663719772
Total UPPERBOUND: CLIP ZERO-SHOT-based Clustering Ari: 63.38319907940161


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 88.6823501586914
=========================          END          =========================


========================= OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Final Results =========================


[Clustering]
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Acc: 71.53846153846153
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Nmi: 82.1136700515549
Total OURS: VILANGGUESSED W/ ALPHA=0.7, N_TTA=10-based Clustering Ari: 66.36097275124524


[ssACC (semantic similarity ACC]
ssACC_sbert_base: 78.6494369506836
=========================          END          =========================


========================= ViLang Final Results of 10 runs, w/ 3 imgs per class=========================


[Clustering]
Clustering ACC: 70.92307692307693
Semantic ACC:   78.29580688476562
=========================          END          =========================
